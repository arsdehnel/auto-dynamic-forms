/*global
ADF
*/
ADF.messages = {
    displayLevels: [
        'log',
        'info',
        'debug',
        'warning',
        'error'
    ]
};
/*global
ADF,
_,
$
*/
ADF.utils = {
    randomId: function() {
        return Math.floor( Math.random() * 3789.4);
    },
    capitalize: function( string ) {
        return string.charAt(0).toUpperCase() + string.slice(1);
    },
    camelize: function( string ) {
        return string.toLowerCase().replace(/[_.-](\w|$)/g, function (_,x) {
            return x.toUpperCase();
        });
    },
    spin: function( targetObj, opts ) {

        var settings = {};
        var defaults = {
            emptyTarget : false
        };

        $.extend(settings, defaults, opts);

        if( settings.stop ){

            targetObj.removeClass('loading').find('.spinner').remove();

        }else{

            targetObj.removeClass('hide');

            if( settings.emptyTarget ){
                targetObj.empty();
            }

            targetObj.addClass('loading').spin();

        }

    },
    message: function() {

        // var args = Array.slice(arguments);
        var args = Array.prototype.slice.call(arguments);

        // remove first argument
        var level = args.shift();

        // add a prefix item to the logs just to try and be clear where it came from
        args.unshift('[ADF]');

        if( _.indexOf(ADF.messages.displayLevels,level) >= 0 ){

            // TODO: extend this to present errors as modals
            // TODO: allow console command to change alert levels
            console[level](args);

        }

        // TODO: log all messages into "level" specific arrays

//      // make sure our history log is ready
//          autoAdmin.log.history = autoAdmin.log.history || [];   // store logs to an array for reference

//          // output it if this browser supports that
//          if(window.console){
//          console.log( arguments );
//          }

//          // add a datestamp
//          args.push(Date.now());

//          // put it into our history log with the datestamp added
//          autoAdmin.log.history.push(args);

// below is from handlebars

  // var logger = {
  //   methodMap: { 0: 'debug', 1: 'info', 2: 'warn', 3: 'error' },

  //   // State enum
  //   DEBUG: 0,
  //   INFO: 1,
  //   WARN: 2,
  //   ERROR: 3,
  //   level: 3,

  //   // can be overridden in the host environment
  //   log: function(level, obj) {
  //     if (logger.level <= level) {
  //       var method = logger.methodMap[level];
  //       if (typeof console !== 'undefined' && console[method]) {
  //         console[method].call(console, obj);
  //       }
  //     }
  //   }
  // };

    },

    printObject: function(obj){
        return JSON.stringify(obj,null,'\t').replace(/\n/g,'<br>').replace(/\t/g,'&nbsp;&nbsp;&nbsp;');
    },

};


// window.autoAdmin = window.autoAdmin || {};

// autoAdmin.utils = {



//     spin: function( targetObj ){

//     	targetObj.removeClass('hide').html('').addClass('loading').spin();

//     },

//     pageSpin: function(){

//         this.pageOverlay({'show':true});
//         $('.page-spin').removeClass('hide');
//         this.pageSpinner = new Spinner({length: 60,width: 35, radius: 100}).spin(document.getElementById('page-spin'));

//     },

//     pageSpinStop: function(){

//         this.pageOverlay({'show':false});
//         $('.page-spin').addClass('hide');
//         this.pageSpinner.stop();

//     },

//     pageOverlay: function( args ){

//         if( args.show ){
//             $('.body-overlay').removeClass('hide');
//         }else{
//             $('.body-overlay').addClass('hide');
//         }

//     },

//     renderSelect2: function(){

//         // TODO dynamically determine if user can clear selection
//         // TODO dynamically determine if user cna add new option

//         var settings = {
//             "dropdownAutoWidth" : true,
//             "allowClear" : true,
//             "formatResult" : autoAdmin.utils.select2Template
//         }

//         $.extend( settings, arguments[0] );

//         var select2Obj = settings.select2Obj;

//         delete settings.select2Obj;

//         select2Obj.select2(settings);

//         if( select2Obj.attr('readonly') === "readonly" ){
//             select2Obj.select2("readonly",true);
//         }


//     },

//     select2Template: function( object, container, query ){

//         //make this into a jQ object so we can retrieve the data- attribute data
//         var optObj = $(object.element);

//         //have to do some manual stuff to "convert" this object that we get
//         //into a normal js object that can be used in hour handlebars template
//         //rather than just a plain old js-built template
//         if( object.id === object.text || object.text.length === 0 ){
//             var entryObj = {
//               "value" : object.id,
//               "label" : object.id,
//               "tooltip" : optObj.data('tooltip')
//             }
//         }else{
//             var entryObj = {
//               "value" : object.id,
//               "label" : "<span class='select2-option-value'>"+object.id+"</span><span class='select2-option-label'>"+object.text+"</span>",
//               "tooltip" : optObj.data('tooltip')
//             }
//         }
//         return autoAdmin.templates.inputHelperSelect2Record( entryObj );

//     },



// }
// TODO: svg rendering
var ADF = ADF||{};
ADF.App = Marionette.Application.extend({
  initialize: function(options) {
     ADF.utils.message('log','App Initialized', options);
  }
});

var adf = new ADF.App({container: 'body'});
adf.on("start", function(options){
    $.ajaxSetup({
        dataType: 'json'
    })
    adf.page = new ADF.PageLayoutView({el:'.adf-page'});
});

    window.onerror = function( message, file, lineNumber ) {
        ADF.utils.message('error',message,file,lineNumber);
        return true;
    }

/*global
ADF,
Backbone,
$,
_
*/
ADF.PageLayoutView = Backbone.Marionette.LayoutView.extend({
    events: {
        'click .overlay-close'          : 'closeOverlayEditor'
    },
    initialize: function( options ) {
        ADF.utils.message('log','PageLayoutView Initialized', options);
        var pageView = this;

        pageView.listenTo(pageView,'regionsInitialized',function(){
            // TODO: remove this bullshit
            setTimeout(function(){
                pageView.showRegions();
            },200);
        });

        pageView.initRegions();

        this._super( options );
    },
    initRegions: function(){
        var pageView = this;
        var regions = {};
        pageView.$el.find('.adf-region').each(function(){
            var region = $(this);
            var regionData = region.data();
            regionData.regionClass = ADF.utils.capitalize(ADF.utils.camelize(regionData.adfRegionType))+'Region';
            regionData.elSelector = '#'+$(this).attr('id');
            regionData.regionName = ADF.utils.camelize($(this).attr('id'));

            // create the region
            regions[regionData.regionName] = new ADF[regionData.regionClass](_.extend({el: regionData.elSelector},regionData));
            pageView.addRegions(regions);
        },pageView.trigger('regionsInitialized'));
    },
    showRegions: function() {
        _.each(this.getRegions(),function(region){
            if( !region.inert ){
                region.show();
            }
        });
    },
    findRegion: function( filter ) {
        var regions = this.getRegions();
        return _.find(regions,function(region){
            return region[filter.attribute] === filter.value || region.options[filter.attribute] === filter.value;
        });
    },
    showBackdrop: function() {
        $('.backdrop').removeClass('hide');
    },
    hideBackdrop: function() {
        $('.backdrop').addClass('hide');
    },
    closeOverlayEditor: function(e) {
        e.preventDefault();
        this.getRegion('overlayEditor').hide();
    }

});
/*global
ADF,
Marionette,
_,
$
*/
ADF.Region = Marionette.Region.extend({
    // TODO: create new region for an overlay
    // TODO: overlay region optionally can get data from caller region

    initialize: function(options){
        ADF.utils.message('log','Region Initialized',options);
        this.adfAjaxOnshow = ( options.adfAjaxOnshow ? options.adfAjaxOnshow : false );
    },
    show: function() {
        // TODO: this really shouldn't be in the region object, probably part of the view that we've associated with it...
        if( this.adfAjaxOnshow ){
            this.ajax();
        }
    },
    ajax: function( options ){
        var region = this;
        var settings = _.extend({}, options);

        ADF.utils.message('log','Ajax Call',options,settings);

        $.ajax({
            url: ( settings.url ? settings.url : region.options.adfAjaxUrl ),
            type: ( settings.method ? settings.method : 'GET' ),
            data: settings.data,
            beforeSend: function(){
                ADF.utils.spin(region.$el);
            },
            complete: function( jqXHR, textStatus ){

                ADF.utils.spin(region.$el, { stop: true } );

                if( jqXHR.status === 200 ){

                    ADF.utils.message('log','AJAX message: '+jqXHR.responseJSON.message);

                    // this is custom depending on the calling region's type so we send it back
                    region.ajaxSuccessHandler(jqXHR.responseJSON);


                }else if( jqXHR.status === 404 ){

                    ADF.utils.message('error','<h1>Page Not Found.</h1><p>The ajax calls is being made to a page ('+settings.url+') that could not be found. Probably going to need to get a TA involved to see what is going on here.');

                }else{

                    alert(textStatus+'! Probably going to need to get a TA involved.');
                    console.log('settings',settings);
                    console.log(jqXHR);
                    region.$el.html(jqXHR.responseText);

                }

            }
        });
    }
});

/*global
ADF,
_
*/
ADF.FormRegion = ADF.Region.extend({
    // TODO: handle being in a dialog
    // TODO: preexisting data handled

    initialize: function( options ) {
        ADF.utils.message('log','FormRegion Initialized', options);
        this._super( options );
    },

    show: function() {

        var formRegion = this;

        formRegion.formView = new ADF.FormView({
            el:formRegion.$el.find('form')[0],
            collection: new ADF.FieldsCollection(),
            regionName: formRegion.options.regionName
        });

        formRegion.actionsCollection = new ADF.ActionsCollection(null,{
            regionName: formRegion.options.regionName,
            model: ADF.ActionModel
        });
        console.log('after show initialization',formRegion.actionsCollection);

        this._super();

    },

    ajaxSuccessHandler: function( xhrJson ) {

        var formRegion = this;
        var formView = formRegion.formView;

        if( xhrJson.success === true ){

            if( xhrJson.data.hasOwnProperty('actions') ){

                formRegion.actionsCollection.reset(xhrJson.data.actions);
                console.log('after ajax reset',formRegion.actionsCollection);

            }

            if( xhrJson.data.hasOwnProperty('fields') ){

                formView.collection.reset(xhrJson.data.fields);

                // TODO: add select2 renderer as part of the auto-rendering of the Marionette view

                // manually call render for some reason
                // thought that Marionette handled this for us but it wasn't firing so this had to be added
                formView.render();

            }

        }else{

            if( xhrJson.hasOwnProperty('errors') ){
                _.each(xhrJson.errors,function( element, index, array ){
                    alert(element);
                });
            }else{
                alert('Looks like the ajax response wasn\'t quite what was expected.  Probably need to get a TA involved to help figure it out.');
            }

        }

    }

});
/*global
ADF,
_
*/
ADF.GridRegion = ADF.Region.extend({
    template: ADF.templates.gridWrapper,
    initialize: function( options ) {

        ADF.utils.message('log','GridRegion Initialized', options);

        var gridRegion = this;

        if( gridRegion.$el.hasClass('adf-grid-overlay-editor') ){
            gridRegion.inOverlay = true;
        }else{
            gridRegion.inOverlay = false;
        }

        gridRegion.$el.html(gridRegion.template({inOverlay:gridRegion.inOverlay}));
        gridRegion.fieldsCollection = new ADF.FieldsCollection(null,{regionName:gridRegion.options.regionName});
        // gridRegion.actionsCollection = new ADF.ActionsCollection(null,{regionName:gridRegion.options.regionName});

        this._super( options );

    },

    show: function() {

        ADF.utils.message('log','gridRegion Shown');

        var gridRegion = this;
        gridRegion.gridView = new ADF.GridView({
            el:gridRegion.$el.find('.adf-grid-wrapper')[0],
            collection: new ADF.RecordsCollection(null,{regionName:gridRegion.options.regionName}),
            regionName: gridRegion.options.regionName
        });

        this._super();

    },

    ajaxSuccessHandler: function( xhrJson ) {

        var gridRegion = this;

        if( xhrJson.success === true ){

            if( xhrJson.data.hasOwnProperty('fields') ){

                gridRegion.fieldsCollection.reset(xhrJson.data.fields);

            }

            if( xhrJson.data.hasOwnProperty('records') ){

                gridRegion.gridView.collection.reset(xhrJson.data.records);

                // TODO: add select2 renderer as part of the auto-rendering of the Marionette view

                // manually call render for some reason
                // thought that Marionette handled this for us but it wasn't firing so this had to be added
                gridRegion.gridView.render();

            }


        }else{

            if( xhrJson.hasOwnProperty('errors') ){
                _.each(xhrJson.errors,function( element, index, array ){
                    alert(element);
                });
            }else{
                alert('Looks like the ajax response wasn\'t quite what was expected.  Probably need to get a TA involved to help figure it out.');
            }

        }

    }

});
/*global
ADF,
*/
ADF.OverlayGridRegion = ADF.GridRegion.extend({
    initialize: function( options ) {
        ADF.utils.message('log','OverlayGridRegion Initialized', options);

        // this just means that we don't trigger the show() method on page load
        this.inert = true;

        this._super( options );
    },

    show: function( $triggerObj ) {
        ADF.utils.message('log','OverlayGridRegion Shown');
        var triggerBox = $triggerObj[0].getBoundingClientRect();
        var triggerOffset = $triggerObj.offset();

        // TODO: position relative to trigger field
        // TODO: check location of trigger field and possibly open up

        adf.page.showBackdrop();
        this.$el.addClass('open').css({top:( triggerOffset.top + triggerBox.height ) });
        this.options.adfAjaxUrl = $triggerObj.attr('data-adf-ajax-url');
        this._super();
    },

    hide: function() {
        ADF.utils.message('log','OverlayGridRegion Hidden');
        // TODO: empty the region
        // TODO: remove the ajax url

        if( this.$el.find('.changed') > 0 ){
            // TODO: make this a bit prettier
            alert('found records that have been changed and not saved');
        }

        this.$el.empty().removeClass('open');
        adf.page.hideBackdrop();

    }

});
ADF.FieldModel = Backbone.Model.extend({

    initialize: function( data ){
        ADF.utils.message('log','FieldModel Initialized', data);

        // do this step-by-step for clarity and maintainability (not to mention debuggability)
        var inputType = this.get('type');
        inputType = ADF.utils.camelize(inputType);
        inputType = ADF.utils.capitalize(inputType);
        inputType = 'inputType'+inputType;

        // this.set("inputField",ADF.templates[inputType](this.toJSON()));
        this.set("inputTemplate",ADF.templates[inputType]);

    }

});
ADF.RecordModel = Backbone.Model.extend({

    initialize: function( data ){
        ADF.utils.message('log','RecordModel Initialized', data);
    }

});

//     initialize: function( opts ){

//         var that = this;

//     },

//     createTplObject: function( args ){

//         var record = this;
//         var fieldsArray = args.fields;
//         var $target = args.target;
//         var createRow = ( args.hasOwnProperty("createRow") && args.createRow );
//         var cellObj = {};
//         var recordObj = {}
//         recordObj.cells = new Array();

//         for ( var i = 0; i < fieldsArray.length; i++ ) {

//             cellObj = fieldsArray[i];
//             cellObj.set("currentValue",record.get(fieldsArray[i].get("name")));
//             cellObj.set("inputField",cellObj.render());

//             recordObj.cells.push({'html': autoAdmin.templates.gridCell( cellObj.toJSON() )});

//         }

//         //make sure we have an ID value, even for new rows
//         if( record.get("id") ){
//             recordObj.id = record.get("id");
//             recordObj.rowClass = "current";
//         }else{
//             recordObj.id = 'a' + Math.round( Math.random() * 10000000 );
//             rowClass = "added";
//         }

//         return recordObj;

//     },

//     render: function( args ){

//         var tplObject = this.createTplObject( args );

//         alert('not done');

//         // TODO handle create row argument, etc.

//         // if( createRow ){

//     //         if( !args.hasOwnProperty('adjSibObj') || args.adjSibObj === false ){
//     //             $target.append( autoAdmin.render.hbsTemplate( "autoAdminGridRow", rowObj ) );
//     //         }else{
//     //             adjSibObj.after( autoAdmin.render.hbsTemplate( "autoAdminGridRow", rowObj ) );
//     //         }

//         // }else{

//         //      $target.find('tbody tr#'+recordObj.id).replaceWith(autoAdmin.templates.gridRow( rowObj ) );

//         // }

//     //     $('#'+dataObj.id).find('.select2').each(function(){
//     //         autoAdmin.render.renderSelect2({
//     //             select2Obj : $(this)
//     //         })
//     //     });

//     },

//     save: function( e ){

//         e.preventDefault();

//         console.log('some event');

//     }
ADF.DropdownMenuModel = Backbone.Model.extend({
    defaults: {
        buttonLabel: "Menu Name",
        footerOptions: []
    },
    initialize: function( data ){
        ADF.utils.message('log','DropdownMenuModel Initialized', data);
    }
});
/*global
ADF,
Backbone
*/
ADF.ActionModel = Backbone.Model.extend({

    initialize: function( attrs, opts ){

        this.set('id',ADF.utils.randomId());

        ADF.utils.message('log','ActionModel initialized', opts);

    }

});
/*global
ADF,
Backbone
*/
ADF.ActionsCollection = Backbone.Collection.extend({

    model: ADF.ActionModel,

    initialize: function( models, opts ){

        ADF.utils.message('log','ActionsCollection initialized', opts);

    }

});
ADF.FieldsCollection = Backbone.Collection.extend({

    model: ADF.FieldModel,

    initialize: function( models, options ){
        ADF.utils.message('log','FieldsCollection Initialized', models, options);

        var that = this;

    }

});
ADF.RecordsCollection = Backbone.Collection.extend({

    model: ADF.RecordModel,

    initialize: function( models, options ){
        ADF.utils.message('log','RecordsCollection Initialized', models, options);

        var recordsCollection = this;

        // recordsCollection.regionName = options.regionName;

    }

});
ADF.DropdownMenuView = Backbone.Marionette.CompositeView.extend({
    template: ADF.templates.dropdownMenu,
    tagName: 'li',
    childView: ADF.DropdownItemView,
    childViewContainer: '.dropdown-menu',
    // baseEvents: {
    //     "click .dropdown-wrapper .dropdown-toggle"     : "dropdownToggle",
    // },
    // customEvents: {},
    // events: function() {
    //     return _.extend({},this.baseEvents,this.customEvents);
    // },
    // model: new ADF.DropdownMenuModel({
    //     buttonLabel: "Menu Name",
    //     wrapClass: "column-selector",
    //     footerOptions: []
    // }),
    initialize: function( options ) {
        ADF.utils.message('log','DropdownMenu Initialized', options );
    }

});
ADF.CellView = Backbone.Marionette.ItemView.extend({
    template: ADF.templates.gridCell,
    tagName: 'td',
    initialize: function( options ){
        ADF.utils.message('log','CellView Initialized', options);
        this.model.set('inputField',this.model.get('inputTemplate')(this.model.toJSON()));
        // this.setElement(this.template(this.model.toJSON()));
        // <td data-column-select-priority="{{fieldPriority}}" data-header-id="{{name}}" class="{{wrapClass}}">
    },
    render: function() {
        // this.$el
        //     .attr('data-column-select-priority',this.model.get('fieldPriority'))
        //     .attr('data-header-id',this.model.get('name'))
        //     .addClass(this.model.get('wrapClass'));
        return this.template(this.model.toJSON());
    }
});
ADF.ColumnSelectItemView = Backbone.Marionette.ItemView.extend({
    template: ADF.templates.dropdownSelectItem,
    tagName: 'li',
    initialize: function( options ){
        ADF.utils.message('log','ColumnSelectItemView Initialized', options);
        // this.model.set('regionName',options.regionName);
    },
    renderOld: function() {
        // TODO: make this use a proper and complete HBS file rather than this weird innerHTML stuff
        this._super();
    }
});
// TODO: get this prototype to work
// ADF.ColumnSelectView = ADF.DropdownMenuView({
ADF.ColumnSelectView = Backbone.Marionette.CompositeView.extend({
    template: ADF.templates.dropdownMenu,
    tagName: 'li',
    childView: ADF.ColumnSelectItemView,
    childViewContainer: '.dropdown-menu',
    // childViewOptions : function () {
    //     return { regionName: this.regionName };
    // },
    events: {
        // TODO: this should go to the parent prototype
        "click .dropdown-wrapper .dropdown-toggle"     : "dropdownToggle",
        // TODO: create hierarchy of events somehow
        "click .adf-grid-column-group"          : "columnSelect",
        "change .column-selector .dropdown-menu input" : "columnSelect"
    },
    initialize: function( options ) {
        ADF.utils.message('log','ColumnSelectView Initialized', options );
        this.regionName = options.regionName;

        // TODO: this model should go to the parent prototype but something wasn't working with that so it's on the list for later
        // TODO: seems like this model shouldn't be created in the view since that's a bit backwards
        // TODO: hide this when the user clicks off of it
        this.model = new ADF.DropdownMenuModel({
            buttonLabel : 'Column Select',
            wrapClass : 'column-selector',
            footerOptions : [
                {
                    href : "#",
                    itemClass : "adf-grid-column-group",
                    label : "All Columns",
                    dataAttributes : [
                        {
                            "name" : "column-select-type",
                            "value" : "all"
                        }
                    ]
                },
                {
                    href : "#",
                    itemClass : "adf-grid-column-group",
                    label : "Minimum Columns",
                    dataAttributes : [
                        {
                            "name" : "column-select-type",
                            "value" : "min"
                        }
                    ]
                },
                {
                    href : "#",
                    itemClass : "adf-grid-column-group",
                    label : "Default Columns",
                    dataAttributes : [
                        {
                            "name" : "column-select-type",
                            "value" : "dflt"
                        }
                    ]
                }
            ]
        });

    },
    render: function() {

        // render the main bits
        this.$el.html(this.template(this.model.toJSON()));

        var columnSelect = this;

        // normally would do variables up top but this requires the html() to be created already
        var childContainer = this.$el.find(this.childViewContainer).find('.divider');

        // put the children (the fields) into the drop down but above the divider
        this.collection.each(function(model){

            // TODO: move this to the model initializer
            model.set('regionName',columnSelect.regionName);

            if( model.get("fieldPriority") !== 0 ){
                var childView = new columnSelect.childView;
                var headerCell = $('#'+columnSelect.regionName+'--'+model.get("name"));
                if( headerCell.css('display') === 'table-cell' ){
                    model.set('checked',true);
                }
                childContainer.before(childView.template(model.toJSON()))
            }

        })

        return this;
    },
    // TODO: move this to the prototype
    dropdownToggle: function( event ) {

        if( event.target ){

            event.preventDefault();
            var $target = $(event.target);

        }else{      // we're just going to assume it's a jQuery object then

            var $target = event;

        }

        $target.closest('.dropdown-wrapper').find('.dropdown-menu').toggleClass('hide');

    },
    columnSelect: function(e) {

        e.preventDefault();

        var colSelect = this;
        var $target = $(e.target);
        var groupType = $target.attr('data-column-select-type')

        console.log('columnselect triggered',$target,groupType,id);

        if( typeof groupType == 'undefined' ){

            var id = $target.val();
            var cells = $('#'+id+", .adf-grid td[data-header-id="+id+"]");

            console.log('columnselect details',id,cells);

            if( $target.is(':checked') ){
                cells.show();
            }else{
                cells.hide();
            }

        }else{

            switch( groupType ){

                case "all":
                    $target.closest('.dropdown-wrapper').find('.dropdown-menu :input').not(':checked').trigger('click');
                    break;

                case "min":
                    $target.closest('.dropdown-wrapper').find('.dropdown-menu :input').each(function(){
                        var inputObj = $(this);
                        var priority = parseInt( $('#'+inputObj.val()).attr('data-column-select-priority'), 10 );
                        if( ( inputObj.is(':checked') && priority > 1 ) || ( inputObj.is(':not(:checked)') && priority <= 1 ) ){
                            inputObj.trigger('click');
                        }
                    })
                    break;

                case "dflt":
                    var dropdownMenu = $target.closest('.dropdown-wrapper').find('.dropdown-menu');
                    $('.adf-grid th, .adf-grid td').css("display", "");
                    $('.adf-grid th').each(function(){

                        var inputObj = dropdownMenu.find(':input[value='+$(this).attr('id')+']');

                        //check the visibility of this header which is now based on the media queries
                        if( $(this).css('display') === 'table-cell' && inputObj.is(':not(:checked)') ){

                            inputObj.trigger('click');

                        }else if( $(this).css('display') === 'none' && inputObj.is(':checked') ){

                            inputObj.trigger('click');

                        }

                    })
                    break;

            }

            colSelect.dropdownToggle( $target.closest('.dropdown-wrapper').find('.dropdown-toggle') );

        }

    }

});
/*global
ADF,
Backbone
*/
ADF.FormActionView = Backbone.Marionette.ItemView.extend({

    el: '.adf-action',
    template: ADF.templates.action,
    initialize: function( options ){
        ADF.utils.message('log','FormActionView initialized', options );
    },

    events: {
        'click a' : 'handleClick'
    },

    render: function( args ) {

        // args.target.append( ADF.templates.action( this.model.toJSON() ) );
        // this.setElement('#'+this.model.get('id'));

        return this.template( this.model.toJSON() );

    },

    // renderAsDropdownItem: function( target ) {

    //     target.before( ADF.templates.dropdownLink( this.model.toJSON() ) );

    //     this.setElement('#'+this.model.get('id'));

    // },

    // handleClick: function(e){

    //     e.preventDefault();

    //     var actionView = this;
    //     var $action = $(e.target);

    //     if( $action.data('action-type') ){

    //         var actionType = ADF.utils.camelize( $action.data('action-type') );
    //         actionView[actionType]( $action );

    //     }else{
    //         alert('Better have a TA check into this.  The action you clicked on has no type indicated so not sure what to do with it.');
    //     }

    // },

    // gridRecordAdd: function( actionObj ) {

    //     // var $target = actionObj.closest('.adf-grid-wrapper').find('tbody');
    //     var gridView = this.parentGridView;
    //     // var fieldsArray = gridView.fieldsColl.models;
    //     // var recordView;

    //     actionObj.closest('.grid-dropdown').find('.dropdown-menu').addClass('hide');

    //     for( var i = 1; i <= parseInt( actionObj.data('record-count'), 10 ); i++ ){
    //         gridView.recordsColl.add({},{ saveUrl : gridView.recordsColl.saveUrl });
    //     }

    // }

});
/*global
ADF,
Backbone,
$
*/
ADF.FieldView = Backbone.Marionette.ItemView.extend({
    template: ADF.templates.formRow,
    events: {
        'change'                : 'valueChange'
    },
    initialize: function( options ) {
        ADF.utils.message('log','FieldView Initialized', options);
        this.model.set('inputField',this.model.get('inputTemplate')(this.model.toJSON()));
    },
    render: function() {
        this.$el.html(this.template(this.model.toJSON()));
        return this;
    },
    valueChange: function(e) {
        // console.log('input change',e,$(e.target).val(),$(e.currentTarget).val());
        this.model.set('currentValue',$(e.target).val());
    }
});
/*global
ADF,
Marionette,
$,
adf,
_
*/
ADF.FormView = Marionette.CollectionView.extend({

    childView: ADF.FieldView,

    initialize: function( options ) {
        ADF.utils.message('debug','FormView Initialized', options );
        $.extend(this.options,options);
        // this.options
    },

    events: {
        // select handlers
        'change select[data-adf-submit-on-change=true]'                     : 'submitParentForm',
        'change select[data-adf-dependent-field-lkup-on-change=true]'       : 'dependentFieldLkup',

        // button handlers
        'click .btn-submit'                                                 : 'submitParentForm',
        'click .btn-query'                                                  : 'submitParentForm',

        // form submission
        'submit'                                                            : 'submitForm'
    },

    render: function() {

        var formView = this;
        var region = adf.page[formView.options.regionName];
        // var actionHTML = '';
        console.log('beginning of formView render',region.actionsCollection);

        formView._super();
        formView.$el.append(ADF.templates.formRow({
            name: 'ACTIONS',
            fldMstrId: 0
        }));

        var childContainer = formView.$el.find('#ACTIONS-field-wrap .form-input');

        region.actionsCollection.each( function( action ) {
        // _.each(region.actionsCollection.models, function( action ) {

            console.log(action);

            var childView = new ADF.FormActionView({model:action});
            childContainer.append(childView.render());

        });



    },

    submitParentForm: function( e ) {

        e.preventDefault();
        $(e.target).closest('form').submit();

    },

    submitForm: function( e ) {

        var $form = $(e.target);
        var action = $form.attr('action');
        var region = adf.page.findRegion({
            attribute : 'el',
            value : action
        });

        if( action.substring(0,1) === '#' ){

            if( $(action).size() > 0 ){

                ADF.utils.message('log','Found something to load into');
                e.preventDefault();

                region.ajax();

                // $.ajax({
                //     url: opts.url,
                //     type: opts.method,
                //     data: opts.data,
                //     dataType: ( opts.resultType === "html" ? "html" : "json" ),
                //     beforeSend: function(){
                //         autoAdmin.utils.spin(opts.target);
                //     },
                //     complete: function( jqXHR, textStatus ){

                //         if( jqXHR.status === 200 ){

                //             if( opts.resultType === 'html' ){

                //                 that.responseText = jqXHR.responseText;

                //             }else{

                //                 console.log('[autoAdmin] AJAX message: '+jqXHR.responseJSON.message);

                //                 if( jqXHR.responseJSON.success === true ){

                //                     if( jqXHR.responseJSON.data.hasOwnProperty('records') ){

                //                         that.recordsColl = new autoAdmin.RecordsCollection();
                //                         that.recordsColl.add(jqXHR.responseJSON.data.records);

                //                     }

                //                     if( jqXHR.responseJSON.data.hasOwnProperty('fields') ){

                //                         that.fieldsColl = new autoAdmin.FieldsCollection();
                //                         that.fieldsColl.add(jqXHR.responseJSON.data.fields);

                //                     }


                //                 }else{

                //                     if( jqXHR.responseJSON.hasOwnProperty('errors') ){
                //                         _.each(jqXHR.responseJSON.errors,function( element, index, array ){
                //                             alert(element);
                //                         })
                //                     }else{
                //                         alert("Looks like the ajax response wasn't quite what was expected from "+opts.url+".  Probably need to get a TA involved.");
                //                     }

                //                 }

                //             }

                //             that.trigger('ajaxLoaded');

                //         }else if( jqXHR.status === 404 ){

                //             alert("Page Not Found\n\nThe ajax calls is being made to a page ("+opts.url+") that could not be found. Probably going to need to get a TA involved to see what is going on here.");

                //         }else{

                //             alert(textStatus+'! Probably going to need to get a TA involved.');
                //             console.log('opts',opts);
                //             console.log(jqXHR);
                //             target.html(jqXHR.responseText);

                //         }

                //     }
                // })

            }else{
                ADF.utils.message('error','Trying to load ajax but destination element could not be found on the page');
            }
        }else{
            // TODO: just let the form submit
            return true;
        }

    },

    dependentFieldLkup: function(e) {

        var formView = this;
        var dataArr = [];
        var $parentRow = $(e.target).closest('.form-row');
        var $form = $parentRow.closest('form');
        var parentData = $parentRow.data();
        var $target = $('#'+parentData.fieldLkupTarget+'-field-wrap');
        var childFields = parentData.adfDependentFieldLkupChildFields.split(',');

        e.preventDefault();
        ADF.utils.message('log','dependentFieldLkup',e);

        formView.collection.each(function( model ) {
            dataArr.push({
                'name' : model.get('fldMstrId'),
                'value' : model.get('currentValue')
            });
        });

        _.each(childFields,function(fieldId){
            var modelToRemove = formView.collection.filter(function( model ){
                return model.get('name') === fieldId;
            });
            formView.collection.remove(modelToRemove);
            $('#'+fieldId+'-field-wrap').remove();
        });

        if( $target.size() === 0 ){
            // TODO:somehow also remove any prefix/suffix for this field upon load of the new stuff
            // TODO:allow field to be dropped into the middle of a form rather than append to the form

            $target = $parentRow;
        }else{
            $target.remove();
            $target = $parentRow;
        }

        $.ajax({
            data: dataArr,
            url: parentData.adfDependentFieldLkupUrl,
            method: 'POST',
            beforeSend: function() {
                // TODO: spin target
                ADF.utils.spin($form);
            },
            complete: function( jqXHR, textStatus ) {
                ADF.utils.spin($form, { stop: true } );
                if( jqXHR.status === 200 ){
                    ADF.utils.message('debug','Dependent field lookup success',jqXHR);

                        if( jqXHR.responseJSON.data.hasOwnProperty('fields') ){

                        formView.collection.add(jqXHR.responseJSON.data.fields);

                        // TODO: add select2 renderer as part of the auto-rendering of the Marionette view
                        //         $form.find('.select2').each(function(){
                        //             autoAdmin.utils.renderSelect2({
                        //                 select2Obj : $(this)
                        //             })
                        //         })

                        // manually call render for some reason
                        // thought that Marionette handled this for us but it wasn't firing so this had to be added
                        formView.render();

                        }else{
                            ADF.utils.message('error','Dependent field lookup did not return any fields',jqXHR);
                        }

                }else{
                    ADF.utils.message('error','Dependent field lookup failed',jqXHR);
                    if( jqXHR.responseJSON.hasOwnProperty('errors') ){
                        _.each(jqXHR.responseJSON.errors,function( element, index, array ){
                            alert(element);
                        });
                    }else{
                        alert('Looks like the ajax response wasn\'t quite what was expected.  Probably need to get a TA involved to help figure it out.');
                    }
                }
            }
        });

    }
});
/*global
ADF,
Marionette,
adf,
$
*/
ADF.RecordView = Marionette.CompositeView.extend({
    template: ADF.templates.gridRow,
    tagName: 'tr',
    className: 'adf-record',
    childView: ADF.CellView,
    events: {
        'click .btn'                    : 'handleAction',
        'click .adf-grid-overlay-value' : 'showOverlayEditor'
    },
    initialize: function( options ) {
        ADF.utils.message('log','RecordView Initialized', options );
        this.region = adf.page.getRegion(options.regionName);
        this.regionName = this.region.options.regionName;
        this.model.set('regionName',this.regionName);
        this.collection = this.region.fieldsCollection;
    },
    renderSelf: function() {
        // this would be called when the record has changed and needs to be rerendered
        // TODO: make this actually work for both rendering on initial load (as child) and as standalone record (on change)
        this.render();
    },
    renderAsChild: function() {

        var cellsString = '';

        var recordView = this;

        // put the children (the fields) into the drop down but above the divider
        this.collection.each(function(model){

            // TODO: move this to the model initializer
            model.set('regionName',recordView.regionName);
            model.set('currentValue',recordView.model.get(model.get('name')));
            var childView = new recordView.childView({model:model});
            // console.debug(childView.render());
            cellsString += childView.render();

        });

        return this.template($.extend({},this.model.toJSON(),{cells:cellsString}));
    },
    handleAction: function(e) {
        e.preventDefault();
        var $targetObj = $(e.target).closest('a');
        var actionType = $targetObj.attr('data-action-type');
        // TODO: experiment with making this dynamic
        switch( actionType ){
            case 'save':
                this.model.url = $targetObj.attr('href');
                this.model.save();
                break;
            default:
                ADF.utils.message('error','Unexpected record action ('+actionType+') triggered.',$targetObj);
        }
    },
    showOverlayEditor: function(e) {
        e.preventDefault();
        adf.page.getRegion('overlayEditor').show( $(e.target) );
    }

});

//     events: {
//         // ACTIONS
//         "click .btn-save"                     : "save"
//     },

//     createTplObject: function( args ){

//         var record = this;
//         var fieldsArray = args.fields;
//         var $target = args.target;
//         var createRow = ( args.hasOwnProperty("createRow") && args.createRow );
//         var cellObj = {};
//         var recordObj = {}
//         recordObj.cells = new Array();

//         for ( var i = 0; i < fieldsArray.length; i++ ) {

//             cellObj = fieldsArray[i];
//             cellObj.set("currentValue",record.get(fieldsArray[i].get("name")));
//             cellObj.set("inputField",cellObj.render());

//             recordObj.cells.push({'html': autoAdmin.templates.gridCell( cellObj.toJSON() )});

//         }

//         //make sure we have an ID value, even for new rows
//         if( record.get("id") ){
//             recordObj.id = record.get("id");
//             recordObj.rowClass = "current";
//         }else{
//             recordObj.id = 'a' + Math.round( Math.random() * 10000000 );
//             rowClass = "added";
//         }

//         return recordObj;

//     },

//     render: function( args ){

//         var tplObject = this.createTplObject( args );

//         alert('not done');

//         // TODO handle create row argument, etc.

//         // if( createRow ){

//     //         if( !args.hasOwnProperty('adjSibObj') || args.adjSibObj === false ){
//     //             $target.append( autoAdmin.render.hbsTemplate( "autoAdminGridRow", rowObj ) );
//     //         }else{
//     //             adjSibObj.after( autoAdmin.render.hbsTemplate( "autoAdminGridRow", rowObj ) );
//     //         }

//         // }else{

//         //      $target.find('tbody tr#'+recordObj.id).replaceWith(autoAdmin.templates.gridRow( rowObj ) );

//         // }

//     //     $('#'+dataObj.id).find('.select2').each(function(){
//     //         autoAdmin.render.renderSelect2({
//     //             select2Obj : $(this)
//     //         })
//     //     });

//     },

//     save: function( e ){

//         e.preventDefault();

//         console.log('some event');

//     }

// });
/*global
ADF,
Marionette,
adf,
$
*/
ADF.GridView = Marionette.CompositeView.extend({
    // TODO: 'add record' action
    // TODO: grid-row messaging
    // TODO: overlay template adjusted to handle array of data with format/delimiter from data-supl-info attribute

    className: 'adf-grid',
    tagName: 'table',
    childView: ADF.RecordView,
    childViewContainer: 'tbody',
    childViewOptions : function () {
        return { regionName: this.regionName };
    },
    template: ADF.templates.gridTable,
    initialize: function( options ) {
        ADF.utils.message('log','GridView Initialized', options );
        this.regionName = options.regionName;
        var gridView = this;
        var region = adf.page[gridView.regionName];
        gridView.$el.html(gridView.template({}));

        gridView.headersView = new ADF.HeadersView({
            el: gridView.$el.find('thead')[0],
            collection: region.fieldsCollection,
            regionName: gridView.regionName
        });

        gridView.columnSelect = new ADF.ColumnSelectView({
            el: gridView.$el.find('.adf-grid-actions')[0],
            collection: region.fieldsCollection,
            regionName: gridView.regionName
        });

    },
    render: function() {
        var gridView = this;
        gridView.headersView.render();
        gridView.columnSelect.render();
        var childContainer = this.$el.find(this.childViewContainer);
        gridView.collection.each(function(model) {

            var childView = new gridView.childView($.extend({},gridView.childViewOptions(),{model:model}));
            childContainer.append(childView.renderAsChild());
            childView.setElement('#'+model.get('regionName') + '--' + model.get('id'));

        });
    }

});

// autoAdmin.GridView = autoAdmin.PageView.extend({

//     render: function( opts ){

//         var gridView = this;
//         var $target = opts.target;
//         var fieldsArray = opts.ajaxView.fieldsColl.models;
//         var recordsArray = opts.ajaxView.recordsColl.models;
//         var gridObj = {};

//         gridObj.headers = new Array();
//         gridObj.colSelectCols = new Array();
//         gridObj.records = new Array();

//         // COLUMNS
//         for ( var i = 0; i < fieldsArray.length; i++ ) {

//             fieldsArray[i].set("colIndex",i);
//             fieldsArray[i].set("gridRow",true);

//             gridObj.headers[i] = { 'html' : autoAdmin.templates.gridHeaderCell( fieldsArray[i].toJSON() ) };

//             if( fieldsArray[i].get("columnSelectPriority") != 0 ){

//                 // TODO: set the checked attribute if this is going to be visible

//                 gridObj.colSelectCols.push({'html' : autoAdmin.templates.dropdownSelectItem( $.extend( fieldsArray[i].toJSON(), {parent:"column-selector"} ) ) });

//             }

//         }

//         // put those fields into records
//         for ( var j = 0; j < recordsArray.length; j++ ) {

//             gridObj.records.push({
//                 'html' : autoAdmin.templates.gridRow( recordsArray[j].createTplObject({fields : fieldsArray}))
//             });

//         }

//         gridObj.colSelect = gridView.renderColumnSelector( gridObj.colSelectCols );

//         // TODO grid actions

//         $target.html( autoAdmin.templates.gridWrapper( gridObj ) );

//         gridView.refreshFilters( $target, fieldsArray );

//         $target.find('.select2').each(function(){
//             autoAdmin.utils.renderSelect2({
//                 select2Obj : $(this)
//             })
//         })

//     },

//     refreshFilters: function( $target, fieldsArray ){

//         var gridView = this;
//         var rows = $target.find('tbody tr');
//         var val;
//         var fieldName;
//         var field;
//         var values = new Array();

//         // go through each column
//         for ( var i = 0; i < fieldsArray.length; i++ ) {

//             field = fieldsArray[i];

//             fieldName = field.get("name");

//             if( fieldName === 'actions' ){
//                 continue;
//             }

//             // reset for each column
//             values = {}

//             rows.each(function(){

//                 // cache it
//                 var inputElement = $(this).find('td').eq(i).find(':input[name='+fieldName+']');

//                 // BUG select2 values being accumulated into filters not working properly
//                 val = ( inputElement.val() ? inputElement.val() : inputElement.select2("val") );

//                 if( val && val.length > 0 ){
//                     values[val] = val;
//                 }

//             })

//             //add these to the main columns array
//             if( _.size(values) > 0 ){
//                 field.set("currentValues",values);
//             }

//             // refresh the filter
//             gridView.refreshFilterOptions( $target, field );

//         }

//     },

//     refreshFilterOptions: function( $target, field ){

//         var th = $target.find('thead tr th').eq(field.get("colIndex"));
//         var tmpltObj = {};
//         var dropdownObj = {
//             wrapClass : "grid-header-filter",
//             footerOptions : [
//                 {
//                     href : "#",
//                     itemClass : "grid-header-filter-clear",
//                     label : "Clear Filters"
//                 }
//             ]
//         }

//         //remove all filter data
//         th.find('.dropdown-wrapper').remove();
//         th.append( autoAdmin.templates.dropdownMenu( dropdownObj ) );

//         //only attempt to do something if there are values in there
//         if( _.size(field.get("currentValues")) > 0 ){

//             th.addClass('has-filter').find('.icon-filter').removeClass('hide')

//             for( var value in field.get("currentValues") ){

//                 tmpltObj.name = value;
//                 tmpltObj.parent = field.get("name");
//                 if( field.get('data') && field.get('data').length > 0 ){

//                     for( var rec in field.get('data').data ){

//                         if( field.get("data")[rec].value == value ){

//                             tmpltObj.label = ( field.get("data")[rec].hasOwnProperty('label') ? field.get("data")[rec].label : field.get("data")[rec].value );
//                             break;

//                         }

//                     }

//                 }else{

//                     tmpltObj.label = value;

//                 }

//                 th.find('.dropdown-menu .divider').before( autoAdmin.templates.dropdownSelectItem( tmpltObj ) );

//             }

//         }else{

//             th.find('.icon-filter').addClass('hide');

//         }

//     },

// });
ADF.HeaderView = Backbone.Marionette.ItemView.extend({
    template: ADF.templates.gridHeaderCell,
    tagName: 'th',
    initialize: function( options ){
        ADF.utils.message('log','HeaderView Initialized', options);
        this.model.set('colIndex',this.model.collection.indexOf(this.model))
        this.model.set('regionName',options.regionName);
    },
    render: function() {
        // TODO: use hbs template rather than all this silly JS
        this.$el
            .attr('data-column-select-priority',this.model.get('fieldPriority'))
            .attr('id',this.model.get('regionName') + '--' + this.model.get('name'))
            .attr('data-column-index',this.model.get('colIndex'))
            .addClass(this.model.get('wrapClass'));
        if( this.model.get('tooltip') ){
            this.$el.addClass('has-tooltip');
        }
        // return this.template(this.model.toJSON());
        this._super();
    }
});
ADF.HeadersView = Backbone.Marionette.CollectionView.extend({
    template: ADF.templates.gridRow,
    tagName: 'tr',
    childView: ADF.HeaderView,
    childViewOptions : function () {
        return { regionName: this.regionName };
    },
    initialize: function( options ) {
        // TODO: get the children to render inside this <tr>
        ADF.utils.message('log','HeadersView Initialized', options );
        this.regionName = options.regionName;
    }

});
// 'use strict';
// window.autoAdmin = window.autoAdmin || {};

// autoAdmin.PageView = Backbone.View.extend({

//     el: ".auto-admin-page",

//     initialize: function(opts){
//         var that = this;

//         this.onloadAjax();

//         this.listenTo( Backbone, 'onloadAjaxCheck', function () {
//             this.onloadAjax();
//         }, this );
//     },

//     events: {
//         // AJAX
//         "change .submit-on-change"                     : "submitParentFormAjax",
//         "click .load-on-click"                         : "loadOnClickAjax",
//         "click .submit-parent-form-ajax"               : "submitParentFormAjax",

//         // TODO apply filters action
//     },

//     submitAjax: function( ajaxObj ) {

//         var that = this;
//         this.ajaxViews = new Array();

//         switch( ajaxObj.resultType ){
//             case "form":
//                 that.ajaxViews.push(new autoAdmin.FormView(ajaxObj));
//                 break;
//             case "grid":
//                 that.ajaxViews.push(new autoAdmin.GridView(ajaxObj));
//                 break;
//             case "html":
//                 that.ajaxViews.push(new autoAdmin.HtmlView(ajaxObj));
//                 break;
//             default:
//                 alert('Unexpected result type: '+resultType+'.  Probably going to need to a get a TA involved.');
//                 break;

//         }

//     },

//     onloadAjax: function(){

//         var pageView = this;

//         //there might be more than one on the page when the page loads (or when a partial loads)
//         $('body').find('.auto-admin-onload-ajax').each(function(){

//             var triggerObj = $(this);
//             var target = triggerObj;
//             var ajaxObj = {};

//             if( triggerObj.attr('data-onload-ajax-target-id') != "" ){
//                 target = $('#'+triggerObj.attr('data-onload-ajax-target-id'));
//             }

//             ajaxObj.url = triggerObj.attr('data-onload-ajax-url');
//             ajaxObj.method = "GET";
//             ajaxObj.data = "";
//             ajaxObj.target = target;
//             ajaxObj.resultType = triggerObj.attr('data-result-type');

//             triggerObj.removeClass('auto-admin-onload-ajax');

//             pageView.submitAjax( ajaxObj );

//         })

//     },

//     formSubmitAjax: function( $trigger ){

//         // e.preventDefault();     //just to make sure we don't submit anything

//         var pageView = this;
//         var $form = $trigger.is('form') ? $trigger : $trigger.closest('form');
//         var ajaxObj = {};

//         ajaxObj.url = $form.attr('action');
//         ajaxObj.method = $form.attr('method');
//         ajaxObj.data = $form.serializeObject();
//         ajaxObj.target = $('#'+$form.attr('data-target-id'));
//         ajaxObj.resultType = $form.attr('data-result-type');

//         pageView.submitAjax( ajaxObj );

//     },

//     submitParentFormAjax: function(e) {

//         e.preventDefault();
//         this.formSubmitAjax( $(e.target) );

//     },

//     loadOnClickAjax: function(e) {

//         // don't want to follow the link
//         e.preventDefault();

//         var pageView = this;
//         var linkObj = $(e.target);
//         var ajaxObj = {};

//         ajaxObj.url = linkObj.attr('href');
//         ajaxObj.method = "get";
//         ajaxObj.data = "";
//         ajaxObj.target = $('#'+linkObj.attr('data-load-on-click-target-id'));
//         ajaxObj.resultType = linkObj.attr('data-result-type');

//         pageView.submitAjax( ajaxObj );

//     },

// });
/*global
$,
adf
*/
$(function(){

	// $.event.props.push('dataTransfer');

  //   $('body')
  //       .on('click','.refresh-menu',function(e){
  //       	e.preventDefault();
  //       	autoAdmin.core.refreshTemplates(true);
  //       })
  //       .on('click', '.auto-admin-grid-overlay-editor .display-value',function(){
  //       	autoAdmin.grid.showOverlayEditor( $(this).parent() );
  //       })
  //       .on('click', '.auto-admin-grid-overlay-editor .close',function(){
  //       	autoAdmin.grid.hideOverlayEditor( $(this).closest('.auto-admin-grid-overlay-editor') );
  //       })

  //   $(':input').first().focus();

    adf.start({});

});