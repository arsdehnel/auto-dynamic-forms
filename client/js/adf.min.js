var ADF = ADF||{};
ADF.App = Marionette.Application.extend({
  initialize: function(options) {
     console.log('[ADF] App Initialized', options);
  },
  initRegions: function(){
    var app = this;
    var regions = {};
    $('.adf-region').each(function(){
        var region = $(this);
        var regionData = region.data();
        regionData.regionClass = ADF.utils.capitalize(regionData.adfRegionType)+'Region';
        regionData.elSelector = '#'+$(this).attr('id');
        regionData.regionName = ADF.utils.camelize($(this).attr('id'));

        // create the region
        regions[regionData.regionName] = new ADF[regionData.regionClass]({
            el: regionData.elSelector,
            adfData: regionData
        });
        app.addRegions(regions);
    })
    console.log('[ADF] initRegions complete',app.getRegions());
    app.trigger('regionsInitialized');
  }
});

var adf = new ADF.App({container: '.adf-page'});
adf.on("start", function(options){
    this.initRegions();
});
ADF.Region = Marionette.Region.extend({
    initialize: function(options){
        console.log('[ADF] Region Initialized',options);
        this.adfData = options.adfData;
        if( this.adfData.adfAjaxOnload ){
            this.ajax({
                url: this.adfData.adfAjaxUrl
            });
        }
    },
    ajax: function( options ){
        var region = this;
        console.log('[ADF] Ajax Call',options);
        $.ajax({
            url: options.url,
            type: ( options.method ? options.method : "GET" ),
            data: options.data,
            dataType: "json",
            beforeSend: function(){
                // ADF.utils.spin(region.$el);
            },
            complete: function( jqXHR, textStatus ){

                if( jqXHR.status === 200 ){

                    console.log('[ADF] AJAX message: '+jqXHR.responseJSON.message);

                    // this is custom depending on the calling region's type so we send it back
                    region.ajaxSuccessHandler(jqXHR.responseJSON);

                }else if( jqXHR.status === 404 ){

                    alert("Page Not Found\n\nThe ajax calls is being made to a page ("+options.url+") that could not be found. Probably going to need to get a TA involved to see what is going on here.");

                }else{

                    alert(textStatus+'! Probably going to need to get a TA involved.');
                    console.log('options',options);
                    console.log(jqXHR);
                    target.html(jqXHR.responseText);

                }

            }
        })
    }
});

ADF.FormRegion = ADF.Region.extend({
    initialize: function( options ) {

        var formRegion = this;

        console.log('[ADF] FormRegion Initialized', options);

        formRegion.formView = new ADF.FormView({
            el:formRegion.$el.find('form')[0],
            collection: new ADF.FieldsCollection(),
            childView: ADF.FieldView
        })

        ADF.Region.prototype.initialize.call(formRegion, options);

    },

    ajaxSuccessHandler: function( xhrJson ) {

        var formView = this.formView;

        if( xhrJson.success === true ){

            if( xhrJson.data.hasOwnProperty('fields') ){

                formView.collection.add(xhrJson.data.fields);
                // manually call render for some reason
                // thought that Marionette handled this for us but it wasn't firing so this had to be added
                formView.render();

            }

        }else{

            if( xhrJson.hasOwnProperty('errors') ){
                _.each(xhrJson.errors,function( element, index, array ){
                    alert(element);
                })
            }else{
                alert("Looks like the ajax response wasn't quite what was expected.  Probably need to get a TA involved to help figure it out.");
            }

        }

    }

});
ADF.GridRegion = ADF.Region.extend();

// 'use strict';
// window.autoAdmin = window.autoAdmin || {};

// autoAdmin.AjaxView = Backbone.View.extend({

//     initialize: function(opts){

//         var that = this;
//         var target = opts.target;

//         // attach the listener
//         this.listenTo(this,'ajaxLoaded', function(){

//             opts.caller.render({
//                 ajaxView : that,
//                 target : target
//             });

//         })

//         this.loadAjax(opts);

//     },

//     loadAjax: function( opts ){

//         var that = this;

//         $.ajax({
//             url: opts.url,
//             type: opts.method,
//             data: opts.data,
//             dataType: ( opts.resultType === "html" ? "html" : "json" ),
//             beforeSend: function(){
//                 autoAdmin.utils.spin(opts.target);
//             },
//             complete: function( jqXHR, textStatus ){

//                 if( jqXHR.status === 200 ){

//                     if( opts.resultType === 'html' ){

//                         that.responseText = jqXHR.responseText;

//                     }else{

//                         console.log('[autoAdmin] AJAX message: '+jqXHR.responseJSON.message);

//                         if( jqXHR.responseJSON.success === true ){

//                             if( jqXHR.responseJSON.data.hasOwnProperty('records') ){

//                                 that.recordsColl = new autoAdmin.RecordsCollection();
//                                 that.recordsColl.add(jqXHR.responseJSON.data.records);

//                             }

//                             if( jqXHR.responseJSON.data.hasOwnProperty('fields') ){

//                                 that.fieldsColl = new autoAdmin.FieldsCollection();
//                                 that.fieldsColl.add(jqXHR.responseJSON.data.fields);

//                             }


//                         }else{

//                             if( jqXHR.responseJSON.hasOwnProperty('errors') ){
//                                 _.each(jqXHR.responseJSON.errors,function( element, index, array ){
//                                     alert(element);
//                                 })
//                             }else{
//                                 alert("Looks like the ajax response wasn't quite what was expected from "+opts.url+".  Probably need to get a TA involved.");
//                             }

//                         }

//                     }

//                     that.trigger('ajaxLoaded');

//                 }else if( jqXHR.status === 404 ){

//                     alert("Page Not Found\n\nThe ajax calls is being made to a page ("+opts.url+") that could not be found. Probably going to need to get a TA involved to see what is going on here.");

//                 }else{

//                     alert(textStatus+'! Probably going to need to get a TA involved.');
//                     console.log('opts',opts);
//                     console.log(jqXHR);
//                     target.html(jqXHR.responseText);

//                 }

//             }
//         })

//     }

// });
ADF.FieldView = Backbone.Marionette.ItemView.extend({
    template: ADF.templates.formRow,
    initialize: function( options ){
        var fieldView = this;
        console.log('[ADF] FieldView Initialized', options);
    },
    render: function(){
        this.$el.html(this.template(this.model.toJSON()));
    }
});
ADF.FormView = Marionette.CollectionView.extend({
    initialize: function( options ) {
        console.log('[ADF] FormView Initialized', options );
    }
});

// 'use strict';
// window.autoAdmin = window.autoAdmin || {};

// autoAdmin.FormView = autoAdmin.PageView.extend({

//     className: "auto-admin-form",

//     el: ".auto-admin-form",

//     initialize: function(opts){
//         var that = this;

//         console.log('[autoAdmin] FormView initialized', opts);

//         this.ajax( opts );

//     },

//     render: function( opts ){

//         var that = this;
//         var $form = opts.target;
//         var fieldsArray = opts.ajaxView.fieldsColl.models;
//         var fieldObj = {};

//         $form.removeClass('loading').html('');

//         for ( var i = 0; i < fieldsArray.length; i++ ) {

//             fieldObj = {};

//             fieldObj = fieldsArray[i];

//             fieldObj.set("inputField", fieldsArray[i].render() );

//             $form.append(autoAdmin.templates.formField( fieldObj.toJSON() ))

//         }

//         $form.find('.select2').each(function(){
//             autoAdmin.utils.renderSelect2({
//                 select2Obj : $(this)
//             })
//         })

//     },

//     ajax: function( opts ) {
//         var that = this;
//         var ajaxObj = {};
//         $.extend(ajaxObj,opts,{caller:that});

//         new autoAdmin.AjaxView(ajaxObj);

//     }

// });
// 'use strict';
// window.autoAdmin = window.autoAdmin || {};

// autoAdmin.GridView = autoAdmin.PageView.extend({

//     className: "auto-admin-grid",

//     el: ".auto-admin-grid",

//     initialize: function(opts){
//         var that = this;

//         console.log('[autoAdmin] GridView initialized', opts);

//         this.ajax( opts );
//     },

//     render: function( opts ){

//         var gridView = this;
//         var $target = opts.target;
//         var fieldsArray = opts.ajaxView.fieldsColl.models;
//         var recordsArray = opts.ajaxView.recordsColl.models;
//         var gridObj = {};

//         gridObj.headers = new Array();
//         gridObj.colSelectCols = new Array();
//         gridObj.records = new Array();

//         // COLUMNS
//         for ( var i = 0; i < fieldsArray.length; i++ ) {

//             fieldsArray[i].set("colIndex",i);
//             fieldsArray[i].set("gridRow",true);

//             gridObj.headers[i] = { 'html' : autoAdmin.templates.gridHeaderCell( fieldsArray[i].toJSON() ) };

//             if( fieldsArray[i].get("columnSelectPriority") != 0 ){

//                 // TODO: set the checked attribute if this is going to be visible

//                 gridObj.colSelectCols.push({'html' : autoAdmin.templates.dropdownSelectItem( $.extend( fieldsArray[i].toJSON(), {parent:"column-selector"} ) ) });

//             }

//         }

//         // put those fields into records
//         for ( var j = 0; j < recordsArray.length; j++ ) {

//             gridObj.records.push({
//                 'html' : autoAdmin.templates.gridRow( recordsArray[j].createTplObject({fields : fieldsArray}))
//             });

//         }

//         gridObj.colSelect = gridView.renderColumnSelector( gridObj.colSelectCols );

//         // TODO grid actions

//         $target.html( autoAdmin.templates.gridWrapper( gridObj ) );

//         gridView.refreshFilters( $target, fieldsArray );

//         $target.find('.select2').each(function(){
//             autoAdmin.utils.renderSelect2({
//                 select2Obj : $(this)
//             })
//         })

//     },

//     renderColumnSelector: function( columns ) {

//         var dropdownObj = {primaryOptions: columns};

//         dropdownObj.footerOptions = [
//             {
//                 href : "#",
//                 itemClass : "auto-admin-grid-column-group",
//                 label : "All Columns",
//                 dataAttributes : [
//                     {
//                         "name" : "column-select-type",
//                         "value" : "all"
//                     }
//                 ]
//             },
//             {
//                 href : "#",
//                 itemClass : "auto-admin-grid-column-group",
//                 label : "Minimum Columns",
//                 dataAttributes : [
//                     {
//                         "name" : "column-select-type",
//                         "value" : "min"
//                     }
//                 ]
//             },
//             {
//                 href : "#",
//                 itemClass : "auto-admin-grid-column-group",
//                 label : "Default Columns",
//                 dataAttributes : [
//                     {
//                         "name" : "column-select-type",
//                         "value" : "dflt"
//                     }
//                 ]
//             }
//         ];

//         dropdownObj.wrapClass = "column-selector";
//         dropdownObj.buttonLabel = "Select Columns";

//         return autoAdmin.templates.dropdownMenu( dropdownObj );

//     },

//     refreshFilters: function( $target, fieldsArray ){

//         var gridView = this;
//         var rows = $target.find('tbody tr');
//         var val;
//         var fieldName;
//         var field;
//         var values = new Array();

//         // go through each column
//         for ( var i = 0; i < fieldsArray.length; i++ ) {

//             field = fieldsArray[i];

//             fieldName = field.get("name");

//             if( fieldName === 'actions' ){
//                 continue;
//             }

//             // reset for each column
//             values = {}

//             rows.each(function(){

//                 // cache it
//                 var inputElement = $(this).find('td').eq(i).find(':input[name='+fieldName+']');

//                 // BUG select2 values being accumulated into filters not working properly
//                 val = ( inputElement.val() ? inputElement.val() : inputElement.select2("val") );

//                 if( val && val.length > 0 ){
//                     values[val] = val;
//                 }

//             })

//             //add these to the main columns array
//             if( _.size(values) > 0 ){
//                 field.set("currentValues",values);
//             }

//             // refresh the filter
//             gridView.refreshFilterOptions( $target, field );

//         }

//     },

//     refreshFilterOptions: function( $target, field ){

//         var th = $target.find('thead tr th').eq(field.get("colIndex"));
//         var tmpltObj = {};
//         var dropdownObj = {
//             wrapClass : "grid-header-filter",
//             footerOptions : [
//                 {
//                     href : "#",
//                     itemClass : "grid-header-filter-clear",
//                     label : "Clear Filters"
//                 }
//             ]
//         }

//         //remove all filter data
//         th.find('.dropdown-wrapper').remove();
//         th.append( autoAdmin.templates.dropdownMenu( dropdownObj ) );

//         //only attempt to do something if there are values in there
//         if( _.size(field.get("currentValues")) > 0 ){

//             th.addClass('has-filter').find('.icon-filter').removeClass('hide')

//             for( var value in field.get("currentValues") ){

//                 tmpltObj.name = value;
//                 tmpltObj.parent = field.get("name");
//                 if( field.get('data') && field.get('data').length > 0 ){

//                     for( var rec in field.get('data').data ){

//                         if( field.get("data")[rec].value == value ){

//                             tmpltObj.label = ( field.get("data")[rec].hasOwnProperty('label') ? field.get("data")[rec].label : field.get("data")[rec].value );
//                             break;

//                         }

//                     }

//                 }else{

//                     tmpltObj.label = value;

//                 }

//                 th.find('.dropdown-menu .divider').before( autoAdmin.templates.dropdownSelectItem( tmpltObj ) );

//             }

//         }else{

//             th.find('.icon-filter').addClass('hide');

//         }

//     },

//     ajax: function( opts ) {
//         var that = this;
//         var ajaxObj = {};
//         $.extend(ajaxObj,opts,{caller:that});

//         new autoAdmin.AjaxView(ajaxObj);

//     }

// });
// 'use strict';
// window.autoAdmin = window.autoAdmin || {};

// autoAdmin.PageView = Backbone.View.extend({

//     el: ".auto-admin-page",

//     initialize: function(opts){
//         var that = this;

//         this.onloadAjax();

//         this.listenTo( Backbone, 'onloadAjaxCheck', function () {
//             this.onloadAjax();
//         }, this );
//     },

//     events: {
//         // AJAX
//         "change .submit-on-change"                     : "submitParentFormAjax",
//         "click .load-on-click"                         : "loadOnClickAjax",
//         "click .submit-parent-form-ajax"               : "submitParentFormAjax",

//         // GENERAL UI
//         "click .dropdown-wrapper .dropdown-toggle"     : "dropdownToggle",

//         // GRID
//         "click .auto-admin-grid-column-group"          : "columnSelect",
//         "change .column-selector .dropdown-menu input" : "columnSelect"

//         // TODO apply filters action
//     },

//     submitAjax: function( ajaxObj ) {

//         var that = this;
//         this.ajaxViews = new Array();

//         switch( ajaxObj.resultType ){
//             case "form":
//                 that.ajaxViews.push(new autoAdmin.FormView(ajaxObj));
//                 break;
//             case "grid":
//                 that.ajaxViews.push(new autoAdmin.GridView(ajaxObj));
//                 break;
//             case "html":
//                 that.ajaxViews.push(new autoAdmin.HtmlView(ajaxObj));
//                 break;
//             default:
//                 alert('Unexpected result type: '+resultType+'.  Probably going to need to a get a TA involved.');
//                 break;

//         }

//     },

//     onloadAjax: function(){

//         var pageView = this;

//         //there might be more than one on the page when the page loads (or when a partial loads)
//         $('body').find('.auto-admin-onload-ajax').each(function(){

//             var triggerObj = $(this);
//             var target = triggerObj;
//             var ajaxObj = {};

//             if( triggerObj.attr('data-onload-ajax-target-id') != "" ){
//                 target = $('#'+triggerObj.attr('data-onload-ajax-target-id'));
//             }

//             ajaxObj.url = triggerObj.attr('data-onload-ajax-url');
//             ajaxObj.method = "GET";
//             ajaxObj.data = "";
//             ajaxObj.target = target;
//             ajaxObj.resultType = triggerObj.attr('data-result-type');

//             triggerObj.removeClass('auto-admin-onload-ajax');

//             pageView.submitAjax( ajaxObj );

//         })

//     },

//     formSubmitAjax: function( $trigger ){

//         // e.preventDefault();     //just to make sure we don't submit anything

//         var pageView = this;
//         var $form = $trigger.is('form') ? $trigger : $trigger.closest('form');
//         var ajaxObj = {};

//         ajaxObj.url = $form.attr('action');
//         ajaxObj.method = $form.attr('method');
//         ajaxObj.data = $form.serializeObject();
//         ajaxObj.target = $('#'+$form.attr('data-target-id'));
//         ajaxObj.resultType = $form.attr('data-result-type');

//         pageView.submitAjax( ajaxObj );

//     },

//     submitParentFormAjax: function(e) {

//         e.preventDefault();
//         this.formSubmitAjax( $(e.target) );

//     },

//     loadOnClickAjax: function(e) {

//         // don't want to follow the link
//         e.preventDefault();

//         var pageView = this;
//         var linkObj = $(e.target);
//         var ajaxObj = {};

//         ajaxObj.url = linkObj.attr('href');
//         ajaxObj.method = "get";
//         ajaxObj.data = "";
//         ajaxObj.target = $('#'+linkObj.attr('data-load-on-click-target-id'));
//         ajaxObj.resultType = linkObj.attr('data-result-type');

//         pageView.submitAjax( ajaxObj );

//     },

//     dropdownToggle: function(e) {

//         if( e.target ){

//             e.preventDefault();
//             var $target = $(e.target);

//         }else{      // we're just going to assume it's a jQuery object then

//             var $target = e;

//         }

//         $target.closest('.dropdown-wrapper').find('.dropdown-menu').toggleClass('hide');

//     },

//     columnSelect: function(e) {

//         e.preventDefault();

//         var pageView = this;

//         var $target = $(e.target);

//         var groupType = $target.attr('data-column-select-type')

//           // autoAdmin.grid.columnSelect( $(e.target), $(this).attr('data-column-select-type') );

//         if( !groupType ){

//             var id = $target.val();
//             var cells = $('#'+id+", .auto-admin-grid td[data-header-id="+id+"]");

//             if( $target.is(':checked') ){
//                 cells.show();
//             }else{
//                 cells.hide();
//             }

//         }else{

//             switch( groupType ){

//                 case "all":
//                     $target.closest('.dropdown-wrapper').find('.dropdown-menu :input').not(':checked').trigger('click');
//                     break;

//                 case "min":
//                     $target.closest('.dropdown-wrapper').find('.dropdown-menu :input').each(function(){
//                         var inputObj = $(this);
//                         var priority = parseInt( $('#'+inputObj.val()).attr('data-column-select-priority'), 10 );
//                         if( ( inputObj.is(':checked') && priority > 1 ) || ( inputObj.is(':not(:checked)') && priority <= 1 ) ){
//                             inputObj.trigger('click');
//                         }
//                     })
//                     break;

//                 case "dflt":
//                     var dropdownMenu = $target.closest('.dropdown-wrapper').find('.dropdown-menu');
//                     $('.auto-admin-grid th, .auto-admin-grid td').css("display", "");
//                     $('.auto-admin-grid th').each(function(){

//                         var inputObj = dropdownMenu.find(':input[value='+$(this).attr('id')+']');

//                         //check the visibility of this header which is now based on the media queries
//                         if( $(this).css('display') === 'table-cell' && inputObj.is(':not(:checked)') ){

//                             inputObj.trigger('click');

//                         }else if( $(this).css('display') === 'none' && inputObj.is(':checked') ){

//                             inputObj.trigger('click');

//                         }

//                     })
//                     break;

//             }

//             pageView.dropdownToggle( $target.closest('.dropdown-wrapper').find('.dropdown-toggle') );

//         }

//     }


// });
// 'use strict';
// window.autoAdmin = window.autoAdmin || {};

// autoAdmin.RecordView = autoAdmin.PageView.extend({

//     className: "auto-admin-record",

//     el: ".auto-admin-record",

//     initialize: function(opts){
//         var that = this;

//         console.log('[autoAdmin] RecordView initialized', opts);

//     },

//     events: {
//         // ACTIONS
//         "click .btn-save"                     : "save"
//     },

//     createTplObject: function( args ){

//         var record = this;
//         var fieldsArray = args.fields;
//         var $target = args.target;
//         var createRow = ( args.hasOwnProperty("createRow") && args.createRow );
//         var cellObj = {};
//         var recordObj = {}
//         recordObj.cells = new Array();

//         for ( var i = 0; i < fieldsArray.length; i++ ) {

//             cellObj = fieldsArray[i];
//             cellObj.set("currentValue",record.get(fieldsArray[i].get("name")));
//             cellObj.set("inputField",cellObj.render());

//             recordObj.cells.push({'html': autoAdmin.templates.gridCell( cellObj.toJSON() )});

//         }

//         //make sure we have an ID value, even for new rows
//         if( record.get("id") ){
//             recordObj.id = record.get("id");
//             recordObj.rowClass = "current";
//         }else{
//             recordObj.id = 'a' + Math.round( Math.random() * 10000000 );
//             rowClass = "added";
//         }

//         return recordObj;

//     },

//     render: function( args ){

//         var tplObject = this.createTplObject( args );

//         alert('not done');

//         // TODO handle create row argument, etc.

//         // if( createRow ){

//     //         if( !args.hasOwnProperty('adjSibObj') || args.adjSibObj === false ){
//     //             $target.append( autoAdmin.render.hbsTemplate( "autoAdminGridRow", rowObj ) );
//     //         }else{
//     //             adjSibObj.after( autoAdmin.render.hbsTemplate( "autoAdminGridRow", rowObj ) );
//     //         }

//         // }else{

//         //      $target.find('tbody tr#'+recordObj.id).replaceWith(autoAdmin.templates.gridRow( rowObj ) );

//         // }

//     //     $('#'+dataObj.id).find('.select2').each(function(){
//     //         autoAdmin.render.renderSelect2({
//     //             select2Obj : $(this)
//     //         })
//     //     });

//     },

//     save: function( e ){

//         e.preventDefault();

//         console.log('some event');

//     }

// });
ADF.FieldModel = Backbone.Model.extend({

    initialize: function( data ){
        console.log('[ADF] FieldModel Initialized', data);
        this.set("inputField",ADF.templates['inputType'+ADF.utils.capitalize(ADF.utils.camelize(this.get('type')))](this.toJSON()));
    }

});
ADF.RecordModel = Backbone.Model.extend({

    initialize: function( opts ){

        var that = this;

    },

    createTplObject: function( args ){

        var record = this;
        var fieldsArray = args.fields;
        var $target = args.target;
        var createRow = ( args.hasOwnProperty("createRow") && args.createRow );
        var cellObj = {};
        var recordObj = {}
        recordObj.cells = new Array();

        for ( var i = 0; i < fieldsArray.length; i++ ) {

            cellObj = fieldsArray[i];
            cellObj.set("currentValue",record.get(fieldsArray[i].get("name")));
            cellObj.set("inputField",cellObj.render());

            recordObj.cells.push({'html': autoAdmin.templates.gridCell( cellObj.toJSON() )});

        }

        //make sure we have an ID value, even for new rows
        if( record.get("id") ){
            recordObj.id = record.get("id");
            recordObj.rowClass = "current";
        }else{
            recordObj.id = 'a' + Math.round( Math.random() * 10000000 );
            rowClass = "added";
        }

        return recordObj;

    },

    render: function( args ){

        var tplObject = this.createTplObject( args );

        alert('not done');

        // TODO handle create row argument, etc.

        // if( createRow ){

    //         if( !args.hasOwnProperty('adjSibObj') || args.adjSibObj === false ){
    //             $target.append( autoAdmin.render.hbsTemplate( "autoAdminGridRow", rowObj ) );
    //         }else{
    //             adjSibObj.after( autoAdmin.render.hbsTemplate( "autoAdminGridRow", rowObj ) );
    //         }

        // }else{

        //      $target.find('tbody tr#'+recordObj.id).replaceWith(autoAdmin.templates.gridRow( rowObj ) );

        // }

    //     $('#'+dataObj.id).find('.select2').each(function(){
    //         autoAdmin.render.renderSelect2({
    //             select2Obj : $(this)
    //         })
    //     });

    },

    save: function( e ){

        e.preventDefault();

        console.log('some event');

    }

});
ADF.FieldsCollection = Backbone.Collection.extend({

    model: ADF.FieldModel,

    initialize: function( opts ){

        var that = this;

    }

});
ADF.RecordsCollection = Backbone.Collection.extend({

    model: ADF.RecordModel,

    initialize: function( opts ){

        var that = this;

    }

});
ADF.utils = {
    capitalize: function( string ) {
        return string.charAt(0).toUpperCase() + string.slice(1);
    },
    camelize: function( string ) {
        return string.replace(/[_.-](\w|$)/g, function (_,x) {
            return x.toUpperCase();
        });
    },
    spin: function( targetObj ) {
        targetObj.removeClass('hide').html('').addClass('loading').spin();
    }
}


// window.autoAdmin = window.autoAdmin || {};

// autoAdmin.utils = {



//     spin: function( targetObj ){

//     	targetObj.removeClass('hide').html('').addClass('loading').spin();

//     },

//     pageSpin: function(){

//         this.pageOverlay({'show':true});
//         $('.page-spin').removeClass('hide');
//         this.pageSpinner = new Spinner({length: 60,width: 35, radius: 100}).spin(document.getElementById('page-spin'));

//     },

//     pageSpinStop: function(){

//         this.pageOverlay({'show':false});
//         $('.page-spin').addClass('hide');
//         this.pageSpinner.stop();

//     },

//     pageOverlay: function( args ){

//         if( args.show ){
//             $('.body-overlay').removeClass('hide');
//         }else{
//             $('.body-overlay').addClass('hide');
//         }

//     },

//     renderSelect2: function(){

//         // TODO dynamically determine if user can clear selection
//         // TODO dynamically determine if user cna add new option

//         var settings = {
//             "dropdownAutoWidth" : true,
//             "allowClear" : true,
//             "formatResult" : autoAdmin.utils.select2Template
//         }

//         $.extend( settings, arguments[0] );

//         var select2Obj = settings.select2Obj;

//         delete settings.select2Obj;

//         select2Obj.select2(settings);

//         if( select2Obj.attr('readonly') === "readonly" ){
//             select2Obj.select2("readonly",true);
//         }


//     },

//     select2Template: function( object, container, query ){

//         //make this into a jQ object so we can retrieve the data- attribute data
//         var optObj = $(object.element);

//         //have to do some manual stuff to "convert" this object that we get
//         //into a normal js object that can be used in hour handlebars template
//         //rather than just a plain old js-built template
//         if( object.id === object.text || object.text.length === 0 ){
//             var entryObj = {
//               "value" : object.id,
//               "label" : object.id,
//               "tooltip" : optObj.data('tooltip')
//             }
//         }else{
//             var entryObj = {
//               "value" : object.id,
//               "label" : "<span class='select2-option-value'>"+object.id+"</span><span class='select2-option-label'>"+object.text+"</span>",
//               "tooltip" : optObj.data('tooltip')
//             }
//         }
//         return autoAdmin.templates.inputHelperSelect2Record( entryObj );

//     },


//     printObject: function(obj){
//   		return JSON.stringify(obj,null,'\t').replace(/\n/g,'<br>').replace(/\t/g,'&nbsp;&nbsp;&nbsp;');
// 	},

// 	log: function(){

// 		// convert to a true array
// 		var args = Array.prototype.slice.call(arguments);

// 		// pull off the level from the beginning
//   		var msgLevel = args.shift();

// 		// add something indicating it's from the autoAdmin
// 		args.unshift( "::autoAdmin::");

// 		// make sure our history log is ready
//   		autoAdmin.log.history = autoAdmin.log.history || [];   // store logs to an array for reference

//   		// output it if this browser supports that
//   		if(window.console){
//     		console.log( arguments );
//   		}

//   		// add a datestamp
//   		args.push(Date.now());

//   		// put it into our history log with the datestamp added
//   		autoAdmin.log.history.push(args);

// 	}

// }
$(function(){

	// $.event.props.push('dataTransfer');

  //   $('body')
  //       .on('click','.refresh-menu',function(e){
  //       	e.preventDefault();
  //       	autoAdmin.core.refreshTemplates(true);
  //       })
  //       .on('click', '.auto-admin-grid-overlay-editor .display-value',function(){
  //       	autoAdmin.grid.showOverlayEditor( $(this).parent() );
  //       })
  //       .on('click', '.auto-admin-grid-overlay-editor .close',function(){
  //       	autoAdmin.grid.hideOverlayEditor( $(this).closest('.auto-admin-grid-overlay-editor') );
  //       })

  //   $('.select2').select2().each(function(){
		// autoAdmin.render.renderSelect2({
		// 	select2Obj : $(this)
		// })
  //   });

  //   $(':input').first().focus();

    var options = {
        something: "some value",
        another: "#some-selector"
    };

    adf.start(options);

    // window.autoAdmin = window.autoAdmin || {};

    // var autoAdminInit = new autoAdmin.PageView;

})