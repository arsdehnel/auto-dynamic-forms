Handlebars.registerHelper("checkboxesListing", function(data, dataAttributes) {
    var firstData = data[0], returnString = "", groups = {}, selectAllStr = Handlebars.helpers.checkboxesSelectAll(dataAttributes);
    if (firstData && firstData.groupLabel) {
        var groups = _.groupBy(data, function(dataItem) {
            return dataItem.groupLabel;
        });
        _.each(groups, function(groupItems, groupLabel) {
            returnString += ADF.templates.inputHelpers.checkboxListingGroupHeader({
                groupLabel: groupLabel,
                selectAllStr: selectAllStr
            }), _.each(groupItems, function(groupItem) {
                returnString += ADF.templates.inputHelpers.checkboxListingItem(groupItem);
            }), returnString += ADF.templates.inputHelpers.checkboxListingGroupFooter();
        });
    } else _.each(data, function(dataItem) {
        returnString += ADF.templates.inputHelpers.checkboxListingItem(dataItem);
    });
    return new Handlebars.SafeString(returnString);
}), Handlebars.registerHelper("checkboxesSelectAll", function(dataAttributes) {
    var selectAllOption = _.findWhere(dataAttributes, {
        name: "select-all-option"
    });
    return selectAllOption && selectAllOption.value ? new Handlebars.SafeString('<button class="adf-checkbox-select-all-toggle">Select All</button>') : void 0;
}), Handlebars.registerHelper("dataAttributeBoolean", function(dataAttributes, attributeName, attributeValue, returnString) {
    return attributeValue ? _.size(_.where(dataAttributes, {
        name: attributeName,
        value: attributeValue
    })) > 0 ? returnString : "" : _.size(_.where(dataAttributes, {
        name: attributeName
    })) > 0 ? returnString : "";
}), Handlebars.registerHelper("dataAttributeWrite", function(dataAttrName, dataAttrValue, locationCode) {
    var configLocation = "formRow";
    return ADF.config.get("dataAttributes")[dataAttrName] && ADF.config.get("dataAttributes")[dataAttrName].location && (configLocation = ADF.config.get("dataAttributes")[dataAttrName].location), 
    configLocation === locationCode ? new Handlebars.SafeString(" data-" + dataAttrName + '="' + dataAttrValue + '"') : "";
}), Handlebars.registerHelper("json", function(context) {
    return JSON.stringify(context);
}), Handlebars.registerHelper("numberInputMinMaxBuilder", function(stringLength, fillString) {
    for (var retString = "", i = 0; stringLength > i; i++) retString += fillString;
    return retString;
}), Handlebars.registerHelper("optionChecked", function(checkedAttr, value, currentValue) {
    var checkedProperty;
    return checkedProperty = checkedAttr === !0 || "Y" === checkedAttr ? 'checked="checked"' : Array.isArray(currentValue) ? currentValue.indexOf(value) >= 0 ? 'checked="checked"' : "" : _.isUndefined(currentValue) || _.isNull(currentValue) ? "" : value == currentValue ? 'checked="checked"' : "", 
    new Handlebars.SafeString(checkedProperty);
}), Handlebars.registerHelper("optionSelected", function(selectedAttr, value, currentValue) {
    var selectedProperty;
    return selectedProperty = "Y" === selectedAttr ? 'selected="selected"' : Array.isArray(currentValue) ? currentValue.indexOf(value) ? 'selected="selected"' : "" : value == currentValue ? 'selected="selected"' : "", 
    new Handlebars.SafeString(selectedProperty);
}), Handlebars.registerHelper("overlaySummary", function(inputData, dataAttributes) {
    if (!(_.indexOf(inputData, "|") >= 0)) return inputData ? inputData : "Click for details";
    if (!dataAttributes.formatStyle) return inputData.split("|").length + ' records<div class="overlay-details-hover">' + inputData.split("|").join("<br>") + "</div>";
    switch (dataAttributes.formatStyle) {
      case "tilde-delimited-columns":
        return _.each(inputData.split("|"), function(record) {
            return "<tr><td>" + record.split("~").join("</td><td>") + "</td></tr>";
        });

      default:
        return inputData.split("|").join(", ");
    }
}), Handlebars.registerHelper("selectFancyDisplayText", function(currentValue, data) {
    var dataObj = _.findWhere(data, {
        value: currentValue ? currentValue.toString() : ""
    });
    return dataObj ? $.trim($(ADF.templates.inputHelpers.selectFancyRecord(dataObj)).text()) : null;
}), Handlebars.registerHelper("selectFancyLink", function(value, label) {
    return value === label ? new Handlebars.SafeString('<a href="#">' + value + "</a>") : new Handlebars.SafeString('<a href="#">' + value + ": " + label + "</a>");
});
//# sourceMappingURL=handlebars-helpers.min.js.map