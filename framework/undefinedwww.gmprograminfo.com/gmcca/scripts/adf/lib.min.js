(function() {
    var root = this, previousUnderscore = root._, breaker = {}, ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype, push = ArrayProto.push, slice = ArrayProto.slice, concat = ArrayProto.concat, toString = ObjProto.toString, hasOwnProperty = ObjProto.hasOwnProperty, nativeForEach = ArrayProto.forEach, nativeMap = ArrayProto.map, nativeReduce = ArrayProto.reduce, nativeReduceRight = ArrayProto.reduceRight, nativeFilter = ArrayProto.filter, nativeEvery = ArrayProto.every, nativeSome = ArrayProto.some, nativeIndexOf = ArrayProto.indexOf, nativeLastIndexOf = ArrayProto.lastIndexOf, nativeIsArray = Array.isArray, nativeKeys = Object.keys, nativeBind = FuncProto.bind, _ = function(obj) {
        return obj instanceof _ ? obj : this instanceof _ ? void (this._wrapped = obj) : new _(obj);
    };
    "undefined" != typeof exports ? ("undefined" != typeof module && module.exports && (exports = module.exports = _), 
    exports._ = _) : root._ = _, _.VERSION = "1.6.0";
    var each = _.each = _.forEach = function(obj, iterator, context) {
        if (null == obj) return obj;
        if (nativeForEach && obj.forEach === nativeForEach) obj.forEach(iterator, context); else if (obj.length === +obj.length) {
            for (var i = 0, length = obj.length; length > i; i++) if (iterator.call(context, obj[i], i, obj) === breaker) return;
        } else for (var keys = _.keys(obj), i = 0, length = keys.length; length > i; i++) if (iterator.call(context, obj[keys[i]], keys[i], obj) === breaker) return;
        return obj;
    };
    _.map = _.collect = function(obj, iterator, context) {
        var results = [];
        return null == obj ? results : nativeMap && obj.map === nativeMap ? obj.map(iterator, context) : (each(obj, function(value, index, list) {
            results.push(iterator.call(context, value, index, list));
        }), results);
    };
    var reduceError = "Reduce of empty array with no initial value";
    _.reduce = _.foldl = _.inject = function(obj, iterator, memo, context) {
        var initial = arguments.length > 2;
        if (null == obj && (obj = []), nativeReduce && obj.reduce === nativeReduce) return context && (iterator = _.bind(iterator, context)), 
        initial ? obj.reduce(iterator, memo) : obj.reduce(iterator);
        if (each(obj, function(value, index, list) {
            initial ? memo = iterator.call(context, memo, value, index, list) : (memo = value, 
            initial = !0);
        }), !initial) throw new TypeError(reduceError);
        return memo;
    }, _.reduceRight = _.foldr = function(obj, iterator, memo, context) {
        var initial = arguments.length > 2;
        if (null == obj && (obj = []), nativeReduceRight && obj.reduceRight === nativeReduceRight) return context && (iterator = _.bind(iterator, context)), 
        initial ? obj.reduceRight(iterator, memo) : obj.reduceRight(iterator);
        var length = obj.length;
        if (length !== +length) {
            var keys = _.keys(obj);
            length = keys.length;
        }
        if (each(obj, function(value, index, list) {
            index = keys ? keys[--length] : --length, initial ? memo = iterator.call(context, memo, obj[index], index, list) : (memo = obj[index], 
            initial = !0);
        }), !initial) throw new TypeError(reduceError);
        return memo;
    }, _.find = _.detect = function(obj, predicate, context) {
        var result;
        return any(obj, function(value, index, list) {
            return predicate.call(context, value, index, list) ? (result = value, !0) : void 0;
        }), result;
    }, _.filter = _.select = function(obj, predicate, context) {
        var results = [];
        return null == obj ? results : nativeFilter && obj.filter === nativeFilter ? obj.filter(predicate, context) : (each(obj, function(value, index, list) {
            predicate.call(context, value, index, list) && results.push(value);
        }), results);
    }, _.reject = function(obj, predicate, context) {
        return _.filter(obj, function(value, index, list) {
            return !predicate.call(context, value, index, list);
        }, context);
    }, _.every = _.all = function(obj, predicate, context) {
        predicate || (predicate = _.identity);
        var result = !0;
        return null == obj ? result : nativeEvery && obj.every === nativeEvery ? obj.every(predicate, context) : (each(obj, function(value, index, list) {
            return (result = result && predicate.call(context, value, index, list)) ? void 0 : breaker;
        }), !!result);
    };
    var any = _.some = _.any = function(obj, predicate, context) {
        predicate || (predicate = _.identity);
        var result = !1;
        return null == obj ? result : nativeSome && obj.some === nativeSome ? obj.some(predicate, context) : (each(obj, function(value, index, list) {
            return result || (result = predicate.call(context, value, index, list)) ? breaker : void 0;
        }), !!result);
    };
    _.contains = _.include = function(obj, target) {
        return null == obj ? !1 : nativeIndexOf && obj.indexOf === nativeIndexOf ? -1 != obj.indexOf(target) : any(obj, function(value) {
            return value === target;
        });
    }, _.invoke = function(obj, method) {
        var args = slice.call(arguments, 2), isFunc = _.isFunction(method);
        return _.map(obj, function(value) {
            return (isFunc ? method : value[method]).apply(value, args);
        });
    }, _.pluck = function(obj, key) {
        return _.map(obj, _.property(key));
    }, _.where = function(obj, attrs) {
        return _.filter(obj, _.matches(attrs));
    }, _.findWhere = function(obj, attrs) {
        return _.find(obj, _.matches(attrs));
    }, _.max = function(obj, iterator, context) {
        if (!iterator && _.isArray(obj) && obj[0] === +obj[0] && obj.length < 65535) return Math.max.apply(Math, obj);
        var result = -(1 / 0), lastComputed = -(1 / 0);
        return each(obj, function(value, index, list) {
            var computed = iterator ? iterator.call(context, value, index, list) : value;
            computed > lastComputed && (result = value, lastComputed = computed);
        }), result;
    }, _.min = function(obj, iterator, context) {
        if (!iterator && _.isArray(obj) && obj[0] === +obj[0] && obj.length < 65535) return Math.min.apply(Math, obj);
        var result = 1 / 0, lastComputed = 1 / 0;
        return each(obj, function(value, index, list) {
            var computed = iterator ? iterator.call(context, value, index, list) : value;
            lastComputed > computed && (result = value, lastComputed = computed);
        }), result;
    }, _.shuffle = function(obj) {
        var rand, index = 0, shuffled = [];
        return each(obj, function(value) {
            rand = _.random(index++), shuffled[index - 1] = shuffled[rand], shuffled[rand] = value;
        }), shuffled;
    }, _.sample = function(obj, n, guard) {
        return null == n || guard ? (obj.length !== +obj.length && (obj = _.values(obj)), 
        obj[_.random(obj.length - 1)]) : _.shuffle(obj).slice(0, Math.max(0, n));
    };
    var lookupIterator = function(value) {
        return null == value ? _.identity : _.isFunction(value) ? value : _.property(value);
    };
    _.sortBy = function(obj, iterator, context) {
        return iterator = lookupIterator(iterator), _.pluck(_.map(obj, function(value, index, list) {
            return {
                value: value,
                index: index,
                criteria: iterator.call(context, value, index, list)
            };
        }).sort(function(left, right) {
            var a = left.criteria, b = right.criteria;
            if (a !== b) {
                if (a > b || void 0 === a) return 1;
                if (b > a || void 0 === b) return -1;
            }
            return left.index - right.index;
        }), "value");
    };
    var group = function(behavior) {
        return function(obj, iterator, context) {
            var result = {};
            return iterator = lookupIterator(iterator), each(obj, function(value, index) {
                var key = iterator.call(context, value, index, obj);
                behavior(result, key, value);
            }), result;
        };
    };
    _.groupBy = group(function(result, key, value) {
        _.has(result, key) ? result[key].push(value) : result[key] = [ value ];
    }), _.indexBy = group(function(result, key, value) {
        result[key] = value;
    }), _.countBy = group(function(result, key) {
        _.has(result, key) ? result[key]++ : result[key] = 1;
    }), _.sortedIndex = function(array, obj, iterator, context) {
        iterator = lookupIterator(iterator);
        for (var value = iterator.call(context, obj), low = 0, high = array.length; high > low; ) {
            var mid = low + high >>> 1;
            iterator.call(context, array[mid]) < value ? low = mid + 1 : high = mid;
        }
        return low;
    }, _.toArray = function(obj) {
        return obj ? _.isArray(obj) ? slice.call(obj) : obj.length === +obj.length ? _.map(obj, _.identity) : _.values(obj) : [];
    }, _.size = function(obj) {
        return null == obj ? 0 : obj.length === +obj.length ? obj.length : _.keys(obj).length;
    }, _.first = _.head = _.take = function(array, n, guard) {
        return null == array ? void 0 : null == n || guard ? array[0] : 0 > n ? [] : slice.call(array, 0, n);
    }, _.initial = function(array, n, guard) {
        return slice.call(array, 0, array.length - (null == n || guard ? 1 : n));
    }, _.last = function(array, n, guard) {
        return null == array ? void 0 : null == n || guard ? array[array.length - 1] : slice.call(array, Math.max(array.length - n, 0));
    }, _.rest = _.tail = _.drop = function(array, n, guard) {
        return slice.call(array, null == n || guard ? 1 : n);
    }, _.compact = function(array) {
        return _.filter(array, _.identity);
    };
    var flatten = function(input, shallow, output) {
        return shallow && _.every(input, _.isArray) ? concat.apply(output, input) : (each(input, function(value) {
            _.isArray(value) || _.isArguments(value) ? shallow ? push.apply(output, value) : flatten(value, shallow, output) : output.push(value);
        }), output);
    };
    _.flatten = function(array, shallow) {
        return flatten(array, shallow, []);
    }, _.without = function(array) {
        return _.difference(array, slice.call(arguments, 1));
    }, _.partition = function(array, predicate) {
        var pass = [], fail = [];
        return each(array, function(elem) {
            (predicate(elem) ? pass : fail).push(elem);
        }), [ pass, fail ];
    }, _.uniq = _.unique = function(array, isSorted, iterator, context) {
        _.isFunction(isSorted) && (context = iterator, iterator = isSorted, isSorted = !1);
        var initial = iterator ? _.map(array, iterator, context) : array, results = [], seen = [];
        return each(initial, function(value, index) {
            (isSorted ? index && seen[seen.length - 1] === value : _.contains(seen, value)) || (seen.push(value), 
            results.push(array[index]));
        }), results;
    }, _.union = function() {
        return _.uniq(_.flatten(arguments, !0));
    }, _.intersection = function(array) {
        var rest = slice.call(arguments, 1);
        return _.filter(_.uniq(array), function(item) {
            return _.every(rest, function(other) {
                return _.contains(other, item);
            });
        });
    }, _.difference = function(array) {
        var rest = concat.apply(ArrayProto, slice.call(arguments, 1));
        return _.filter(array, function(value) {
            return !_.contains(rest, value);
        });
    }, _.zip = function() {
        for (var length = _.max(_.pluck(arguments, "length").concat(0)), results = new Array(length), i = 0; length > i; i++) results[i] = _.pluck(arguments, "" + i);
        return results;
    }, _.object = function(list, values) {
        if (null == list) return {};
        for (var result = {}, i = 0, length = list.length; length > i; i++) values ? result[list[i]] = values[i] : result[list[i][0]] = list[i][1];
        return result;
    }, _.indexOf = function(array, item, isSorted) {
        if (null == array) return -1;
        var i = 0, length = array.length;
        if (isSorted) {
            if ("number" != typeof isSorted) return i = _.sortedIndex(array, item), array[i] === item ? i : -1;
            i = 0 > isSorted ? Math.max(0, length + isSorted) : isSorted;
        }
        if (nativeIndexOf && array.indexOf === nativeIndexOf) return array.indexOf(item, isSorted);
        for (;length > i; i++) if (array[i] === item) return i;
        return -1;
    }, _.lastIndexOf = function(array, item, from) {
        if (null == array) return -1;
        var hasIndex = null != from;
        if (nativeLastIndexOf && array.lastIndexOf === nativeLastIndexOf) return hasIndex ? array.lastIndexOf(item, from) : array.lastIndexOf(item);
        for (var i = hasIndex ? from : array.length; i--; ) if (array[i] === item) return i;
        return -1;
    }, _.range = function(start, stop, step) {
        arguments.length <= 1 && (stop = start || 0, start = 0), step = arguments[2] || 1;
        for (var length = Math.max(Math.ceil((stop - start) / step), 0), idx = 0, range = new Array(length); length > idx; ) range[idx++] = start, 
        start += step;
        return range;
    };
    var ctor = function() {};
    _.bind = function(func, context) {
        var args, bound;
        if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));
        if (!_.isFunction(func)) throw new TypeError();
        return args = slice.call(arguments, 2), bound = function() {
            if (!(this instanceof bound)) return func.apply(context, args.concat(slice.call(arguments)));
            ctor.prototype = func.prototype;
            var self = new ctor();
            ctor.prototype = null;
            var result = func.apply(self, args.concat(slice.call(arguments)));
            return Object(result) === result ? result : self;
        };
    }, _.partial = function(func) {
        var boundArgs = slice.call(arguments, 1);
        return function() {
            for (var position = 0, args = boundArgs.slice(), i = 0, length = args.length; length > i; i++) args[i] === _ && (args[i] = arguments[position++]);
            for (;position < arguments.length; ) args.push(arguments[position++]);
            return func.apply(this, args);
        };
    }, _.bindAll = function(obj) {
        var funcs = slice.call(arguments, 1);
        if (0 === funcs.length) throw new Error("bindAll must be passed function names");
        return each(funcs, function(f) {
            obj[f] = _.bind(obj[f], obj);
        }), obj;
    }, _.memoize = function(func, hasher) {
        var memo = {};
        return hasher || (hasher = _.identity), function() {
            var key = hasher.apply(this, arguments);
            return _.has(memo, key) ? memo[key] : memo[key] = func.apply(this, arguments);
        };
    }, _.delay = function(func, wait) {
        var args = slice.call(arguments, 2);
        return setTimeout(function() {
            return func.apply(null, args);
        }, wait);
    }, _.defer = function(func) {
        return _.delay.apply(_, [ func, 1 ].concat(slice.call(arguments, 1)));
    }, _.throttle = function(func, wait, options) {
        var context, args, result, timeout = null, previous = 0;
        options || (options = {});
        var later = function() {
            previous = options.leading === !1 ? 0 : _.now(), timeout = null, result = func.apply(context, args), 
            context = args = null;
        };
        return function() {
            var now = _.now();
            previous || options.leading !== !1 || (previous = now);
            var remaining = wait - (now - previous);
            return context = this, args = arguments, 0 >= remaining ? (clearTimeout(timeout), 
            timeout = null, previous = now, result = func.apply(context, args), context = args = null) : timeout || options.trailing === !1 || (timeout = setTimeout(later, remaining)), 
            result;
        };
    }, _.debounce = function(func, wait, immediate) {
        var timeout, args, context, timestamp, result, later = function() {
            var last = _.now() - timestamp;
            wait > last ? timeout = setTimeout(later, wait - last) : (timeout = null, immediate || (result = func.apply(context, args), 
            context = args = null));
        };
        return function() {
            context = this, args = arguments, timestamp = _.now();
            var callNow = immediate && !timeout;
            return timeout || (timeout = setTimeout(later, wait)), callNow && (result = func.apply(context, args), 
            context = args = null), result;
        };
    }, _.once = function(func) {
        var memo, ran = !1;
        return function() {
            return ran ? memo : (ran = !0, memo = func.apply(this, arguments), func = null, 
            memo);
        };
    }, _.wrap = function(func, wrapper) {
        return _.partial(wrapper, func);
    }, _.compose = function() {
        var funcs = arguments;
        return function() {
            for (var args = arguments, i = funcs.length - 1; i >= 0; i--) args = [ funcs[i].apply(this, args) ];
            return args[0];
        };
    }, _.after = function(times, func) {
        return function() {
            return --times < 1 ? func.apply(this, arguments) : void 0;
        };
    }, _.keys = function(obj) {
        if (!_.isObject(obj)) return [];
        if (nativeKeys) return nativeKeys(obj);
        var keys = [];
        for (var key in obj) _.has(obj, key) && keys.push(key);
        return keys;
    }, _.values = function(obj) {
        for (var keys = _.keys(obj), length = keys.length, values = new Array(length), i = 0; length > i; i++) values[i] = obj[keys[i]];
        return values;
    }, _.pairs = function(obj) {
        for (var keys = _.keys(obj), length = keys.length, pairs = new Array(length), i = 0; length > i; i++) pairs[i] = [ keys[i], obj[keys[i]] ];
        return pairs;
    }, _.invert = function(obj) {
        for (var result = {}, keys = _.keys(obj), i = 0, length = keys.length; length > i; i++) result[obj[keys[i]]] = keys[i];
        return result;
    }, _.functions = _.methods = function(obj) {
        var names = [];
        for (var key in obj) _.isFunction(obj[key]) && names.push(key);
        return names.sort();
    }, _.extend = function(obj) {
        return each(slice.call(arguments, 1), function(source) {
            if (source) for (var prop in source) obj[prop] = source[prop];
        }), obj;
    }, _.pick = function(obj) {
        var copy = {}, keys = concat.apply(ArrayProto, slice.call(arguments, 1));
        return each(keys, function(key) {
            key in obj && (copy[key] = obj[key]);
        }), copy;
    }, _.omit = function(obj) {
        var copy = {}, keys = concat.apply(ArrayProto, slice.call(arguments, 1));
        for (var key in obj) _.contains(keys, key) || (copy[key] = obj[key]);
        return copy;
    }, _.defaults = function(obj) {
        return each(slice.call(arguments, 1), function(source) {
            if (source) for (var prop in source) void 0 === obj[prop] && (obj[prop] = source[prop]);
        }), obj;
    }, _.clone = function(obj) {
        return _.isObject(obj) ? _.isArray(obj) ? obj.slice() : _.extend({}, obj) : obj;
    }, _.tap = function(obj, interceptor) {
        return interceptor(obj), obj;
    };
    var eq = function(a, b, aStack, bStack) {
        if (a === b) return 0 !== a || 1 / a == 1 / b;
        if (null == a || null == b) return a === b;
        a instanceof _ && (a = a._wrapped), b instanceof _ && (b = b._wrapped);
        var className = toString.call(a);
        if (className != toString.call(b)) return !1;
        switch (className) {
          case "[object String]":
            return a == String(b);

          case "[object Number]":
            return a != +a ? b != +b : 0 == a ? 1 / a == 1 / b : a == +b;

          case "[object Date]":
          case "[object Boolean]":
            return +a == +b;

          case "[object RegExp]":
            return a.source == b.source && a.global == b.global && a.multiline == b.multiline && a.ignoreCase == b.ignoreCase;
        }
        if ("object" != typeof a || "object" != typeof b) return !1;
        for (var length = aStack.length; length--; ) if (aStack[length] == a) return bStack[length] == b;
        var aCtor = a.constructor, bCtor = b.constructor;
        if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor && _.isFunction(bCtor) && bCtor instanceof bCtor) && "constructor" in a && "constructor" in b) return !1;
        aStack.push(a), bStack.push(b);
        var size = 0, result = !0;
        if ("[object Array]" == className) {
            if (size = a.length, result = size == b.length) for (;size-- && (result = eq(a[size], b[size], aStack, bStack)); ) ;
        } else {
            for (var key in a) if (_.has(a, key) && (size++, !(result = _.has(b, key) && eq(a[key], b[key], aStack, bStack)))) break;
            if (result) {
                for (key in b) if (_.has(b, key) && !size--) break;
                result = !size;
            }
        }
        return aStack.pop(), bStack.pop(), result;
    };
    _.isEqual = function(a, b) {
        return eq(a, b, [], []);
    }, _.isEmpty = function(obj) {
        if (null == obj) return !0;
        if (_.isArray(obj) || _.isString(obj)) return 0 === obj.length;
        for (var key in obj) if (_.has(obj, key)) return !1;
        return !0;
    }, _.isElement = function(obj) {
        return !(!obj || 1 !== obj.nodeType);
    }, _.isArray = nativeIsArray || function(obj) {
        return "[object Array]" == toString.call(obj);
    }, _.isObject = function(obj) {
        return obj === Object(obj);
    }, each([ "Arguments", "Function", "String", "Number", "Date", "RegExp" ], function(name) {
        _["is" + name] = function(obj) {
            return toString.call(obj) == "[object " + name + "]";
        };
    }), _.isArguments(arguments) || (_.isArguments = function(obj) {
        return !(!obj || !_.has(obj, "callee"));
    }), "function" != typeof /./ && (_.isFunction = function(obj) {
        return "function" == typeof obj;
    }), _.isFinite = function(obj) {
        return isFinite(obj) && !isNaN(parseFloat(obj));
    }, _.isNaN = function(obj) {
        return _.isNumber(obj) && obj != +obj;
    }, _.isBoolean = function(obj) {
        return obj === !0 || obj === !1 || "[object Boolean]" == toString.call(obj);
    }, _.isNull = function(obj) {
        return null === obj;
    }, _.isUndefined = function(obj) {
        return void 0 === obj;
    }, _.has = function(obj, key) {
        return hasOwnProperty.call(obj, key);
    }, _.noConflict = function() {
        return root._ = previousUnderscore, this;
    }, _.identity = function(value) {
        return value;
    }, _.constant = function(value) {
        return function() {
            return value;
        };
    }, _.property = function(key) {
        return function(obj) {
            return obj[key];
        };
    }, _.matches = function(attrs) {
        return function(obj) {
            if (obj === attrs) return !0;
            for (var key in attrs) if (attrs[key] !== obj[key]) return !1;
            return !0;
        };
    }, _.times = function(n, iterator, context) {
        for (var accum = Array(Math.max(0, n)), i = 0; n > i; i++) accum[i] = iterator.call(context, i);
        return accum;
    }, _.random = function(min, max) {
        return null == max && (max = min, min = 0), min + Math.floor(Math.random() * (max - min + 1));
    }, _.now = Date.now || function() {
        return new Date().getTime();
    };
    var entityMap = {
        escape: {
            "&": "&amp;",
            "<": "&lt;",
            ">": "&gt;",
            '"': "&quot;",
            "'": "&#x27;"
        }
    };
    entityMap.unescape = _.invert(entityMap.escape);
    var entityRegexes = {
        escape: new RegExp("[" + _.keys(entityMap.escape).join("") + "]", "g"),
        unescape: new RegExp("(" + _.keys(entityMap.unescape).join("|") + ")", "g")
    };
    _.each([ "escape", "unescape" ], function(method) {
        _[method] = function(string) {
            return null == string ? "" : ("" + string).replace(entityRegexes[method], function(match) {
                return entityMap[method][match];
            });
        };
    }), _.result = function(object, property) {
        if (null == object) return void 0;
        var value = object[property];
        return _.isFunction(value) ? value.call(object) : value;
    }, _.mixin = function(obj) {
        each(_.functions(obj), function(name) {
            var func = _[name] = obj[name];
            _.prototype[name] = function() {
                var args = [ this._wrapped ];
                return push.apply(args, arguments), result.call(this, func.apply(_, args));
            };
        });
    };
    var idCounter = 0;
    _.uniqueId = function(prefix) {
        var id = ++idCounter + "";
        return prefix ? prefix + id : id;
    }, _.templateSettings = {
        evaluate: /<%([\s\S]+?)%>/g,
        interpolate: /<%=([\s\S]+?)%>/g,
        escape: /<%-([\s\S]+?)%>/g
    };
    var noMatch = /(.)^/, escapes = {
        "'": "'",
        "\\": "\\",
        "\r": "r",
        "\n": "n",
        "	": "t",
        "\u2028": "u2028",
        "\u2029": "u2029"
    }, escaper = /\\|'|\r|\n|\t|\u2028|\u2029/g;
    _.template = function(text, data, settings) {
        var render;
        settings = _.defaults({}, settings, _.templateSettings);
        var matcher = new RegExp([ (settings.escape || noMatch).source, (settings.interpolate || noMatch).source, (settings.evaluate || noMatch).source ].join("|") + "|$", "g"), index = 0, source = "__p+='";
        text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
            return source += text.slice(index, offset).replace(escaper, function(match) {
                return "\\" + escapes[match];
            }), escape && (source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'"), 
            interpolate && (source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'"), 
            evaluate && (source += "';\n" + evaluate + "\n__p+='"), index = offset + match.length, 
            match;
        }), source += "';\n", settings.variable || (source = "with(obj||{}){\n" + source + "}\n"), 
        source = "var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};\n" + source + "return __p;\n";
        try {
            render = new Function(settings.variable || "obj", "_", source);
        } catch (e) {
            throw e.source = source, e;
        }
        if (data) return render(data, _);
        var template = function(data) {
            return render.call(this, data, _);
        };
        return template.source = "function(" + (settings.variable || "obj") + "){\n" + source + "}", 
        template;
    }, _.chain = function(obj) {
        return _(obj).chain();
    };
    var result = function(obj) {
        return this._chain ? _(obj).chain() : obj;
    };
    _.mixin(_), each([ "pop", "push", "reverse", "shift", "sort", "splice", "unshift" ], function(name) {
        var method = ArrayProto[name];
        _.prototype[name] = function() {
            var obj = this._wrapped;
            return method.apply(obj, arguments), "shift" != name && "splice" != name || 0 !== obj.length || delete obj[0], 
            result.call(this, obj);
        };
    }), each([ "concat", "join", "slice" ], function(name) {
        var method = ArrayProto[name];
        _.prototype[name] = function() {
            return result.call(this, method.apply(this._wrapped, arguments));
        };
    }), _.extend(_.prototype, {
        chain: function() {
            return this._chain = !0, this;
        },
        value: function() {
            return this._wrapped;
        }
    }), "function" == typeof define && define.amd && define("underscore", [], function() {
        return _;
    });
}).call(this), function(root, factory) {
    if ("function" == typeof define && define.amd) define([ "underscore", "jquery", "exports" ], function(_, $, exports) {
        root.Backbone = factory(root, exports, _, $);
    }); else if ("undefined" != typeof exports) {
        var _ = require("underscore");
        factory(root, exports, _);
    } else root.Backbone = factory(root, {}, root._, root.jQuery || root.Zepto || root.ender || root.$);
}(this, function(root, Backbone, _, $) {
    var previousBackbone = root.Backbone, array = [], slice = (array.push, array.slice);
    array.splice;
    Backbone.VERSION = "1.1.2", Backbone.$ = $, Backbone.noConflict = function() {
        return root.Backbone = previousBackbone, this;
    }, Backbone.emulateHTTP = !1, Backbone.emulateJSON = !1;
    var Events = Backbone.Events = {
        on: function(name, callback, context) {
            if (!eventsApi(this, "on", name, [ callback, context ]) || !callback) return this;
            this._events || (this._events = {});
            var events = this._events[name] || (this._events[name] = []);
            return events.push({
                callback: callback,
                context: context,
                ctx: context || this
            }), this;
        },
        once: function(name, callback, context) {
            if (!eventsApi(this, "once", name, [ callback, context ]) || !callback) return this;
            var self = this, once = _.once(function() {
                self.off(name, once), callback.apply(this, arguments);
            });
            return once._callback = callback, this.on(name, once, context);
        },
        off: function(name, callback, context) {
            var retain, ev, events, names, i, l, j, k;
            if (!this._events || !eventsApi(this, "off", name, [ callback, context ])) return this;
            if (!name && !callback && !context) return this._events = void 0, this;
            for (names = name ? [ name ] : _.keys(this._events), i = 0, l = names.length; l > i; i++) if (name = names[i], 
            events = this._events[name]) {
                if (this._events[name] = retain = [], callback || context) for (j = 0, k = events.length; k > j; j++) ev = events[j], 
                (callback && callback !== ev.callback && callback !== ev.callback._callback || context && context !== ev.context) && retain.push(ev);
                retain.length || delete this._events[name];
            }
            return this;
        },
        trigger: function(name) {
            if (!this._events) return this;
            var args = slice.call(arguments, 1);
            if (!eventsApi(this, "trigger", name, args)) return this;
            var events = this._events[name], allEvents = this._events.all;
            return events && triggerEvents(events, args), allEvents && triggerEvents(allEvents, arguments), 
            this;
        },
        stopListening: function(obj, name, callback) {
            var listeningTo = this._listeningTo;
            if (!listeningTo) return this;
            var remove = !name && !callback;
            callback || "object" != typeof name || (callback = this), obj && ((listeningTo = {})[obj._listenId] = obj);
            for (var id in listeningTo) obj = listeningTo[id], obj.off(name, callback, this), 
            (remove || _.isEmpty(obj._events)) && delete this._listeningTo[id];
            return this;
        }
    }, eventSplitter = /\s+/, eventsApi = function(obj, action, name, rest) {
        if (!name) return !0;
        if ("object" == typeof name) {
            for (var key in name) obj[action].apply(obj, [ key, name[key] ].concat(rest));
            return !1;
        }
        if (eventSplitter.test(name)) {
            for (var names = name.split(eventSplitter), i = 0, l = names.length; l > i; i++) obj[action].apply(obj, [ names[i] ].concat(rest));
            return !1;
        }
        return !0;
    }, triggerEvents = function(events, args) {
        var ev, i = -1, l = events.length, a1 = args[0], a2 = args[1], a3 = args[2];
        switch (args.length) {
          case 0:
            for (;++i < l; ) (ev = events[i]).callback.call(ev.ctx);
            return;

          case 1:
            for (;++i < l; ) (ev = events[i]).callback.call(ev.ctx, a1);
            return;

          case 2:
            for (;++i < l; ) (ev = events[i]).callback.call(ev.ctx, a1, a2);
            return;

          case 3:
            for (;++i < l; ) (ev = events[i]).callback.call(ev.ctx, a1, a2, a3);
            return;

          default:
            for (;++i < l; ) (ev = events[i]).callback.apply(ev.ctx, args);
            return;
        }
    }, listenMethods = {
        listenTo: "on",
        listenToOnce: "once"
    };
    _.each(listenMethods, function(implementation, method) {
        Events[method] = function(obj, name, callback) {
            var listeningTo = this._listeningTo || (this._listeningTo = {}), id = obj._listenId || (obj._listenId = _.uniqueId("l"));
            return listeningTo[id] = obj, callback || "object" != typeof name || (callback = this), 
            obj[implementation](name, callback, this), this;
        };
    }), Events.bind = Events.on, Events.unbind = Events.off, _.extend(Backbone, Events);
    var Model = Backbone.Model = function(attributes, options) {
        var attrs = attributes || {};
        options || (options = {}), this.cid = _.uniqueId("c"), this.attributes = {}, options.collection && (this.collection = options.collection), 
        options.parse && (attrs = this.parse(attrs, options) || {}), attrs = _.defaults({}, attrs, _.result(this, "defaults")), 
        this.set(attrs, options), this.changed = {}, this.initialize.apply(this, arguments);
    };
    _.extend(Model.prototype, Events, {
        changed: null,
        validationError: null,
        idAttribute: "id",
        initialize: function() {},
        toJSON: function(options) {
            return _.clone(this.attributes);
        },
        sync: function() {
            return Backbone.sync.apply(this, arguments);
        },
        get: function(attr) {
            return this.attributes[attr];
        },
        escape: function(attr) {
            return _.escape(this.get(attr));
        },
        has: function(attr) {
            return null != this.get(attr);
        },
        set: function(key, val, options) {
            var attr, attrs, unset, changes, silent, changing, prev, current;
            if (null == key) return this;
            if ("object" == typeof key ? (attrs = key, options = val) : (attrs = {})[key] = val, 
            options || (options = {}), !this._validate(attrs, options)) return !1;
            unset = options.unset, silent = options.silent, changes = [], changing = this._changing, 
            this._changing = !0, changing || (this._previousAttributes = _.clone(this.attributes), 
            this.changed = {}), current = this.attributes, prev = this._previousAttributes, 
            this.idAttribute in attrs && (this.id = attrs[this.idAttribute]);
            for (attr in attrs) val = attrs[attr], _.isEqual(current[attr], val) || changes.push(attr), 
            _.isEqual(prev[attr], val) ? delete this.changed[attr] : this.changed[attr] = val, 
            unset ? delete current[attr] : current[attr] = val;
            if (!silent) {
                changes.length && (this._pending = options);
                for (var i = 0, l = changes.length; l > i; i++) this.trigger("change:" + changes[i], this, current[changes[i]], options);
            }
            if (changing) return this;
            if (!silent) for (;this._pending; ) options = this._pending, this._pending = !1, 
            this.trigger("change", this, options);
            return this._pending = !1, this._changing = !1, this;
        },
        unset: function(attr, options) {
            return this.set(attr, void 0, _.extend({}, options, {
                unset: !0
            }));
        },
        clear: function(options) {
            var attrs = {};
            for (var key in this.attributes) attrs[key] = void 0;
            return this.set(attrs, _.extend({}, options, {
                unset: !0
            }));
        },
        hasChanged: function(attr) {
            return null == attr ? !_.isEmpty(this.changed) : _.has(this.changed, attr);
        },
        changedAttributes: function(diff) {
            if (!diff) return this.hasChanged() ? _.clone(this.changed) : !1;
            var val, changed = !1, old = this._changing ? this._previousAttributes : this.attributes;
            for (var attr in diff) _.isEqual(old[attr], val = diff[attr]) || ((changed || (changed = {}))[attr] = val);
            return changed;
        },
        previous: function(attr) {
            return null != attr && this._previousAttributes ? this._previousAttributes[attr] : null;
        },
        previousAttributes: function() {
            return _.clone(this._previousAttributes);
        },
        fetch: function(options) {
            options = options ? _.clone(options) : {}, void 0 === options.parse && (options.parse = !0);
            var model = this, success = options.success;
            return options.success = function(resp) {
                return model.set(model.parse(resp, options), options) ? (success && success(model, resp, options), 
                void model.trigger("sync", model, resp, options)) : !1;
            }, wrapError(this, options), this.sync("read", this, options);
        },
        save: function(key, val, options) {
            var attrs, method, xhr, attributes = this.attributes;
            if (null == key || "object" == typeof key ? (attrs = key, options = val) : (attrs = {})[key] = val, 
            options = _.extend({
                validate: !0
            }, options), attrs && !options.wait) {
                if (!this.set(attrs, options)) return !1;
            } else if (!this._validate(attrs, options)) return !1;
            attrs && options.wait && (this.attributes = _.extend({}, attributes, attrs)), void 0 === options.parse && (options.parse = !0);
            var model = this, success = options.success;
            return options.success = function(resp) {
                model.attributes = attributes;
                var serverAttrs = model.parse(resp, options);
                return options.wait && (serverAttrs = _.extend(attrs || {}, serverAttrs)), _.isObject(serverAttrs) && !model.set(serverAttrs, options) ? !1 : (success && success(model, resp, options), 
                void model.trigger("sync", model, resp, options));
            }, wrapError(this, options), method = this.isNew() ? "create" : options.patch ? "patch" : "update", 
            "patch" === method && (options.attrs = attrs), xhr = this.sync(method, this, options), 
            attrs && options.wait && (this.attributes = attributes), xhr;
        },
        destroy: function(options) {
            options = options ? _.clone(options) : {};
            var model = this, success = options.success, destroy = function() {
                model.trigger("destroy", model, model.collection, options);
            };
            if (options.success = function(resp) {
                (options.wait || model.isNew()) && destroy(), success && success(model, resp, options), 
                model.isNew() || model.trigger("sync", model, resp, options);
            }, this.isNew()) return options.success(), !1;
            wrapError(this, options);
            var xhr = this.sync("delete", this, options);
            return options.wait || destroy(), xhr;
        },
        url: function() {
            var base = _.result(this, "urlRoot") || _.result(this.collection, "url") || urlError();
            return this.isNew() ? base : base.replace(/([^\/])$/, "$1/") + encodeURIComponent(this.id);
        },
        parse: function(resp, options) {
            return resp;
        },
        clone: function() {
            return new this.constructor(this.attributes);
        },
        isNew: function() {
            return !this.has(this.idAttribute);
        },
        isValid: function(options) {
            return this._validate({}, _.extend(options || {}, {
                validate: !0
            }));
        },
        _validate: function(attrs, options) {
            if (!options.validate || !this.validate) return !0;
            attrs = _.extend({}, this.attributes, attrs);
            var error = this.validationError = this.validate(attrs, options) || null;
            return error ? (this.trigger("invalid", this, error, _.extend(options, {
                validationError: error
            })), !1) : !0;
        }
    });
    var modelMethods = [ "keys", "values", "pairs", "invert", "pick", "omit" ];
    _.each(modelMethods, function(method) {
        Model.prototype[method] = function() {
            var args = slice.call(arguments);
            return args.unshift(this.attributes), _[method].apply(_, args);
        };
    });
    var Collection = Backbone.Collection = function(models, options) {
        options || (options = {}), options.model && (this.model = options.model), void 0 !== options.comparator && (this.comparator = options.comparator), 
        this._reset(), this.initialize.apply(this, arguments), models && this.reset(models, _.extend({
            silent: !0
        }, options));
    }, setOptions = {
        add: !0,
        remove: !0,
        merge: !0
    }, addOptions = {
        add: !0,
        remove: !1
    };
    _.extend(Collection.prototype, Events, {
        model: Model,
        initialize: function() {},
        toJSON: function(options) {
            return this.map(function(model) {
                return model.toJSON(options);
            });
        },
        sync: function() {
            return Backbone.sync.apply(this, arguments);
        },
        add: function(models, options) {
            return this.set(models, _.extend({
                merge: !1
            }, options, addOptions));
        },
        remove: function(models, options) {
            var singular = !_.isArray(models);
            models = singular ? [ models ] : _.clone(models), options || (options = {});
            var i, l, index, model;
            for (i = 0, l = models.length; l > i; i++) model = models[i] = this.get(models[i]), 
            model && (delete this._byId[model.id], delete this._byId[model.cid], index = this.indexOf(model), 
            this.models.splice(index, 1), this.length--, options.silent || (options.index = index, 
            model.trigger("remove", model, this, options)), this._removeReference(model, options));
            return singular ? models[0] : models;
        },
        set: function(models, options) {
            options = _.defaults({}, options, setOptions), options.parse && (models = this.parse(models, options));
            var singular = !_.isArray(models);
            models = singular ? models ? [ models ] : [] : _.clone(models);
            var i, l, id, model, attrs, existing, sort, at = options.at, targetModel = this.model, sortable = this.comparator && null == at && options.sort !== !1, sortAttr = _.isString(this.comparator) ? this.comparator : null, toAdd = [], toRemove = [], modelMap = {}, add = options.add, merge = options.merge, remove = options.remove, order = !sortable && add && remove ? [] : !1;
            for (i = 0, l = models.length; l > i; i++) {
                if (attrs = models[i] || {}, id = attrs instanceof Model ? model = attrs : attrs[targetModel.prototype.idAttribute || "id"], 
                existing = this.get(id)) remove && (modelMap[existing.cid] = !0), merge && (attrs = attrs === model ? model.attributes : attrs, 
                options.parse && (attrs = existing.parse(attrs, options)), existing.set(attrs, options), 
                sortable && !sort && existing.hasChanged(sortAttr) && (sort = !0)), models[i] = existing; else if (add) {
                    if (model = models[i] = this._prepareModel(attrs, options), !model) continue;
                    toAdd.push(model), this._addReference(model, options);
                }
                model = existing || model, !order || !model.isNew() && modelMap[model.id] || order.push(model), 
                modelMap[model.id] = !0;
            }
            if (remove) {
                for (i = 0, l = this.length; l > i; ++i) modelMap[(model = this.models[i]).cid] || toRemove.push(model);
                toRemove.length && this.remove(toRemove, options);
            }
            if (toAdd.length || order && order.length) if (sortable && (sort = !0), this.length += toAdd.length, 
            null != at) for (i = 0, l = toAdd.length; l > i; i++) this.models.splice(at + i, 0, toAdd[i]); else {
                order && (this.models.length = 0);
                var orderedModels = order || toAdd;
                for (i = 0, l = orderedModels.length; l > i; i++) this.models.push(orderedModels[i]);
            }
            if (sort && this.sort({
                silent: !0
            }), !options.silent) {
                for (i = 0, l = toAdd.length; l > i; i++) (model = toAdd[i]).trigger("add", model, this, options);
                (sort || order && order.length) && this.trigger("sort", this, options);
            }
            return singular ? models[0] : models;
        },
        reset: function(models, options) {
            options || (options = {});
            for (var i = 0, l = this.models.length; l > i; i++) this._removeReference(this.models[i], options);
            return options.previousModels = this.models, this._reset(), models = this.add(models, _.extend({
                silent: !0
            }, options)), options.silent || this.trigger("reset", this, options), models;
        },
        push: function(model, options) {
            return this.add(model, _.extend({
                at: this.length
            }, options));
        },
        pop: function(options) {
            var model = this.at(this.length - 1);
            return this.remove(model, options), model;
        },
        unshift: function(model, options) {
            return this.add(model, _.extend({
                at: 0
            }, options));
        },
        shift: function(options) {
            var model = this.at(0);
            return this.remove(model, options), model;
        },
        slice: function() {
            return slice.apply(this.models, arguments);
        },
        get: function(obj) {
            return null == obj ? void 0 : this._byId[obj] || this._byId[obj.id] || this._byId[obj.cid];
        },
        at: function(index) {
            return this.models[index];
        },
        where: function(attrs, first) {
            return _.isEmpty(attrs) ? first ? void 0 : [] : this[first ? "find" : "filter"](function(model) {
                for (var key in attrs) if (attrs[key] !== model.get(key)) return !1;
                return !0;
            });
        },
        findWhere: function(attrs) {
            return this.where(attrs, !0);
        },
        sort: function(options) {
            if (!this.comparator) throw new Error("Cannot sort a set without a comparator");
            return options || (options = {}), _.isString(this.comparator) || 1 === this.comparator.length ? this.models = this.sortBy(this.comparator, this) : this.models.sort(_.bind(this.comparator, this)), 
            options.silent || this.trigger("sort", this, options), this;
        },
        pluck: function(attr) {
            return _.invoke(this.models, "get", attr);
        },
        fetch: function(options) {
            options = options ? _.clone(options) : {}, void 0 === options.parse && (options.parse = !0);
            var success = options.success, collection = this;
            return options.success = function(resp) {
                var method = options.reset ? "reset" : "set";
                collection[method](resp, options), success && success(collection, resp, options), 
                collection.trigger("sync", collection, resp, options);
            }, wrapError(this, options), this.sync("read", this, options);
        },
        create: function(model, options) {
            if (options = options ? _.clone(options) : {}, !(model = this._prepareModel(model, options))) return !1;
            options.wait || this.add(model, options);
            var collection = this, success = options.success;
            return options.success = function(model, resp) {
                options.wait && collection.add(model, options), success && success(model, resp, options);
            }, model.save(null, options), model;
        },
        parse: function(resp, options) {
            return resp;
        },
        clone: function() {
            return new this.constructor(this.models);
        },
        _reset: function() {
            this.length = 0, this.models = [], this._byId = {};
        },
        _prepareModel: function(attrs, options) {
            if (attrs instanceof Model) return attrs;
            options = options ? _.clone(options) : {}, options.collection = this;
            var model = new this.model(attrs, options);
            return model.validationError ? (this.trigger("invalid", this, model.validationError, options), 
            !1) : model;
        },
        _addReference: function(model, options) {
            this._byId[model.cid] = model, null != model.id && (this._byId[model.id] = model), 
            model.collection || (model.collection = this), model.on("all", this._onModelEvent, this);
        },
        _removeReference: function(model, options) {
            this === model.collection && delete model.collection, model.off("all", this._onModelEvent, this);
        },
        _onModelEvent: function(event, model, collection, options) {
            ("add" !== event && "remove" !== event || collection === this) && ("destroy" === event && this.remove(model, options), 
            model && event === "change:" + model.idAttribute && (delete this._byId[model.previous(model.idAttribute)], 
            null != model.id && (this._byId[model.id] = model)), this.trigger.apply(this, arguments));
        }
    });
    var methods = [ "forEach", "each", "map", "collect", "reduce", "foldl", "inject", "reduceRight", "foldr", "find", "detect", "filter", "select", "reject", "every", "all", "some", "any", "include", "contains", "invoke", "max", "min", "toArray", "size", "first", "head", "take", "initial", "rest", "tail", "drop", "last", "without", "difference", "indexOf", "shuffle", "lastIndexOf", "isEmpty", "chain", "sample" ];
    _.each(methods, function(method) {
        Collection.prototype[method] = function() {
            var args = slice.call(arguments);
            return args.unshift(this.models), _[method].apply(_, args);
        };
    });
    var attributeMethods = [ "groupBy", "countBy", "sortBy", "indexBy" ];
    _.each(attributeMethods, function(method) {
        Collection.prototype[method] = function(value, context) {
            var iterator = _.isFunction(value) ? value : function(model) {
                return model.get(value);
            };
            return _[method](this.models, iterator, context);
        };
    });
    var View = Backbone.View = function(options) {
        this.cid = _.uniqueId("view"), options || (options = {}), _.extend(this, _.pick(options, viewOptions)), 
        this._ensureElement(), this.initialize.apply(this, arguments), this.delegateEvents();
    }, delegateEventSplitter = /^(\S+)\s*(.*)$/, viewOptions = [ "model", "collection", "el", "id", "attributes", "className", "tagName", "events" ];
    _.extend(View.prototype, Events, {
        tagName: "div",
        $: function(selector) {
            return this.$el.find(selector);
        },
        initialize: function() {},
        render: function() {
            return this;
        },
        remove: function() {
            return this.$el.remove(), this.stopListening(), this;
        },
        setElement: function(element, delegate) {
            return this.$el && this.undelegateEvents(), this.$el = element instanceof Backbone.$ ? element : Backbone.$(element), 
            this.el = this.$el[0], delegate !== !1 && this.delegateEvents(), this;
        },
        delegateEvents: function(events) {
            if (!events && !(events = _.result(this, "events"))) return this;
            this.undelegateEvents();
            for (var key in events) {
                var method = events[key];
                if (_.isFunction(method) || (method = this[events[key]]), method) {
                    var match = key.match(delegateEventSplitter), eventName = match[1], selector = match[2];
                    method = _.bind(method, this), eventName += ".delegateEvents" + this.cid, "" === selector ? this.$el.on(eventName, method) : this.$el.on(eventName, selector, method);
                }
            }
            return this;
        },
        undelegateEvents: function() {
            return this.$el.off(".delegateEvents" + this.cid), this;
        },
        _ensureElement: function() {
            if (this.el) this.setElement(_.result(this, "el"), !1); else {
                var attrs = _.extend({}, _.result(this, "attributes"));
                this.id && (attrs.id = _.result(this, "id")), this.className && (attrs["class"] = _.result(this, "className"));
                var $el = Backbone.$("<" + _.result(this, "tagName") + ">").attr(attrs);
                this.setElement($el, !1);
            }
        }
    }), Backbone.sync = function(method, model, options) {
        var type = methodMap[method];
        _.defaults(options || (options = {}), {
            emulateHTTP: Backbone.emulateHTTP,
            emulateJSON: Backbone.emulateJSON
        });
        var params = {
            type: type,
            dataType: "json"
        };
        if (options.url || (params.url = _.result(model, "url") || urlError()), null != options.data || !model || "create" !== method && "update" !== method && "patch" !== method || (params.contentType = "application/json", 
        params.data = JSON.stringify(options.attrs || model.toJSON(options))), options.emulateJSON && (params.contentType = "application/x-www-form-urlencoded", 
        params.data = params.data ? {
            model: params.data
        } : {}), options.emulateHTTP && ("PUT" === type || "DELETE" === type || "PATCH" === type)) {
            params.type = "POST", options.emulateJSON && (params.data._method = type);
            var beforeSend = options.beforeSend;
            options.beforeSend = function(xhr) {
                return xhr.setRequestHeader("X-HTTP-Method-Override", type), beforeSend ? beforeSend.apply(this, arguments) : void 0;
            };
        }
        "GET" === params.type || options.emulateJSON || (params.processData = !1), "PATCH" === params.type && noXhrPatch && (params.xhr = function() {
            return new ActiveXObject("Microsoft.XMLHTTP");
        });
        var xhr = options.xhr = Backbone.ajax(_.extend(params, options));
        return model.trigger("request", model, xhr, options), xhr;
    };
    var noXhrPatch = !("undefined" == typeof window || !window.ActiveXObject || window.XMLHttpRequest && new XMLHttpRequest().dispatchEvent), methodMap = {
        create: "POST",
        update: "PUT",
        patch: "PATCH",
        "delete": "DELETE",
        read: "GET"
    };
    Backbone.ajax = function() {
        return Backbone.$.ajax.apply(Backbone.$, arguments);
    };
    var Router = Backbone.Router = function(options) {
        options || (options = {}), options.routes && (this.routes = options.routes), this._bindRoutes(), 
        this.initialize.apply(this, arguments);
    }, optionalParam = /\((.*?)\)/g, namedParam = /(\(\?)?:\w+/g, splatParam = /\*\w+/g, escapeRegExp = /[\-{}\[\]+?.,\\\^$|#\s]/g;
    _.extend(Router.prototype, Events, {
        initialize: function() {},
        route: function(route, name, callback) {
            _.isRegExp(route) || (route = this._routeToRegExp(route)), _.isFunction(name) && (callback = name, 
            name = ""), callback || (callback = this[name]);
            var router = this;
            return Backbone.history.route(route, function(fragment) {
                var args = router._extractParameters(route, fragment);
                router.execute(callback, args), router.trigger.apply(router, [ "route:" + name ].concat(args)), 
                router.trigger("route", name, args), Backbone.history.trigger("route", router, name, args);
            }), this;
        },
        execute: function(callback, args) {
            callback && callback.apply(this, args);
        },
        navigate: function(fragment, options) {
            return Backbone.history.navigate(fragment, options), this;
        },
        _bindRoutes: function() {
            if (this.routes) {
                this.routes = _.result(this, "routes");
                for (var route, routes = _.keys(this.routes); null != (route = routes.pop()); ) this.route(route, this.routes[route]);
            }
        },
        _routeToRegExp: function(route) {
            return route = route.replace(escapeRegExp, "\\$&").replace(optionalParam, "(?:$1)?").replace(namedParam, function(match, optional) {
                return optional ? match : "([^/?]+)";
            }).replace(splatParam, "([^?]*?)"), new RegExp("^" + route + "(?:\\?([\\s\\S]*))?$");
        },
        _extractParameters: function(route, fragment) {
            var params = route.exec(fragment).slice(1);
            return _.map(params, function(param, i) {
                return i === params.length - 1 ? param || null : param ? decodeURIComponent(param) : null;
            });
        }
    });
    var History = Backbone.History = function() {
        this.handlers = [], _.bindAll(this, "checkUrl"), "undefined" != typeof window && (this.location = window.location, 
        this.history = window.history);
    }, routeStripper = /^[#\/]|\s+$/g, rootStripper = /^\/+|\/+$/g, isExplorer = /msie [\w.]+/, trailingSlash = /\/$/, pathStripper = /#.*$/;
    History.started = !1, _.extend(History.prototype, Events, {
        interval: 50,
        atRoot: function() {
            return this.location.pathname.replace(/[^\/]$/, "$&/") === this.root;
        },
        getHash: function(window) {
            var match = (window || this).location.href.match(/#(.*)$/);
            return match ? match[1] : "";
        },
        getFragment: function(fragment, forcePushState) {
            if (null == fragment) if (this._hasPushState || !this._wantsHashChange || forcePushState) {
                fragment = decodeURI(this.location.pathname + this.location.search);
                var root = this.root.replace(trailingSlash, "");
                fragment.indexOf(root) || (fragment = fragment.slice(root.length));
            } else fragment = this.getHash();
            return fragment.replace(routeStripper, "");
        },
        start: function(options) {
            if (History.started) throw new Error("Backbone.history has already been started");
            History.started = !0, this.options = _.extend({
                root: "/"
            }, this.options, options), this.root = this.options.root, this._wantsHashChange = this.options.hashChange !== !1, 
            this._wantsPushState = !!this.options.pushState, this._hasPushState = !!(this.options.pushState && this.history && this.history.pushState);
            var fragment = this.getFragment(), docMode = document.documentMode, oldIE = isExplorer.exec(navigator.userAgent.toLowerCase()) && (!docMode || 7 >= docMode);
            if (this.root = ("/" + this.root + "/").replace(rootStripper, "/"), oldIE && this._wantsHashChange) {
                var frame = Backbone.$('<iframe src="javascript:0" tabindex="-1">');
                this.iframe = frame.hide().appendTo("body")[0].contentWindow, this.navigate(fragment);
            }
            this._hasPushState ? Backbone.$(window).on("popstate", this.checkUrl) : this._wantsHashChange && "onhashchange" in window && !oldIE ? Backbone.$(window).on("hashchange", this.checkUrl) : this._wantsHashChange && (this._checkUrlInterval = setInterval(this.checkUrl, this.interval)), 
            this.fragment = fragment;
            var loc = this.location;
            if (this._wantsHashChange && this._wantsPushState) {
                if (!this._hasPushState && !this.atRoot()) return this.fragment = this.getFragment(null, !0), 
                this.location.replace(this.root + "#" + this.fragment), !0;
                this._hasPushState && this.atRoot() && loc.hash && (this.fragment = this.getHash().replace(routeStripper, ""), 
                this.history.replaceState({}, document.title, this.root + this.fragment));
            }
            return this.options.silent ? void 0 : this.loadUrl();
        },
        stop: function() {
            Backbone.$(window).off("popstate", this.checkUrl).off("hashchange", this.checkUrl), 
            this._checkUrlInterval && clearInterval(this._checkUrlInterval), History.started = !1;
        },
        route: function(route, callback) {
            this.handlers.unshift({
                route: route,
                callback: callback
            });
        },
        checkUrl: function(e) {
            var current = this.getFragment();
            return current === this.fragment && this.iframe && (current = this.getFragment(this.getHash(this.iframe))), 
            current === this.fragment ? !1 : (this.iframe && this.navigate(current), void this.loadUrl());
        },
        loadUrl: function(fragment) {
            return fragment = this.fragment = this.getFragment(fragment), _.any(this.handlers, function(handler) {
                return handler.route.test(fragment) ? (handler.callback(fragment), !0) : void 0;
            });
        },
        navigate: function(fragment, options) {
            if (!History.started) return !1;
            options && options !== !0 || (options = {
                trigger: !!options
            });
            var url = this.root + (fragment = this.getFragment(fragment || ""));
            if (fragment = fragment.replace(pathStripper, ""), this.fragment !== fragment) {
                if (this.fragment = fragment, "" === fragment && "/" !== url && (url = url.slice(0, -1)), 
                this._hasPushState) this.history[options.replace ? "replaceState" : "pushState"]({}, document.title, url); else {
                    if (!this._wantsHashChange) return this.location.assign(url);
                    this._updateHash(this.location, fragment, options.replace), this.iframe && fragment !== this.getFragment(this.getHash(this.iframe)) && (options.replace || this.iframe.document.open().close(), 
                    this._updateHash(this.iframe.location, fragment, options.replace));
                }
                return options.trigger ? this.loadUrl(fragment) : void 0;
            }
        },
        _updateHash: function(location, fragment, replace) {
            if (replace) {
                var href = location.href.replace(/(javascript:|#).*$/, "");
                location.replace(href + "#" + fragment);
            } else location.hash = "#" + fragment;
        }
    }), Backbone.history = new History();
    var extend = function(protoProps, staticProps) {
        var child, parent = this;
        child = protoProps && _.has(protoProps, "constructor") ? protoProps.constructor : function() {
            return parent.apply(this, arguments);
        }, _.extend(child, parent, staticProps);
        var Surrogate = function() {
            this.constructor = child;
        };
        return Surrogate.prototype = parent.prototype, child.prototype = new Surrogate(), 
        protoProps && _.extend(child.prototype, protoProps), child.__super__ = parent.prototype, 
        child;
    };
    Model.extend = Collection.extend = Router.extend = View.extend = History.extend = extend;
    var urlError = function() {
        throw new Error('A "url" property or function must be specified');
    }, wrapError = function(model, options) {
        var error = options.error;
        options.error = function(resp) {
            error && error(model, resp, options), model.trigger("error", model, resp, options);
        };
    };
    return Backbone;
}), function(root, factory) {
    if ("function" == typeof define && define.amd) define([ "underscore", "backbone" ], function(_, Backbone) {
        factory(_, Backbone);
    }); else if ("undefined" != typeof exports && "function" == typeof require) {
        var _ = require("underscore"), Backbone = require("backbone");
        factory(_, Backbone);
    } else factory(root._, root.Backbone);
}(this, function(_, Backbone) {
    Backbone.Model.extend = Backbone.Collection.extend = Backbone.Router.extend = Backbone.View.extend = function(protoProps, classProps) {
        var child = inherits(this, protoProps, classProps);
        return child.extend = this.extend, child;
    };
    var unImplementedSuper = function(method) {
        throw "Super does not implement this method: " + method;
    }, fnTest = /\b_super\b/, makeWrapper = function(parentProto, name, fn) {
        var wrapper = function() {
            var tmp = this._super;
            this._super = parentProto[name] || unImplementedSuper(name);
            var ret;
            try {
                ret = fn.apply(this, arguments);
            } finally {
                this._super = tmp;
            }
            return ret;
        };
        for (var prop in fn) wrapper[prop] = fn[prop], delete fn[prop];
        return wrapper;
    }, ctor = function() {}, inherits = function(parent, protoProps, staticProps) {
        var child, parentProto = parent.prototype;
        if (child = protoProps && protoProps.hasOwnProperty("constructor") ? protoProps.constructor : function() {
            return parent.apply(this, arguments);
        }, _.extend(child, parent, staticProps), ctor.prototype = parentProto, child.prototype = new ctor(), 
        protoProps) {
            _.extend(child.prototype, protoProps);
            for (var name in protoProps) "function" == typeof protoProps[name] && fnTest.test(protoProps[name]) && (child.prototype[name] = makeWrapper(parentProto, name, protoProps[name]));
        }
        return staticProps && _.extend(child, staticProps), child.prototype.constructor = child, 
        child.__super__ = parentProto, child;
    };
    return inherits;
}), function(root, factory) {
    if ("function" == typeof define && define.amd) define([ "backbone", "underscore" ], function(Backbone, _) {
        return factory(Backbone, _);
    }); else if ("undefined" != typeof exports) {
        var Backbone = require("backbone"), _ = require("underscore");
        module.exports = factory(Backbone, _);
    } else factory(root.Backbone, root._);
}(this, function(Backbone, _) {
    "use strict";
    var previousWreqr = Backbone.Wreqr, Wreqr = Backbone.Wreqr = {};
    return Backbone.Wreqr.VERSION = "1.3.2", Backbone.Wreqr.noConflict = function() {
        return Backbone.Wreqr = previousWreqr, this;
    }, Wreqr.Handlers = function(Backbone, _) {
        var Handlers = function(options) {
            this.options = options, this._wreqrHandlers = {}, _.isFunction(this.initialize) && this.initialize(options);
        };
        return Handlers.extend = Backbone.Model.extend, _.extend(Handlers.prototype, Backbone.Events, {
            setHandlers: function(handlers) {
                _.each(handlers, function(handler, name) {
                    var context = null;
                    _.isObject(handler) && !_.isFunction(handler) && (context = handler.context, handler = handler.callback), 
                    this.setHandler(name, handler, context);
                }, this);
            },
            setHandler: function(name, handler, context) {
                var config = {
                    callback: handler,
                    context: context
                };
                this._wreqrHandlers[name] = config, this.trigger("handler:add", name, handler, context);
            },
            hasHandler: function(name) {
                return !!this._wreqrHandlers[name];
            },
            getHandler: function(name) {
                var config = this._wreqrHandlers[name];
                if (config) return function() {
                    return config.callback.apply(config.context, arguments);
                };
            },
            removeHandler: function(name) {
                delete this._wreqrHandlers[name];
            },
            removeAllHandlers: function() {
                this._wreqrHandlers = {};
            }
        }), Handlers;
    }(Backbone, _), Wreqr.CommandStorage = function() {
        var CommandStorage = function(options) {
            this.options = options, this._commands = {}, _.isFunction(this.initialize) && this.initialize(options);
        };
        return _.extend(CommandStorage.prototype, Backbone.Events, {
            getCommands: function(commandName) {
                var commands = this._commands[commandName];
                return commands || (commands = {
                    command: commandName,
                    instances: []
                }, this._commands[commandName] = commands), commands;
            },
            addCommand: function(commandName, args) {
                var command = this.getCommands(commandName);
                command.instances.push(args);
            },
            clearCommands: function(commandName) {
                var command = this.getCommands(commandName);
                command.instances = [];
            }
        }), CommandStorage;
    }(), Wreqr.Commands = function(Wreqr, _) {
        return Wreqr.Handlers.extend({
            storageType: Wreqr.CommandStorage,
            constructor: function(options) {
                this.options = options || {}, this._initializeStorage(this.options), this.on("handler:add", this._executeCommands, this), 
                Wreqr.Handlers.prototype.constructor.apply(this, arguments);
            },
            execute: function(name) {
                name = arguments[0];
                var args = _.rest(arguments);
                this.hasHandler(name) ? this.getHandler(name).apply(this, args) : this.storage.addCommand(name, args);
            },
            _executeCommands: function(name, handler, context) {
                var command = this.storage.getCommands(name);
                _.each(command.instances, function(args) {
                    handler.apply(context, args);
                }), this.storage.clearCommands(name);
            },
            _initializeStorage: function(options) {
                var storage, StorageType = options.storageType || this.storageType;
                storage = _.isFunction(StorageType) ? new StorageType() : StorageType, this.storage = storage;
            }
        });
    }(Wreqr, _), Wreqr.RequestResponse = function(Wreqr, _) {
        return Wreqr.Handlers.extend({
            request: function(name) {
                return this.hasHandler(name) ? this.getHandler(name).apply(this, _.rest(arguments)) : void 0;
            }
        });
    }(Wreqr, _), Wreqr.EventAggregator = function(Backbone, _) {
        var EA = function() {};
        return EA.extend = Backbone.Model.extend, _.extend(EA.prototype, Backbone.Events), 
        EA;
    }(Backbone, _), Wreqr.Channel = function(Wreqr) {
        var Channel = function(channelName) {
            this.vent = new Backbone.Wreqr.EventAggregator(), this.reqres = new Backbone.Wreqr.RequestResponse(), 
            this.commands = new Backbone.Wreqr.Commands(), this.channelName = channelName;
        };
        return _.extend(Channel.prototype, {
            reset: function() {
                return this.vent.off(), this.vent.stopListening(), this.reqres.removeAllHandlers(), 
                this.commands.removeAllHandlers(), this;
            },
            connectEvents: function(hash, context) {
                return this._connect("vent", hash, context), this;
            },
            connectCommands: function(hash, context) {
                return this._connect("commands", hash, context), this;
            },
            connectRequests: function(hash, context) {
                return this._connect("reqres", hash, context), this;
            },
            _connect: function(type, hash, context) {
                if (hash) {
                    context = context || this;
                    var method = "vent" === type ? "on" : "setHandler";
                    _.each(hash, function(fn, eventName) {
                        this[type][method](eventName, _.bind(fn, context));
                    }, this);
                }
            }
        }), Channel;
    }(Wreqr), Wreqr.radio = function(Wreqr, _) {
        var Radio = function() {
            this._channels = {}, this.vent = {}, this.commands = {}, this.reqres = {}, this._proxyMethods();
        };
        _.extend(Radio.prototype, {
            channel: function(channelName) {
                if (!channelName) throw new Error("Channel must receive a name");
                return this._getChannel(channelName);
            },
            _getChannel: function(channelName) {
                var channel = this._channels[channelName];
                return channel || (channel = new Wreqr.Channel(channelName), this._channels[channelName] = channel), 
                channel;
            },
            _proxyMethods: function() {
                _.each([ "vent", "commands", "reqres" ], function(system) {
                    _.each(messageSystems[system], function(method) {
                        this[system][method] = proxyMethod(this, system, method);
                    }, this);
                }, this);
            }
        });
        var messageSystems = {
            vent: [ "on", "off", "trigger", "once", "stopListening", "listenTo", "listenToOnce" ],
            commands: [ "execute", "setHandler", "setHandlers", "removeHandler", "removeAllHandlers" ],
            reqres: [ "request", "setHandler", "setHandlers", "removeHandler", "removeAllHandlers" ]
        }, proxyMethod = function(radio, system, method) {
            return function(channelName) {
                var messageSystem = radio._getChannel(channelName)[system];
                return messageSystem[method].apply(messageSystem, _.rest(arguments));
            };
        };
        return new Radio();
    }(Wreqr, _), Backbone.Wreqr;
}), function(root, factory) {
    if ("function" == typeof define && define.amd) define([ "backbone", "underscore" ], function(Backbone, _) {
        return factory(Backbone, _);
    }); else if ("undefined" != typeof exports) {
        var Backbone = require("backbone"), _ = require("underscore");
        module.exports = factory(Backbone, _);
    } else factory(root.Backbone, root._);
}(this, function(Backbone, _) {
    "use strict";
    var previousChildViewContainer = Backbone.ChildViewContainer;
    return Backbone.ChildViewContainer = function(Backbone, _) {
        var Container = function(views) {
            this._views = {}, this._indexByModel = {}, this._indexByCustom = {}, this._updateLength(), 
            _.each(views, this.add, this);
        };
        _.extend(Container.prototype, {
            add: function(view, customIndex) {
                var viewCid = view.cid;
                return this._views[viewCid] = view, view.model && (this._indexByModel[view.model.cid] = viewCid), 
                customIndex && (this._indexByCustom[customIndex] = viewCid), this._updateLength(), 
                this;
            },
            findByModel: function(model) {
                return this.findByModelCid(model.cid);
            },
            findByModelCid: function(modelCid) {
                var viewCid = this._indexByModel[modelCid];
                return this.findByCid(viewCid);
            },
            findByCustom: function(index) {
                var viewCid = this._indexByCustom[index];
                return this.findByCid(viewCid);
            },
            findByIndex: function(index) {
                return _.values(this._views)[index];
            },
            findByCid: function(cid) {
                return this._views[cid];
            },
            remove: function(view) {
                var viewCid = view.cid;
                return view.model && delete this._indexByModel[view.model.cid], _.any(this._indexByCustom, function(cid, key) {
                    return cid === viewCid ? (delete this._indexByCustom[key], !0) : void 0;
                }, this), delete this._views[viewCid], this._updateLength(), this;
            },
            call: function(method) {
                this.apply(method, _.tail(arguments));
            },
            apply: function(method, args) {
                _.each(this._views, function(view) {
                    _.isFunction(view[method]) && view[method].apply(view, args || []);
                });
            },
            _updateLength: function() {
                this.length = _.size(this._views);
            }
        });
        var methods = [ "forEach", "each", "map", "find", "detect", "filter", "select", "reject", "every", "all", "some", "any", "include", "contains", "invoke", "toArray", "first", "initial", "rest", "last", "without", "isEmpty", "pluck", "reduce" ];
        return _.each(methods, function(method) {
            Container.prototype[method] = function() {
                var views = _.values(this._views), args = [ views ].concat(_.toArray(arguments));
                return _[method].apply(_, args);
            };
        }), Container;
    }(Backbone, _), Backbone.ChildViewContainer.VERSION = "0.1.6", Backbone.ChildViewContainer.noConflict = function() {
        return Backbone.ChildViewContainer = previousChildViewContainer, this;
    }, Backbone.ChildViewContainer;
}), function(root, factory) {
    if ("function" == typeof define && define.amd) define([ "backbone", "underscore", "backbone.wreqr", "backbone.babysitter" ], function(Backbone, _) {
        return root.Marionette = root.Mn = factory(root, Backbone, _);
    }); else if ("undefined" != typeof exports) {
        var Backbone = require("backbone"), _ = require("underscore");
        require("backbone.wreqr"), require("backbone.babysitter");
        module.exports = factory(root, Backbone, _);
    } else root.Marionette = root.Mn = factory(root, root.Backbone, root._);
}(this, function(root, Backbone, _) {
    "use strict";
    var previousMarionette = root.Marionette, previousMn = root.Mn, Marionette = Backbone.Marionette = {};
    Marionette.VERSION = "2.4.1", Marionette.noConflict = function() {
        return root.Marionette = previousMarionette, root.Mn = previousMn, this;
    }, Marionette.Deferred = Backbone.$.Deferred, Marionette.FEATURES = {}, Marionette.isEnabled = function(name) {
        return !!Marionette.FEATURES[name];
    }, Marionette.extend = Backbone.Model.extend, Marionette.isNodeAttached = function(el) {
        return Backbone.$.contains(document.documentElement, el);
    }, Marionette.mergeOptions = function(options, keys) {
        options && _.extend(this, _.pick(options, keys));
    }, Marionette.getOption = function(target, optionName) {
        return target && optionName ? target.options && void 0 !== target.options[optionName] ? target.options[optionName] : target[optionName] : void 0;
    }, Marionette.proxyGetOption = function(optionName) {
        return Marionette.getOption(this, optionName);
    }, Marionette._getValue = function(value, context, params) {
        return _.isFunction(value) && (value = params ? value.apply(context, params) : value.call(context)), 
        value;
    }, Marionette.normalizeMethods = function(hash) {
        return _.reduce(hash, function(normalizedHash, method, name) {
            return _.isFunction(method) || (method = this[method]), method && (normalizedHash[name] = method), 
            normalizedHash;
        }, {}, this);
    }, Marionette.normalizeUIString = function(uiString, ui) {
        return uiString.replace(/@ui\.[a-zA-Z_$0-9]*/g, function(r) {
            return ui[r.slice(4)];
        });
    }, Marionette.normalizeUIKeys = function(hash, ui) {
        return _.reduce(hash, function(memo, val, key) {
            var normalizedKey = Marionette.normalizeUIString(key, ui);
            return memo[normalizedKey] = val, memo;
        }, {});
    }, Marionette.normalizeUIValues = function(hash, ui, properties) {
        return _.each(hash, function(val, key) {
            _.isString(val) ? hash[key] = Marionette.normalizeUIString(val, ui) : _.isObject(val) && _.isArray(properties) && (_.extend(val, Marionette.normalizeUIValues(_.pick(val, properties), ui)), 
            _.each(properties, function(property) {
                var propertyVal = val[property];
                _.isString(propertyVal) && (val[property] = Marionette.normalizeUIString(propertyVal, ui));
            }));
        }), hash;
    }, Marionette.actAsCollection = function(object, listProperty) {
        var methods = [ "forEach", "each", "map", "find", "detect", "filter", "select", "reject", "every", "all", "some", "any", "include", "contains", "invoke", "toArray", "first", "initial", "rest", "last", "without", "isEmpty", "pluck" ];
        _.each(methods, function(method) {
            object[method] = function() {
                var list = _.values(_.result(this, listProperty)), args = [ list ].concat(_.toArray(arguments));
                return _[method].apply(_, args);
            };
        });
    };
    var deprecate = Marionette.deprecate = function(message, test) {
        _.isObject(message) && (message = message.prev + " is going to be removed in the future. Please use " + message.next + " instead." + (message.url ? " See: " + message.url : "")), 
        void 0 !== test && test || deprecate._cache[message] || (deprecate._warn("Deprecation warning: " + message), 
        deprecate._cache[message] = !0);
    };
    deprecate._warn = "undefined" != typeof console && (console.warn || console.log) || function() {}, 
    deprecate._cache = {}, Marionette._triggerMethod = function() {
        function getEventName(match, prefix, eventName) {
            return eventName.toUpperCase();
        }
        var splitter = /(^|:)(\w)/gi;
        return function(context, event, args) {
            var noEventArg = arguments.length < 3;
            noEventArg && (args = event, event = args[0]);
            var result, methodName = "on" + event.replace(splitter, getEventName), method = context[methodName];
            return _.isFunction(method) && (result = method.apply(context, noEventArg ? _.rest(args) : args)), 
            _.isFunction(context.trigger) && (noEventArg + args.length > 1 ? context.trigger.apply(context, noEventArg ? args : [ event ].concat(_.drop(args, 0))) : context.trigger(event)), 
            result;
        };
    }(), Marionette.triggerMethod = function(event) {
        return Marionette._triggerMethod(this, arguments);
    }, Marionette.triggerMethodOn = function(context) {
        var fnc = _.isFunction(context.triggerMethod) ? context.triggerMethod : Marionette.triggerMethod;
        return fnc.apply(context, _.rest(arguments));
    }, Marionette.MonitorDOMRefresh = function(view) {
        function handleShow() {
            view._isShown = !0, triggerDOMRefresh();
        }
        function handleRender() {
            view._isRendered = !0, triggerDOMRefresh();
        }
        function triggerDOMRefresh() {
            view._isShown && view._isRendered && Marionette.isNodeAttached(view.el) && _.isFunction(view.triggerMethod) && view.triggerMethod("dom:refresh");
        }
        view.on({
            show: handleShow,
            render: handleRender
        });
    }, function(Marionette) {
        function bindFromStrings(target, entity, evt, methods) {
            var methodNames = methods.split(/\s+/);
            _.each(methodNames, function(methodName) {
                var method = target[methodName];
                if (!method) throw new Marionette.Error('Method "' + methodName + '" was configured as an event handler, but does not exist.');
                target.listenTo(entity, evt, method);
            });
        }
        function bindToFunction(target, entity, evt, method) {
            target.listenTo(entity, evt, method);
        }
        function unbindFromStrings(target, entity, evt, methods) {
            var methodNames = methods.split(/\s+/);
            _.each(methodNames, function(methodName) {
                var method = target[methodName];
                target.stopListening(entity, evt, method);
            });
        }
        function unbindToFunction(target, entity, evt, method) {
            target.stopListening(entity, evt, method);
        }
        function iterateEvents(target, entity, bindings, functionCallback, stringCallback) {
            if (entity && bindings) {
                if (!_.isObject(bindings)) throw new Marionette.Error({
                    message: "Bindings must be an object or function.",
                    url: "marionette.functions.html#marionettebindentityevents"
                });
                bindings = Marionette._getValue(bindings, target), _.each(bindings, function(methods, evt) {
                    _.isFunction(methods) ? functionCallback(target, entity, evt, methods) : stringCallback(target, entity, evt, methods);
                });
            }
        }
        Marionette.bindEntityEvents = function(target, entity, bindings) {
            iterateEvents(target, entity, bindings, bindToFunction, bindFromStrings);
        }, Marionette.unbindEntityEvents = function(target, entity, bindings) {
            iterateEvents(target, entity, bindings, unbindToFunction, unbindFromStrings);
        }, Marionette.proxyBindEntityEvents = function(entity, bindings) {
            return Marionette.bindEntityEvents(this, entity, bindings);
        }, Marionette.proxyUnbindEntityEvents = function(entity, bindings) {
            return Marionette.unbindEntityEvents(this, entity, bindings);
        };
    }(Marionette);
    var errorProps = [ "description", "fileName", "lineNumber", "name", "message", "number" ];
    return Marionette.Error = Marionette.extend.call(Error, {
        urlRoot: "http://marionettejs.com/docs/v" + Marionette.VERSION + "/",
        constructor: function(message, options) {
            _.isObject(message) ? (options = message, message = options.message) : options || (options = {});
            var error = Error.call(this, message);
            _.extend(this, _.pick(error, errorProps), _.pick(options, errorProps)), this.captureStackTrace(), 
            options.url && (this.url = this.urlRoot + options.url);
        },
        captureStackTrace: function() {
            Error.captureStackTrace && Error.captureStackTrace(this, Marionette.Error);
        },
        toString: function() {
            return this.name + ": " + this.message + (this.url ? " See: " + this.url : "");
        }
    }), Marionette.Error.extend = Marionette.extend, Marionette.Callbacks = function() {
        this._deferred = Marionette.Deferred(), this._callbacks = [];
    }, _.extend(Marionette.Callbacks.prototype, {
        add: function(callback, contextOverride) {
            var promise = _.result(this._deferred, "promise");
            this._callbacks.push({
                cb: callback,
                ctx: contextOverride
            }), promise.then(function(args) {
                contextOverride && (args.context = contextOverride), callback.call(args.context, args.options);
            });
        },
        run: function(options, context) {
            this._deferred.resolve({
                options: options,
                context: context
            });
        },
        reset: function() {
            var callbacks = this._callbacks;
            this._deferred = Marionette.Deferred(), this._callbacks = [], _.each(callbacks, function(cb) {
                this.add(cb.cb, cb.ctx);
            }, this);
        }
    }), Marionette.Controller = function(options) {
        this.options = options || {}, _.isFunction(this.initialize) && this.initialize(this.options);
    }, Marionette.Controller.extend = Marionette.extend, _.extend(Marionette.Controller.prototype, Backbone.Events, {
        destroy: function() {
            return Marionette._triggerMethod(this, "before:destroy", arguments), Marionette._triggerMethod(this, "destroy", arguments), 
            this.stopListening(), this.off(), this;
        },
        triggerMethod: Marionette.triggerMethod,
        mergeOptions: Marionette.mergeOptions,
        getOption: Marionette.proxyGetOption
    }), Marionette.Object = function(options) {
        this.options = _.extend({}, _.result(this, "options"), options), this.initialize.apply(this, arguments);
    }, Marionette.Object.extend = Marionette.extend, _.extend(Marionette.Object.prototype, Backbone.Events, {
        initialize: function() {},
        destroy: function() {
            return this.triggerMethod("before:destroy"), this.triggerMethod("destroy"), this.stopListening(), 
            this;
        },
        triggerMethod: Marionette.triggerMethod,
        mergeOptions: Marionette.mergeOptions,
        getOption: Marionette.proxyGetOption,
        bindEntityEvents: Marionette.proxyBindEntityEvents,
        unbindEntityEvents: Marionette.proxyUnbindEntityEvents
    }), Marionette.Region = Marionette.Object.extend({
        constructor: function(options) {
            if (this.options = options || {}, this.el = this.getOption("el"), this.el = this.el instanceof Backbone.$ ? this.el[0] : this.el, 
            !this.el) throw new Marionette.Error({
                name: "NoElError",
                message: 'An "el" must be specified for a region.'
            });
            this.$el = this.getEl(this.el), Marionette.Object.call(this, options);
        },
        show: function(view, options) {
            if (this._ensureElement()) {
                this._ensureViewIsIntact(view);
                var showOptions = options || {}, isDifferentView = view !== this.currentView, preventDestroy = !!showOptions.preventDestroy, forceShow = !!showOptions.forceShow, isChangingView = !!this.currentView, _shouldDestroyView = isDifferentView && !preventDestroy, _shouldShowView = isDifferentView || forceShow;
                if (isChangingView && this.triggerMethod("before:swapOut", this.currentView, this, options), 
                this.currentView && delete this.currentView._parent, _shouldDestroyView ? this.empty() : isChangingView && _shouldShowView && this.currentView.off("destroy", this.empty, this), 
                _shouldShowView) {
                    view.once("destroy", this.empty, this), view.render(), view._parent = this, isChangingView && this.triggerMethod("before:swap", view, this, options), 
                    this.triggerMethod("before:show", view, this, options), Marionette.triggerMethodOn(view, "before:show", view, this, options), 
                    isChangingView && this.triggerMethod("swapOut", this.currentView, this, options);
                    var attachedRegion = Marionette.isNodeAttached(this.el), displayedViews = [], triggerBeforeAttach = showOptions.triggerBeforeAttach || this.triggerBeforeAttach, triggerAttach = showOptions.triggerAttach || this.triggerAttach;
                    return attachedRegion && triggerBeforeAttach && (displayedViews = this._displayedViews(view), 
                    this._triggerAttach(displayedViews, "before:")), this.attachHtml(view), this.currentView = view, 
                    attachedRegion && triggerAttach && (displayedViews = this._displayedViews(view), 
                    this._triggerAttach(displayedViews)), isChangingView && this.triggerMethod("swap", view, this, options), 
                    this.triggerMethod("show", view, this, options), Marionette.triggerMethodOn(view, "show", view, this, options), 
                    this;
                }
                return this;
            }
        },
        triggerBeforeAttach: !0,
        triggerAttach: !0,
        _triggerAttach: function(views, prefix) {
            var eventName = (prefix || "") + "attach";
            _.each(views, function(view) {
                Marionette.triggerMethodOn(view, eventName, view, this);
            }, this);
        },
        _displayedViews: function(view) {
            return _.union([ view ], _.result(view, "_getNestedViews") || []);
        },
        _ensureElement: function() {
            if (_.isObject(this.el) || (this.$el = this.getEl(this.el), this.el = this.$el[0]), 
            !this.$el || 0 === this.$el.length) {
                if (this.getOption("allowMissingEl")) return !1;
                throw new Marionette.Error('An "el" ' + this.$el.selector + " must exist in DOM");
            }
            return !0;
        },
        _ensureViewIsIntact: function(view) {
            if (!view) throw new Marionette.Error({
                name: "ViewNotValid",
                message: "The view passed is undefined and therefore invalid. You must pass a view instance to show."
            });
            if (view.isDestroyed) throw new Marionette.Error({
                name: "ViewDestroyedError",
                message: 'View (cid: "' + view.cid + '") has already been destroyed and cannot be used.'
            });
        },
        getEl: function(el) {
            return Backbone.$(el, Marionette._getValue(this.options.parentEl, this));
        },
        attachHtml: function(view) {
            this.$el.contents().detach(), this.el.appendChild(view.el);
        },
        empty: function(options) {
            var view = this.currentView, preventDestroy = Marionette._getValue(options, "preventDestroy", this);
            return view ? (view.off("destroy", this.empty, this), this.triggerMethod("before:empty", view), 
            preventDestroy || this._destroyView(), this.triggerMethod("empty", view), delete this.currentView, 
            preventDestroy && this.$el.contents().detach(), this) : void 0;
        },
        _destroyView: function() {
            var view = this.currentView;
            view.destroy && !view.isDestroyed ? view.destroy() : view.remove && (view.remove(), 
            view.isDestroyed = !0);
        },
        attachView: function(view) {
            return this.currentView = view, this;
        },
        hasView: function() {
            return !!this.currentView;
        },
        reset: function() {
            return this.empty(), this.$el && (this.el = this.$el.selector), delete this.$el, 
            this;
        }
    }, {
        buildRegion: function(regionConfig, DefaultRegionClass) {
            if (_.isString(regionConfig)) return this._buildRegionFromSelector(regionConfig, DefaultRegionClass);
            if (regionConfig.selector || regionConfig.el || regionConfig.regionClass) return this._buildRegionFromObject(regionConfig, DefaultRegionClass);
            if (_.isFunction(regionConfig)) return this._buildRegionFromRegionClass(regionConfig);
            throw new Marionette.Error({
                message: "Improper region configuration type.",
                url: "marionette.region.html#region-configuration-types"
            });
        },
        _buildRegionFromSelector: function(selector, DefaultRegionClass) {
            return new DefaultRegionClass({
                el: selector
            });
        },
        _buildRegionFromObject: function(regionConfig, DefaultRegionClass) {
            var RegionClass = regionConfig.regionClass || DefaultRegionClass, options = _.omit(regionConfig, "selector", "regionClass");
            return regionConfig.selector && !options.el && (options.el = regionConfig.selector), 
            new RegionClass(options);
        },
        _buildRegionFromRegionClass: function(RegionClass) {
            return new RegionClass();
        }
    }), Marionette.RegionManager = Marionette.Controller.extend({
        constructor: function(options) {
            this._regions = {}, this.length = 0, Marionette.Controller.call(this, options), 
            this.addRegions(this.getOption("regions"));
        },
        addRegions: function(regionDefinitions, defaults) {
            return regionDefinitions = Marionette._getValue(regionDefinitions, this, arguments), 
            _.reduce(regionDefinitions, function(regions, definition, name) {
                return _.isString(definition) && (definition = {
                    selector: definition
                }), definition.selector && (definition = _.defaults({}, definition, defaults)), 
                regions[name] = this.addRegion(name, definition), regions;
            }, {}, this);
        },
        addRegion: function(name, definition) {
            var region;
            return region = definition instanceof Marionette.Region ? definition : Marionette.Region.buildRegion(definition, Marionette.Region), 
            this.triggerMethod("before:add:region", name, region), region._parent = this, this._store(name, region), 
            this.triggerMethod("add:region", name, region), region;
        },
        get: function(name) {
            return this._regions[name];
        },
        getRegions: function() {
            return _.clone(this._regions);
        },
        removeRegion: function(name) {
            var region = this._regions[name];
            return this._remove(name, region), region;
        },
        removeRegions: function() {
            var regions = this.getRegions();
            return _.each(this._regions, function(region, name) {
                this._remove(name, region);
            }, this), regions;
        },
        emptyRegions: function() {
            var regions = this.getRegions();
            return _.invoke(regions, "empty"), regions;
        },
        destroy: function() {
            return this.removeRegions(), Marionette.Controller.prototype.destroy.apply(this, arguments);
        },
        _store: function(name, region) {
            this._regions[name] || this.length++, this._regions[name] = region;
        },
        _remove: function(name, region) {
            this.triggerMethod("before:remove:region", name, region), region.empty(), region.stopListening(), 
            delete region._parent, delete this._regions[name], this.length--, this.triggerMethod("remove:region", name, region);
        }
    }), Marionette.actAsCollection(Marionette.RegionManager.prototype, "_regions"), 
    Marionette.TemplateCache = function(templateId) {
        this.templateId = templateId;
    }, _.extend(Marionette.TemplateCache, {
        templateCaches: {},
        get: function(templateId, options) {
            var cachedTemplate = this.templateCaches[templateId];
            return cachedTemplate || (cachedTemplate = new Marionette.TemplateCache(templateId), 
            this.templateCaches[templateId] = cachedTemplate), cachedTemplate.load(options);
        },
        clear: function() {
            var i, args = _.toArray(arguments), length = args.length;
            if (length > 0) for (i = 0; length > i; i++) delete this.templateCaches[args[i]]; else this.templateCaches = {};
        }
    }), _.extend(Marionette.TemplateCache.prototype, {
        load: function(options) {
            if (this.compiledTemplate) return this.compiledTemplate;
            var template = this.loadTemplate(this.templateId, options);
            return this.compiledTemplate = this.compileTemplate(template, options), this.compiledTemplate;
        },
        loadTemplate: function(templateId, options) {
            var template = Backbone.$(templateId).html();
            if (!template || 0 === template.length) throw new Marionette.Error({
                name: "NoTemplateError",
                message: 'Could not find template: "' + templateId + '"'
            });
            return template;
        },
        compileTemplate: function(rawTemplate, options) {
            return _.template(rawTemplate, options);
        }
    }), Marionette.Renderer = {
        render: function(template, data) {
            if (!template) throw new Marionette.Error({
                name: "TemplateNotFoundError",
                message: "Cannot render the template since its false, null or undefined."
            });
            var templateFunc = _.isFunction(template) ? template : Marionette.TemplateCache.get(template);
            return templateFunc(data);
        }
    }, Marionette.View = Backbone.View.extend({
        isDestroyed: !1,
        constructor: function(options) {
            _.bindAll(this, "render"), options = Marionette._getValue(options, this), this.options = _.extend({}, _.result(this, "options"), options), 
            this._behaviors = Marionette.Behaviors(this), Backbone.View.call(this, this.options), 
            Marionette.MonitorDOMRefresh(this);
        },
        getTemplate: function() {
            return this.getOption("template");
        },
        serializeModel: function(model) {
            return model.toJSON.apply(model, _.rest(arguments));
        },
        mixinTemplateHelpers: function(target) {
            target = target || {};
            var templateHelpers = this.getOption("templateHelpers");
            return templateHelpers = Marionette._getValue(templateHelpers, this), _.extend(target, templateHelpers);
        },
        normalizeUIKeys: function(hash) {
            var uiBindings = _.result(this, "_uiBindings");
            return Marionette.normalizeUIKeys(hash, uiBindings || _.result(this, "ui"));
        },
        normalizeUIValues: function(hash, properties) {
            var ui = _.result(this, "ui"), uiBindings = _.result(this, "_uiBindings");
            return Marionette.normalizeUIValues(hash, uiBindings || ui, properties);
        },
        configureTriggers: function() {
            if (this.triggers) {
                var triggers = this.normalizeUIKeys(_.result(this, "triggers"));
                return _.reduce(triggers, function(events, value, key) {
                    return events[key] = this._buildViewTrigger(value), events;
                }, {}, this);
            }
        },
        delegateEvents: function(events) {
            return this._delegateDOMEvents(events), this.bindEntityEvents(this.model, this.getOption("modelEvents")), 
            this.bindEntityEvents(this.collection, this.getOption("collectionEvents")), _.each(this._behaviors, function(behavior) {
                behavior.bindEntityEvents(this.model, behavior.getOption("modelEvents")), behavior.bindEntityEvents(this.collection, behavior.getOption("collectionEvents"));
            }, this), this;
        },
        _delegateDOMEvents: function(eventsArg) {
            var events = Marionette._getValue(eventsArg || this.events, this);
            events = this.normalizeUIKeys(events), _.isUndefined(eventsArg) && (this.events = events);
            var combinedEvents = {}, behaviorEvents = _.result(this, "behaviorEvents") || {}, triggers = this.configureTriggers(), behaviorTriggers = _.result(this, "behaviorTriggers") || {};
            _.extend(combinedEvents, behaviorEvents, events, triggers, behaviorTriggers), Backbone.View.prototype.delegateEvents.call(this, combinedEvents);
        },
        undelegateEvents: function() {
            return Backbone.View.prototype.undelegateEvents.apply(this, arguments), this.unbindEntityEvents(this.model, this.getOption("modelEvents")), 
            this.unbindEntityEvents(this.collection, this.getOption("collectionEvents")), _.each(this._behaviors, function(behavior) {
                behavior.unbindEntityEvents(this.model, behavior.getOption("modelEvents")), behavior.unbindEntityEvents(this.collection, behavior.getOption("collectionEvents"));
            }, this), this;
        },
        _ensureViewIsIntact: function() {
            if (this.isDestroyed) throw new Marionette.Error({
                name: "ViewDestroyedError",
                message: 'View (cid: "' + this.cid + '") has already been destroyed and cannot be used.'
            });
        },
        destroy: function() {
            if (this.isDestroyed) return this;
            var args = _.toArray(arguments);
            return this.triggerMethod.apply(this, [ "before:destroy" ].concat(args)), this.isDestroyed = !0, 
            this.triggerMethod.apply(this, [ "destroy" ].concat(args)), this.unbindUIElements(), 
            this.isRendered = !1, this.remove(), _.invoke(this._behaviors, "destroy", args), 
            this;
        },
        bindUIElements: function() {
            this._bindUIElements(), _.invoke(this._behaviors, this._bindUIElements);
        },
        _bindUIElements: function() {
            if (this.ui) {
                this._uiBindings || (this._uiBindings = this.ui);
                var bindings = _.result(this, "_uiBindings");
                this.ui = {}, _.each(bindings, function(selector, key) {
                    this.ui[key] = this.$(selector);
                }, this);
            }
        },
        unbindUIElements: function() {
            this._unbindUIElements(), _.invoke(this._behaviors, this._unbindUIElements);
        },
        _unbindUIElements: function() {
            this.ui && this._uiBindings && (_.each(this.ui, function($el, name) {
                delete this.ui[name];
            }, this), this.ui = this._uiBindings, delete this._uiBindings);
        },
        _buildViewTrigger: function(triggerDef) {
            var hasOptions = _.isObject(triggerDef), options = _.defaults({}, hasOptions ? triggerDef : {}, {
                preventDefault: !0,
                stopPropagation: !0
            }), eventName = hasOptions ? options.event : triggerDef;
            return function(e) {
                e && (e.preventDefault && options.preventDefault && e.preventDefault(), e.stopPropagation && options.stopPropagation && e.stopPropagation());
                var args = {
                    view: this,
                    model: this.model,
                    collection: this.collection
                };
                this.triggerMethod(eventName, args);
            };
        },
        setElement: function() {
            var ret = Backbone.View.prototype.setElement.apply(this, arguments);
            return _.invoke(this._behaviors, "proxyViewProperties", this), ret;
        },
        triggerMethod: function() {
            var ret = Marionette._triggerMethod(this, arguments);
            return this._triggerEventOnBehaviors(arguments), this._triggerEventOnParentLayout(arguments[0], _.rest(arguments)), 
            ret;
        },
        _triggerEventOnBehaviors: function(args) {
            for (var triggerMethod = Marionette._triggerMethod, behaviors = this._behaviors, i = 0, length = behaviors && behaviors.length; length > i; i++) triggerMethod(behaviors[i], args);
        },
        _triggerEventOnParentLayout: function(eventName, args) {
            var layoutView = this._parentLayoutView();
            if (layoutView) {
                var eventPrefix = Marionette.getOption(layoutView, "childViewEventPrefix"), prefixedEventName = eventPrefix + ":" + eventName;
                Marionette._triggerMethod(layoutView, [ prefixedEventName, this ].concat(args));
                var childEvents = Marionette.getOption(layoutView, "childEvents"), normalizedChildEvents = layoutView.normalizeMethods(childEvents);
                normalizedChildEvents && _.isFunction(normalizedChildEvents[eventName]) && normalizedChildEvents[eventName].apply(layoutView, [ this ].concat(args));
            }
        },
        _getImmediateChildren: function() {
            return [];
        },
        _getNestedViews: function() {
            var children = this._getImmediateChildren();
            return children.length ? _.reduce(children, function(memo, view) {
                return view._getNestedViews ? memo.concat(view._getNestedViews()) : memo;
            }, children) : children;
        },
        _getAncestors: function() {
            for (var ancestors = [], parent = this._parent; parent; ) ancestors.push(parent), 
            parent = parent._parent;
            return ancestors;
        },
        _parentLayoutView: function() {
            var ancestors = this._getAncestors();
            return _.find(ancestors, function(parent) {
                return parent instanceof Marionette.LayoutView;
            });
        },
        normalizeMethods: Marionette.normalizeMethods,
        mergeOptions: Marionette.mergeOptions,
        getOption: Marionette.proxyGetOption,
        bindEntityEvents: Marionette.proxyBindEntityEvents,
        unbindEntityEvents: Marionette.proxyUnbindEntityEvents
    }), Marionette.ItemView = Marionette.View.extend({
        constructor: function() {
            Marionette.View.apply(this, arguments);
        },
        serializeData: function() {
            if (!this.model && !this.collection) return {};
            var args = [ this.model || this.collection ];
            return arguments.length && args.push.apply(args, arguments), this.model ? this.serializeModel.apply(this, args) : {
                items: this.serializeCollection.apply(this, args)
            };
        },
        serializeCollection: function(collection) {
            return collection.toJSON.apply(collection, _.rest(arguments));
        },
        render: function() {
            return this._ensureViewIsIntact(), this.triggerMethod("before:render", this), this._renderTemplate(), 
            this.isRendered = !0, this.bindUIElements(), this.triggerMethod("render", this), 
            this;
        },
        _renderTemplate: function() {
            var template = this.getTemplate();
            if (template !== !1) {
                if (!template) throw new Marionette.Error({
                    name: "UndefinedTemplateError",
                    message: "Cannot render the template since it is null or undefined."
                });
                var data = this.mixinTemplateHelpers(this.serializeData()), html = Marionette.Renderer.render(template, data, this);
                return this.attachElContent(html), this;
            }
        },
        attachElContent: function(html) {
            return this.$el.html(html), this;
        }
    }), Marionette.CollectionView = Marionette.View.extend({
        childViewEventPrefix: "childview",
        sort: !0,
        constructor: function(options) {
            this.once("render", this._initialEvents), this._initChildViewStorage(), Marionette.View.apply(this, arguments), 
            this.on("show", this._onShowCalled), this.initRenderBuffer();
        },
        initRenderBuffer: function() {
            this._bufferedChildren = [];
        },
        startBuffering: function() {
            this.initRenderBuffer(), this.isBuffering = !0;
        },
        endBuffering: function() {
            this.isBuffering = !1, this._triggerBeforeShowBufferedChildren(), this.attachBuffer(this), 
            this._triggerShowBufferedChildren(), this.initRenderBuffer();
        },
        _triggerBeforeShowBufferedChildren: function() {
            this._isShown && _.each(this._bufferedChildren, _.partial(this._triggerMethodOnChild, "before:show"));
        },
        _triggerShowBufferedChildren: function() {
            this._isShown && (_.each(this._bufferedChildren, _.partial(this._triggerMethodOnChild, "show")), 
            this._bufferedChildren = []);
        },
        _triggerMethodOnChild: function(event, childView) {
            Marionette.triggerMethodOn(childView, event);
        },
        _initialEvents: function() {
            this.collection && (this.listenTo(this.collection, "add", this._onCollectionAdd), 
            this.listenTo(this.collection, "remove", this._onCollectionRemove), this.listenTo(this.collection, "reset", this.render), 
            this.getOption("sort") && this.listenTo(this.collection, "sort", this._sortViews));
        },
        _onCollectionAdd: function(child, collection, opts) {
            var index;
            if (index = void 0 !== opts.at ? opts.at : _.indexOf(this._filteredSortedModels(), child), 
            this._shouldAddChild(child, index)) {
                this.destroyEmptyView();
                var ChildView = this.getChildView(child);
                this.addChild(child, ChildView, index);
            }
        },
        _onCollectionRemove: function(model) {
            var view = this.children.findByModel(model);
            this.removeChildView(view), this.checkEmpty();
        },
        _onShowCalled: function() {
            this.children.each(_.partial(this._triggerMethodOnChild, "show"));
        },
        render: function() {
            return this._ensureViewIsIntact(), this.triggerMethod("before:render", this), this._renderChildren(), 
            this.isRendered = !0, this.triggerMethod("render", this), this;
        },
        reorder: function() {
            var children = this.children, models = this._filteredSortedModels(), modelsChanged = _.find(models, function(model) {
                return !children.findByModel(model);
            });
            if (modelsChanged) this.render(); else {
                var els = _.map(models, function(model) {
                    return children.findByModel(model).el;
                });
                this.triggerMethod("before:reorder"), this._appendReorderedChildren(els), this.triggerMethod("reorder");
            }
        },
        resortView: function() {
            Marionette.getOption(this, "reorderOnSort") ? this.reorder() : this.render();
        },
        _sortViews: function() {
            var models = this._filteredSortedModels(), orderChanged = _.find(models, function(item, index) {
                var view = this.children.findByModel(item);
                return !view || view._index !== index;
            }, this);
            orderChanged && this.resortView();
        },
        _emptyViewIndex: -1,
        _appendReorderedChildren: function(children) {
            this.$el.append(children);
        },
        _renderChildren: function() {
            this.destroyEmptyView(), this.destroyChildren(), this.isEmpty(this.collection) ? this.showEmptyView() : (this.triggerMethod("before:render:collection", this), 
            this.startBuffering(), this.showCollection(), this.endBuffering(), this.triggerMethod("render:collection", this), 
            this.children.isEmpty() && this.showEmptyView());
        },
        showCollection: function() {
            var ChildView, models = this._filteredSortedModels();
            _.each(models, function(child, index) {
                ChildView = this.getChildView(child), this.addChild(child, ChildView, index);
            }, this);
        },
        _filteredSortedModels: function() {
            var models, viewComparator = this.getViewComparator();
            return models = viewComparator ? _.isString(viewComparator) || 1 === viewComparator.length ? this.collection.sortBy(viewComparator, this) : _.clone(this.collection.models).sort(_.bind(viewComparator, this)) : this.collection.models, 
            this.getOption("filter") && (models = _.filter(models, function(model, index) {
                return this._shouldAddChild(model, index);
            }, this)), models;
        },
        showEmptyView: function() {
            var EmptyView = this.getEmptyView();
            if (EmptyView && !this._showingEmptyView) {
                this.triggerMethod("before:render:empty"), this._showingEmptyView = !0;
                var model = new Backbone.Model();
                this.addEmptyView(model, EmptyView), this.triggerMethod("render:empty");
            }
        },
        destroyEmptyView: function() {
            this._showingEmptyView && (this.triggerMethod("before:remove:empty"), this.destroyChildren(), 
            delete this._showingEmptyView, this.triggerMethod("remove:empty"));
        },
        getEmptyView: function() {
            return this.getOption("emptyView");
        },
        addEmptyView: function(child, EmptyView) {
            var emptyViewOptions = this.getOption("emptyViewOptions") || this.getOption("childViewOptions");
            _.isFunction(emptyViewOptions) && (emptyViewOptions = emptyViewOptions.call(this, child, this._emptyViewIndex));
            var view = this.buildChildView(child, EmptyView, emptyViewOptions);
            view._parent = this, this.proxyChildEvents(view), this._isShown && Marionette.triggerMethodOn(view, "before:show"), 
            this.children.add(view), this.renderChildView(view, this._emptyViewIndex), this._isShown && Marionette.triggerMethodOn(view, "show");
        },
        getChildView: function(child) {
            var childView = this.getOption("childView");
            if (!childView) throw new Marionette.Error({
                name: "NoChildViewError",
                message: 'A "childView" must be specified'
            });
            return childView;
        },
        addChild: function(child, ChildView, index) {
            var childViewOptions = this.getOption("childViewOptions");
            childViewOptions = Marionette._getValue(childViewOptions, this, [ child, index ]);
            var view = this.buildChildView(child, ChildView, childViewOptions);
            return this._updateIndices(view, !0, index), this._addChildView(view, index), view._parent = this, 
            view;
        },
        _updateIndices: function(view, increment, index) {
            this.getOption("sort") && (increment && (view._index = index), this.children.each(function(laterView) {
                laterView._index >= view._index && (laterView._index += increment ? 1 : -1);
            }));
        },
        _addChildView: function(view, index) {
            this.proxyChildEvents(view), this.triggerMethod("before:add:child", view), this._isShown && !this.isBuffering && Marionette.triggerMethodOn(view, "before:show"), 
            this.children.add(view), this.renderChildView(view, index), this._isShown && !this.isBuffering && Marionette.triggerMethodOn(view, "show"), 
            this.triggerMethod("add:child", view);
        },
        renderChildView: function(view, index) {
            return view.render(), this.attachHtml(this, view, index), view;
        },
        buildChildView: function(child, ChildViewClass, childViewOptions) {
            var options = _.extend({
                model: child
            }, childViewOptions);
            return new ChildViewClass(options);
        },
        removeChildView: function(view) {
            return view && (this.triggerMethod("before:remove:child", view), view.destroy ? view.destroy() : view.remove && view.remove(), 
            delete view._parent, this.stopListening(view), this.children.remove(view), this.triggerMethod("remove:child", view), 
            this._updateIndices(view, !1)), view;
        },
        isEmpty: function() {
            return !this.collection || 0 === this.collection.length;
        },
        checkEmpty: function() {
            this.isEmpty(this.collection) && this.showEmptyView();
        },
        attachBuffer: function(collectionView) {
            collectionView.$el.append(this._createBuffer(collectionView));
        },
        _createBuffer: function(collectionView) {
            var elBuffer = document.createDocumentFragment();
            return _.each(collectionView._bufferedChildren, function(b) {
                elBuffer.appendChild(b.el);
            }), elBuffer;
        },
        attachHtml: function(collectionView, childView, index) {
            collectionView.isBuffering ? collectionView._bufferedChildren.splice(index, 0, childView) : collectionView._insertBefore(childView, index) || collectionView._insertAfter(childView);
        },
        _insertBefore: function(childView, index) {
            var currentView, findPosition = this.getOption("sort") && index < this.children.length - 1;
            return findPosition && (currentView = this.children.find(function(view) {
                return view._index === index + 1;
            })), currentView ? (currentView.$el.before(childView.el), !0) : !1;
        },
        _insertAfter: function(childView) {
            this.$el.append(childView.el);
        },
        _initChildViewStorage: function() {
            this.children = new Backbone.ChildViewContainer();
        },
        destroy: function() {
            return this.isDestroyed ? this : (this.triggerMethod("before:destroy:collection"), 
            this.destroyChildren(), this.triggerMethod("destroy:collection"), Marionette.View.prototype.destroy.apply(this, arguments));
        },
        destroyChildren: function() {
            var childViews = this.children.map(_.identity);
            return this.children.each(this.removeChildView, this), this.checkEmpty(), childViews;
        },
        _shouldAddChild: function(child, index) {
            var filter = this.getOption("filter");
            return !_.isFunction(filter) || filter.call(this, child, index, this.collection);
        },
        proxyChildEvents: function(view) {
            var prefix = this.getOption("childViewEventPrefix");
            this.listenTo(view, "all", function() {
                var args = _.toArray(arguments), rootEvent = args[0], childEvents = this.normalizeMethods(_.result(this, "childEvents"));
                args[0] = prefix + ":" + rootEvent, args.splice(1, 0, view), "undefined" != typeof childEvents && _.isFunction(childEvents[rootEvent]) && childEvents[rootEvent].apply(this, args.slice(1)), 
                this.triggerMethod.apply(this, args);
            });
        },
        _getImmediateChildren: function() {
            return _.values(this.children._views);
        },
        getViewComparator: function() {
            return this.getOption("viewComparator");
        }
    }), Marionette.CompositeView = Marionette.CollectionView.extend({
        constructor: function() {
            Marionette.CollectionView.apply(this, arguments);
        },
        _initialEvents: function() {
            this.collection && (this.listenTo(this.collection, "add", this._onCollectionAdd), 
            this.listenTo(this.collection, "remove", this._onCollectionRemove), this.listenTo(this.collection, "reset", this._renderChildren), 
            this.getOption("sort") && this.listenTo(this.collection, "sort", this._sortViews));
        },
        getChildView: function(child) {
            var childView = this.getOption("childView") || this.constructor;
            return childView;
        },
        serializeData: function() {
            var data = {};
            return this.model && (data = _.partial(this.serializeModel, this.model).apply(this, arguments)), 
            data;
        },
        render: function() {
            return this._ensureViewIsIntact(), this._isRendering = !0, this.resetChildViewContainer(), 
            this.triggerMethod("before:render", this), this._renderTemplate(), this._renderChildren(), 
            this._isRendering = !1, this.isRendered = !0, this.triggerMethod("render", this), 
            this;
        },
        _renderChildren: function() {
            (this.isRendered || this._isRendering) && Marionette.CollectionView.prototype._renderChildren.call(this);
        },
        _renderTemplate: function() {
            var data = {};
            data = this.serializeData(), data = this.mixinTemplateHelpers(data), this.triggerMethod("before:render:template");
            var template = this.getTemplate(), html = Marionette.Renderer.render(template, data, this);
            this.attachElContent(html), this.bindUIElements(), this.triggerMethod("render:template");
        },
        attachElContent: function(html) {
            return this.$el.html(html), this;
        },
        attachBuffer: function(compositeView) {
            var $container = this.getChildViewContainer(compositeView);
            $container.append(this._createBuffer(compositeView));
        },
        _insertAfter: function(childView) {
            var $container = this.getChildViewContainer(this, childView);
            $container.append(childView.el);
        },
        _appendReorderedChildren: function(children) {
            var $container = this.getChildViewContainer(this);
            $container.append(children);
        },
        getChildViewContainer: function(containerView, childView) {
            if ("$childViewContainer" in containerView) return containerView.$childViewContainer;
            var container, childViewContainer = Marionette.getOption(containerView, "childViewContainer");
            if (childViewContainer) {
                var selector = Marionette._getValue(childViewContainer, containerView);
                if (container = "@" === selector.charAt(0) && containerView.ui ? containerView.ui[selector.substr(4)] : containerView.$(selector), 
                container.length <= 0) throw new Marionette.Error({
                    name: "ChildViewContainerMissingError",
                    message: 'The specified "childViewContainer" was not found: ' + containerView.childViewContainer
                });
            } else container = containerView.$el;
            return containerView.$childViewContainer = container, container;
        },
        resetChildViewContainer: function() {
            this.$childViewContainer && delete this.$childViewContainer;
        }
    }), Marionette.LayoutView = Marionette.ItemView.extend({
        regionClass: Marionette.Region,
        options: {
            destroyImmediate: !1
        },
        childViewEventPrefix: "childview",
        constructor: function(options) {
            options = options || {}, this._firstRender = !0, this._initializeRegions(options), 
            Marionette.ItemView.call(this, options);
        },
        render: function() {
            return this._ensureViewIsIntact(), this._firstRender ? this._firstRender = !1 : this._reInitializeRegions(), 
            Marionette.ItemView.prototype.render.apply(this, arguments);
        },
        destroy: function() {
            return this.isDestroyed ? this : (this.getOption("destroyImmediate") === !0 && this.$el.remove(), 
            this.regionManager.destroy(), Marionette.ItemView.prototype.destroy.apply(this, arguments));
        },
        showChildView: function(regionName, view) {
            return this.getRegion(regionName).show(view);
        },
        getChildView: function(regionName) {
            return this.getRegion(regionName).currentView;
        },
        addRegion: function(name, definition) {
            var regions = {};
            return regions[name] = definition, this._buildRegions(regions)[name];
        },
        addRegions: function(regions) {
            return this.regions = _.extend({}, this.regions, regions), this._buildRegions(regions);
        },
        removeRegion: function(name) {
            return delete this.regions[name], this.regionManager.removeRegion(name);
        },
        getRegion: function(region) {
            return this.regionManager.get(region);
        },
        getRegions: function() {
            return this.regionManager.getRegions();
        },
        _buildRegions: function(regions) {
            var defaults = {
                regionClass: this.getOption("regionClass"),
                parentEl: _.partial(_.result, this, "el")
            };
            return this.regionManager.addRegions(regions, defaults);
        },
        _initializeRegions: function(options) {
            var regions;
            this._initRegionManager(), regions = Marionette._getValue(this.regions, this, [ options ]) || {};
            var regionOptions = this.getOption.call(options, "regions");
            regionOptions = Marionette._getValue(regionOptions, this, [ options ]), _.extend(regions, regionOptions), 
            regions = this.normalizeUIValues(regions, [ "selector", "el" ]), this.addRegions(regions);
        },
        _reInitializeRegions: function() {
            this.regionManager.invoke("reset");
        },
        getRegionManager: function() {
            return new Marionette.RegionManager();
        },
        _initRegionManager: function() {
            this.regionManager = this.getRegionManager(), this.regionManager._parent = this, 
            this.listenTo(this.regionManager, "before:add:region", function(name) {
                this.triggerMethod("before:add:region", name);
            }), this.listenTo(this.regionManager, "add:region", function(name, region) {
                this[name] = region, this.triggerMethod("add:region", name, region);
            }), this.listenTo(this.regionManager, "before:remove:region", function(name) {
                this.triggerMethod("before:remove:region", name);
            }), this.listenTo(this.regionManager, "remove:region", function(name, region) {
                delete this[name], this.triggerMethod("remove:region", name, region);
            });
        },
        _getImmediateChildren: function() {
            return _.chain(this.regionManager.getRegions()).pluck("currentView").compact().value();
        }
    }), Marionette.Behavior = Marionette.Object.extend({
        constructor: function(options, view) {
            this.view = view, this.defaults = _.result(this, "defaults") || {}, this.options = _.extend({}, this.defaults, options), 
            this.ui = _.extend({}, _.result(view, "ui"), _.result(this, "ui")), Marionette.Object.apply(this, arguments);
        },
        $: function() {
            return this.view.$.apply(this.view, arguments);
        },
        destroy: function() {
            return this.stopListening(), this;
        },
        proxyViewProperties: function(view) {
            this.$el = view.$el, this.el = view.el;
        }
    }), Marionette.Behaviors = function(Marionette, _) {
        function Behaviors(view, behaviors) {
            return _.isObject(view.behaviors) ? (behaviors = Behaviors.parseBehaviors(view, behaviors || _.result(view, "behaviors")), 
            Behaviors.wrap(view, behaviors, _.keys(methods)), behaviors) : {};
        }
        function BehaviorTriggersBuilder(view, behaviors) {
            this._view = view, this._behaviors = behaviors, this._triggers = {};
        }
        function getBehaviorsUI(behavior) {
            return behavior._uiBindings || behavior.ui;
        }
        var delegateEventSplitter = /^(\S+)\s*(.*)$/, methods = {
            behaviorTriggers: function(behaviorTriggers, behaviors) {
                var triggerBuilder = new BehaviorTriggersBuilder(this, behaviors);
                return triggerBuilder.buildBehaviorTriggers();
            },
            behaviorEvents: function(behaviorEvents, behaviors) {
                var _behaviorsEvents = {};
                return _.each(behaviors, function(b, i) {
                    var _events = {}, behaviorEvents = _.clone(_.result(b, "events")) || {};
                    behaviorEvents = Marionette.normalizeUIKeys(behaviorEvents, getBehaviorsUI(b));
                    var j = 0;
                    _.each(behaviorEvents, function(behaviour, key) {
                        var match = key.match(delegateEventSplitter), eventName = match[1] + "." + [ this.cid, i, j++, " " ].join(""), selector = match[2], eventKey = eventName + selector, handler = _.isFunction(behaviour) ? behaviour : b[behaviour];
                        _events[eventKey] = _.bind(handler, b);
                    }, this), _behaviorsEvents = _.extend(_behaviorsEvents, _events);
                }, this), _behaviorsEvents;
            }
        };
        return _.extend(Behaviors, {
            behaviorsLookup: function() {
                throw new Marionette.Error({
                    message: "You must define where your behaviors are stored.",
                    url: "marionette.behaviors.html#behaviorslookup"
                });
            },
            getBehaviorClass: function(options, key) {
                return options.behaviorClass ? options.behaviorClass : Marionette._getValue(Behaviors.behaviorsLookup, this, [ options, key ])[key];
            },
            parseBehaviors: function(view, behaviors) {
                return _.chain(behaviors).map(function(options, key) {
                    var BehaviorClass = Behaviors.getBehaviorClass(options, key), behavior = new BehaviorClass(options, view), nestedBehaviors = Behaviors.parseBehaviors(view, _.result(behavior, "behaviors"));
                    return [ behavior ].concat(nestedBehaviors);
                }).flatten().value();
            },
            wrap: function(view, behaviors, methodNames) {
                _.each(methodNames, function(methodName) {
                    view[methodName] = _.partial(methods[methodName], view[methodName], behaviors);
                });
            }
        }), _.extend(BehaviorTriggersBuilder.prototype, {
            buildBehaviorTriggers: function() {
                return _.each(this._behaviors, this._buildTriggerHandlersForBehavior, this), this._triggers;
            },
            _buildTriggerHandlersForBehavior: function(behavior, i) {
                var triggersHash = _.clone(_.result(behavior, "triggers")) || {};
                triggersHash = Marionette.normalizeUIKeys(triggersHash, getBehaviorsUI(behavior)), 
                _.each(triggersHash, _.bind(this._setHandlerForBehavior, this, behavior, i));
            },
            _setHandlerForBehavior: function(behavior, i, eventName, trigger) {
                var triggerKey = trigger.replace(/^\S+/, function(triggerName) {
                    return triggerName + ".behaviortriggers" + i;
                });
                this._triggers[triggerKey] = this._view._buildViewTrigger(eventName);
            }
        }), Behaviors;
    }(Marionette, _), Marionette.AppRouter = Backbone.Router.extend({
        constructor: function(options) {
            this.options = options || {}, Backbone.Router.apply(this, arguments);
            var appRoutes = this.getOption("appRoutes"), controller = this._getController();
            this.processAppRoutes(controller, appRoutes), this.on("route", this._processOnRoute, this);
        },
        appRoute: function(route, methodName) {
            var controller = this._getController();
            this._addAppRoute(controller, route, methodName);
        },
        _processOnRoute: function(routeName, routeArgs) {
            if (_.isFunction(this.onRoute)) {
                var routePath = _.invert(this.getOption("appRoutes"))[routeName];
                this.onRoute(routeName, routePath, routeArgs);
            }
        },
        processAppRoutes: function(controller, appRoutes) {
            if (appRoutes) {
                var routeNames = _.keys(appRoutes).reverse();
                _.each(routeNames, function(route) {
                    this._addAppRoute(controller, route, appRoutes[route]);
                }, this);
            }
        },
        _getController: function() {
            return this.getOption("controller");
        },
        _addAppRoute: function(controller, route, methodName) {
            var method = controller[methodName];
            if (!method) throw new Marionette.Error('Method "' + methodName + '" was not found on the controller');
            this.route(route, methodName, _.bind(method, controller));
        },
        mergeOptions: Marionette.mergeOptions,
        getOption: Marionette.proxyGetOption,
        triggerMethod: Marionette.triggerMethod,
        bindEntityEvents: Marionette.proxyBindEntityEvents,
        unbindEntityEvents: Marionette.proxyUnbindEntityEvents
    }), Marionette.Application = Marionette.Object.extend({
        constructor: function(options) {
            this._initializeRegions(options), this._initCallbacks = new Marionette.Callbacks(), 
            this.submodules = {}, _.extend(this, options), this._initChannel(), Marionette.Object.call(this, options);
        },
        execute: function() {
            this.commands.execute.apply(this.commands, arguments);
        },
        request: function() {
            return this.reqres.request.apply(this.reqres, arguments);
        },
        addInitializer: function(initializer) {
            this._initCallbacks.add(initializer);
        },
        start: function(options) {
            this.triggerMethod("before:start", options), this._initCallbacks.run(options, this), 
            this.triggerMethod("start", options);
        },
        addRegions: function(regions) {
            return this._regionManager.addRegions(regions);
        },
        emptyRegions: function() {
            return this._regionManager.emptyRegions();
        },
        removeRegion: function(region) {
            return this._regionManager.removeRegion(region);
        },
        getRegion: function(region) {
            return this._regionManager.get(region);
        },
        getRegions: function() {
            return this._regionManager.getRegions();
        },
        module: function(moduleNames, moduleDefinition) {
            var ModuleClass = Marionette.Module.getClass(moduleDefinition), args = _.toArray(arguments);
            return args.unshift(this), ModuleClass.create.apply(ModuleClass, args);
        },
        getRegionManager: function() {
            return new Marionette.RegionManager();
        },
        _initializeRegions: function(options) {
            var regions = _.isFunction(this.regions) ? this.regions(options) : this.regions || {};
            this._initRegionManager();
            var optionRegions = Marionette.getOption(options, "regions");
            return _.isFunction(optionRegions) && (optionRegions = optionRegions.call(this, options)), 
            _.extend(regions, optionRegions), this.addRegions(regions), this;
        },
        _initRegionManager: function() {
            this._regionManager = this.getRegionManager(), this._regionManager._parent = this, 
            this.listenTo(this._regionManager, "before:add:region", function() {
                Marionette._triggerMethod(this, "before:add:region", arguments);
            }), this.listenTo(this._regionManager, "add:region", function(name, region) {
                this[name] = region, Marionette._triggerMethod(this, "add:region", arguments);
            }), this.listenTo(this._regionManager, "before:remove:region", function() {
                Marionette._triggerMethod(this, "before:remove:region", arguments);
            }), this.listenTo(this._regionManager, "remove:region", function(name) {
                delete this[name], Marionette._triggerMethod(this, "remove:region", arguments);
            });
        },
        _initChannel: function() {
            this.channelName = _.result(this, "channelName") || "global", this.channel = _.result(this, "channel") || Backbone.Wreqr.radio.channel(this.channelName), 
            this.vent = _.result(this, "vent") || this.channel.vent, this.commands = _.result(this, "commands") || this.channel.commands, 
            this.reqres = _.result(this, "reqres") || this.channel.reqres;
        }
    }), Marionette.Module = function(moduleName, app, options) {
        this.moduleName = moduleName, this.options = _.extend({}, this.options, options), 
        this.initialize = options.initialize || this.initialize, this.submodules = {}, this._setupInitializersAndFinalizers(), 
        this.app = app, _.isFunction(this.initialize) && this.initialize(moduleName, app, this.options);
    }, Marionette.Module.extend = Marionette.extend, _.extend(Marionette.Module.prototype, Backbone.Events, {
        startWithParent: !0,
        initialize: function() {},
        addInitializer: function(callback) {
            this._initializerCallbacks.add(callback);
        },
        addFinalizer: function(callback) {
            this._finalizerCallbacks.add(callback);
        },
        start: function(options) {
            this._isInitialized || (_.each(this.submodules, function(mod) {
                mod.startWithParent && mod.start(options);
            }), this.triggerMethod("before:start", options), this._initializerCallbacks.run(options, this), 
            this._isInitialized = !0, this.triggerMethod("start", options));
        },
        stop: function() {
            this._isInitialized && (this._isInitialized = !1, this.triggerMethod("before:stop"), 
            _.invoke(this.submodules, "stop"), this._finalizerCallbacks.run(void 0, this), this._initializerCallbacks.reset(), 
            this._finalizerCallbacks.reset(), this.triggerMethod("stop"));
        },
        addDefinition: function(moduleDefinition, customArgs) {
            this._runModuleDefinition(moduleDefinition, customArgs);
        },
        _runModuleDefinition: function(definition, customArgs) {
            if (definition) {
                var args = _.flatten([ this, this.app, Backbone, Marionette, Backbone.$, _, customArgs ]);
                definition.apply(this, args);
            }
        },
        _setupInitializersAndFinalizers: function() {
            this._initializerCallbacks = new Marionette.Callbacks(), this._finalizerCallbacks = new Marionette.Callbacks();
        },
        triggerMethod: Marionette.triggerMethod
    }), _.extend(Marionette.Module, {
        create: function(app, moduleNames, moduleDefinition) {
            var module = app, customArgs = _.drop(arguments, 3);
            moduleNames = moduleNames.split(".");
            var length = moduleNames.length, moduleDefinitions = [];
            return moduleDefinitions[length - 1] = moduleDefinition, _.each(moduleNames, function(moduleName, i) {
                var parentModule = module;
                module = this._getModule(parentModule, moduleName, app, moduleDefinition), this._addModuleDefinition(parentModule, module, moduleDefinitions[i], customArgs);
            }, this), module;
        },
        _getModule: function(parentModule, moduleName, app, def, args) {
            var options = _.extend({}, def), ModuleClass = this.getClass(def), module = parentModule[moduleName];
            return module || (module = new ModuleClass(moduleName, app, options), parentModule[moduleName] = module, 
            parentModule.submodules[moduleName] = module), module;
        },
        getClass: function(moduleDefinition) {
            var ModuleClass = Marionette.Module;
            return moduleDefinition ? moduleDefinition.prototype instanceof ModuleClass ? moduleDefinition : moduleDefinition.moduleClass || ModuleClass : ModuleClass;
        },
        _addModuleDefinition: function(parentModule, module, def, args) {
            var fn = this._getDefine(def), startWithParent = this._getStartWithParent(def, module);
            fn && module.addDefinition(fn, args), this._addStartWithParent(parentModule, module, startWithParent);
        },
        _getStartWithParent: function(def, module) {
            var swp;
            return _.isFunction(def) && def.prototype instanceof Marionette.Module ? (swp = module.constructor.prototype.startWithParent, 
            _.isUndefined(swp) ? !0 : swp) : _.isObject(def) ? (swp = def.startWithParent, _.isUndefined(swp) ? !0 : swp) : !0;
        },
        _getDefine: function(def) {
            return !_.isFunction(def) || def.prototype instanceof Marionette.Module ? _.isObject(def) ? def.define : null : def;
        },
        _addStartWithParent: function(parentModule, module, startWithParent) {
            module.startWithParent = module.startWithParent && startWithParent, module.startWithParent && !module.startWithParentIsConfigured && (module.startWithParentIsConfigured = !0, 
            parentModule.addInitializer(function(options) {
                module.startWithParent && module.start(options);
            }));
        }
    }), Marionette;
}), function(root, factory) {
    "object" == typeof exports && "object" == typeof module ? module.exports = factory() : "function" == typeof define && define.amd ? define([], factory) : "object" == typeof exports ? exports.Handlebars = factory() : root.Handlebars = factory();
}(this, function() {
    return function(modules) {
        function __webpack_require__(moduleId) {
            if (installedModules[moduleId]) return installedModules[moduleId].exports;
            var module = installedModules[moduleId] = {
                exports: {},
                id: moduleId,
                loaded: !1
            };
            return modules[moduleId].call(module.exports, module, module.exports, __webpack_require__), 
            module.loaded = !0, module.exports;
        }
        var installedModules = {};
        return __webpack_require__.m = modules, __webpack_require__.c = installedModules, 
        __webpack_require__.p = "", __webpack_require__(0);
    }([ function(module, exports, __webpack_require__) {
        "use strict";
        function create() {
            var hb = _create();
            return hb.compile = function(input, options) {
                return _handlebarsCompilerCompiler.compile(input, options, hb);
            }, hb.precompile = function(input, options) {
                return _handlebarsCompilerCompiler.precompile(input, options, hb);
            }, hb.AST = _handlebarsCompilerAst2["default"], hb.Compiler = _handlebarsCompilerCompiler.Compiler, 
            hb.JavaScriptCompiler = _handlebarsCompilerJavascriptCompiler2["default"], hb.Parser = _handlebarsCompilerBase.parser, 
            hb.parse = _handlebarsCompilerBase.parse, hb;
        }
        var _interopRequireDefault = __webpack_require__(1)["default"];
        exports.__esModule = !0;
        var _handlebarsRuntime = __webpack_require__(2), _handlebarsRuntime2 = _interopRequireDefault(_handlebarsRuntime), _handlebarsCompilerAst = __webpack_require__(21), _handlebarsCompilerAst2 = _interopRequireDefault(_handlebarsCompilerAst), _handlebarsCompilerBase = __webpack_require__(22), _handlebarsCompilerCompiler = __webpack_require__(27), _handlebarsCompilerJavascriptCompiler = __webpack_require__(28), _handlebarsCompilerJavascriptCompiler2 = _interopRequireDefault(_handlebarsCompilerJavascriptCompiler), _handlebarsCompilerVisitor = __webpack_require__(25), _handlebarsCompilerVisitor2 = _interopRequireDefault(_handlebarsCompilerVisitor), _handlebarsNoConflict = __webpack_require__(20), _handlebarsNoConflict2 = _interopRequireDefault(_handlebarsNoConflict), _create = _handlebarsRuntime2["default"].create, inst = create();
        inst.create = create, _handlebarsNoConflict2["default"](inst), inst.Visitor = _handlebarsCompilerVisitor2["default"], 
        inst["default"] = inst, exports["default"] = inst, module.exports = exports["default"];
    }, function(module, exports) {
        "use strict";
        exports["default"] = function(obj) {
            return obj && obj.__esModule ? obj : {
                "default": obj
            };
        }, exports.__esModule = !0;
    }, function(module, exports, __webpack_require__) {
        "use strict";
        function create() {
            var hb = new base.HandlebarsEnvironment();
            return Utils.extend(hb, base), hb.SafeString = _handlebarsSafeString2["default"], 
            hb.Exception = _handlebarsException2["default"], hb.Utils = Utils, hb.escapeExpression = Utils.escapeExpression, 
            hb.VM = runtime, hb.template = function(spec) {
                return runtime.template(spec, hb);
            }, hb;
        }
        var _interopRequireWildcard = __webpack_require__(3)["default"], _interopRequireDefault = __webpack_require__(1)["default"];
        exports.__esModule = !0;
        var _handlebarsBase = __webpack_require__(4), base = _interopRequireWildcard(_handlebarsBase), _handlebarsSafeString = __webpack_require__(18), _handlebarsSafeString2 = _interopRequireDefault(_handlebarsSafeString), _handlebarsException = __webpack_require__(6), _handlebarsException2 = _interopRequireDefault(_handlebarsException), _handlebarsUtils = __webpack_require__(5), Utils = _interopRequireWildcard(_handlebarsUtils), _handlebarsRuntime = __webpack_require__(19), runtime = _interopRequireWildcard(_handlebarsRuntime), _handlebarsNoConflict = __webpack_require__(20), _handlebarsNoConflict2 = _interopRequireDefault(_handlebarsNoConflict), inst = create();
        inst.create = create, _handlebarsNoConflict2["default"](inst), inst["default"] = inst, 
        exports["default"] = inst, module.exports = exports["default"];
    }, function(module, exports) {
        "use strict";
        exports["default"] = function(obj) {
            if (obj && obj.__esModule) return obj;
            var newObj = {};
            if (null != obj) for (var key in obj) Object.prototype.hasOwnProperty.call(obj, key) && (newObj[key] = obj[key]);
            return newObj["default"] = obj, newObj;
        }, exports.__esModule = !0;
    }, function(module, exports, __webpack_require__) {
        "use strict";
        function HandlebarsEnvironment(helpers, partials, decorators) {
            this.helpers = helpers || {}, this.partials = partials || {}, this.decorators = decorators || {}, 
            _helpers.registerDefaultHelpers(this), _decorators.registerDefaultDecorators(this);
        }
        var _interopRequireDefault = __webpack_require__(1)["default"];
        exports.__esModule = !0, exports.HandlebarsEnvironment = HandlebarsEnvironment;
        var _utils = __webpack_require__(5), _exception = __webpack_require__(6), _exception2 = _interopRequireDefault(_exception), _helpers = __webpack_require__(7), _decorators = __webpack_require__(15), _logger = __webpack_require__(17), _logger2 = _interopRequireDefault(_logger), VERSION = "4.0.2";
        exports.VERSION = VERSION;
        var COMPILER_REVISION = 7;
        exports.COMPILER_REVISION = COMPILER_REVISION;
        var REVISION_CHANGES = {
            1: "<= 1.0.rc.2",
            2: "== 1.0.0-rc.3",
            3: "== 1.0.0-rc.4",
            4: "== 1.x.x",
            5: "== 2.0.0-alpha.x",
            6: ">= 2.0.0-beta.1",
            7: ">= 4.0.0"
        };
        exports.REVISION_CHANGES = REVISION_CHANGES;
        var objectType = "[object Object]";
        HandlebarsEnvironment.prototype = {
            constructor: HandlebarsEnvironment,
            logger: _logger2["default"],
            log: _logger2["default"].log,
            registerHelper: function(name, fn) {
                if (_utils.toString.call(name) === objectType) {
                    if (fn) throw new _exception2["default"]("Arg not supported with multiple helpers");
                    _utils.extend(this.helpers, name);
                } else this.helpers[name] = fn;
            },
            unregisterHelper: function(name) {
                delete this.helpers[name];
            },
            registerPartial: function(name, partial) {
                if (_utils.toString.call(name) === objectType) _utils.extend(this.partials, name); else {
                    if ("undefined" == typeof partial) throw new _exception2["default"]("Attempting to register a partial as undefined");
                    this.partials[name] = partial;
                }
            },
            unregisterPartial: function(name) {
                delete this.partials[name];
            },
            registerDecorator: function(name, fn) {
                if (_utils.toString.call(name) === objectType) {
                    if (fn) throw new _exception2["default"]("Arg not supported with multiple decorators");
                    _utils.extend(this.decorators, name);
                } else this.decorators[name] = fn;
            },
            unregisterDecorator: function(name) {
                delete this.decorators[name];
            }
        };
        var log = _logger2["default"].log;
        exports.log = log, exports.createFrame = _utils.createFrame, exports.logger = _logger2["default"];
    }, function(module, exports) {
        "use strict";
        function escapeChar(chr) {
            return escape[chr];
        }
        function extend(obj) {
            for (var i = 1; i < arguments.length; i++) for (var key in arguments[i]) Object.prototype.hasOwnProperty.call(arguments[i], key) && (obj[key] = arguments[i][key]);
            return obj;
        }
        function indexOf(array, value) {
            for (var i = 0, len = array.length; len > i; i++) if (array[i] === value) return i;
            return -1;
        }
        function escapeExpression(string) {
            if ("string" != typeof string) {
                if (string && string.toHTML) return string.toHTML();
                if (null == string) return "";
                if (!string) return string + "";
                string = "" + string;
            }
            return possible.test(string) ? string.replace(badChars, escapeChar) : string;
        }
        function isEmpty(value) {
            return value || 0 === value ? isArray(value) && 0 === value.length ? !0 : !1 : !0;
        }
        function createFrame(object) {
            var frame = extend({}, object);
            return frame._parent = object, frame;
        }
        function blockParams(params, ids) {
            return params.path = ids, params;
        }
        function appendContextPath(contextPath, id) {
            return (contextPath ? contextPath + "." : "") + id;
        }
        exports.__esModule = !0, exports.extend = extend, exports.indexOf = indexOf, exports.escapeExpression = escapeExpression, 
        exports.isEmpty = isEmpty, exports.createFrame = createFrame, exports.blockParams = blockParams, 
        exports.appendContextPath = appendContextPath;
        var escape = {
            "&": "&amp;",
            "<": "&lt;",
            ">": "&gt;",
            '"': "&quot;",
            "'": "&#x27;",
            "`": "&#x60;",
            "=": "&#x3D;"
        }, badChars = /[&<>"'`=]/g, possible = /[&<>"'`=]/, toString = Object.prototype.toString;
        exports.toString = toString;
        var isFunction = function(value) {
            return "function" == typeof value;
        };
        isFunction(/x/) && (exports.isFunction = isFunction = function(value) {
            return "function" == typeof value && "[object Function]" === toString.call(value);
        }), exports.isFunction = isFunction;
        var isArray = Array.isArray || function(value) {
            return value && "object" == typeof value ? "[object Array]" === toString.call(value) : !1;
        };
        exports.isArray = isArray;
    }, function(module, exports) {
        "use strict";
        function Exception(message, node) {
            var loc = node && node.loc, line = void 0, column = void 0;
            loc && (line = loc.start.line, column = loc.start.column, message += " - " + line + ":" + column);
            for (var tmp = Error.prototype.constructor.call(this, message), idx = 0; idx < errorProps.length; idx++) this[errorProps[idx]] = tmp[errorProps[idx]];
            Error.captureStackTrace && Error.captureStackTrace(this, Exception), loc && (this.lineNumber = line, 
            this.column = column);
        }
        exports.__esModule = !0;
        var errorProps = [ "description", "fileName", "lineNumber", "message", "name", "number", "stack" ];
        Exception.prototype = new Error(), exports["default"] = Exception, module.exports = exports["default"];
    }, function(module, exports, __webpack_require__) {
        "use strict";
        function registerDefaultHelpers(instance) {
            _helpersBlockHelperMissing2["default"](instance), _helpersEach2["default"](instance), 
            _helpersHelperMissing2["default"](instance), _helpersIf2["default"](instance), _helpersLog2["default"](instance), 
            _helpersLookup2["default"](instance), _helpersWith2["default"](instance);
        }
        var _interopRequireDefault = __webpack_require__(1)["default"];
        exports.__esModule = !0, exports.registerDefaultHelpers = registerDefaultHelpers;
        var _helpersBlockHelperMissing = __webpack_require__(8), _helpersBlockHelperMissing2 = _interopRequireDefault(_helpersBlockHelperMissing), _helpersEach = __webpack_require__(9), _helpersEach2 = _interopRequireDefault(_helpersEach), _helpersHelperMissing = __webpack_require__(10), _helpersHelperMissing2 = _interopRequireDefault(_helpersHelperMissing), _helpersIf = __webpack_require__(11), _helpersIf2 = _interopRequireDefault(_helpersIf), _helpersLog = __webpack_require__(12), _helpersLog2 = _interopRequireDefault(_helpersLog), _helpersLookup = __webpack_require__(13), _helpersLookup2 = _interopRequireDefault(_helpersLookup), _helpersWith = __webpack_require__(14), _helpersWith2 = _interopRequireDefault(_helpersWith);
    }, function(module, exports, __webpack_require__) {
        "use strict";
        exports.__esModule = !0;
        var _utils = __webpack_require__(5);
        exports["default"] = function(instance) {
            instance.registerHelper("blockHelperMissing", function(context, options) {
                var inverse = options.inverse, fn = options.fn;
                if (context === !0) return fn(this);
                if (context === !1 || null == context) return inverse(this);
                if (_utils.isArray(context)) return context.length > 0 ? (options.ids && (options.ids = [ options.name ]), 
                instance.helpers.each(context, options)) : inverse(this);
                if (options.data && options.ids) {
                    var data = _utils.createFrame(options.data);
                    data.contextPath = _utils.appendContextPath(options.data.contextPath, options.name), 
                    options = {
                        data: data
                    };
                }
                return fn(context, options);
            });
        }, module.exports = exports["default"];
    }, function(module, exports, __webpack_require__) {
        "use strict";
        var _interopRequireDefault = __webpack_require__(1)["default"];
        exports.__esModule = !0;
        var _utils = __webpack_require__(5), _exception = __webpack_require__(6), _exception2 = _interopRequireDefault(_exception);
        exports["default"] = function(instance) {
            instance.registerHelper("each", function(context, options) {
                function execIteration(field, index, last) {
                    null != context[field] && (data && (data.key = field, data.index = index, data.first = 0 === index, 
                    data.last = !!last, contextPath && (data.contextPath = contextPath + field)), ret += fn(context[field], {
                        data: data,
                        blockParams: _utils.blockParams([ context[field], field ], [ contextPath + field, null ])
                    }));
                }
                if (!options) throw new _exception2["default"]("Must pass iterator to #each");
                var fn = options.fn, inverse = options.inverse, i = 0, ret = "", data = void 0, contextPath = void 0;
                if (options.data && options.ids && (contextPath = _utils.appendContextPath(options.data.contextPath, options.ids[0]) + "."), 
                _utils.isFunction(context) && (context = context.call(this)), options.data && (data = _utils.createFrame(options.data)), 
                context && "object" == typeof context) if (_utils.isArray(context)) for (var j = context.length; j > i; i++) execIteration(i, i, i === context.length - 1); else {
                    var priorKey = void 0;
                    for (var key in context) context.hasOwnProperty(key) && (void 0 !== priorKey && execIteration(priorKey, i - 1), 
                    priorKey = key, i++);
                    void 0 !== priorKey && execIteration(priorKey, i - 1, !0);
                }
                return 0 === i && (ret = inverse(this)), ret;
            });
        }, module.exports = exports["default"];
    }, function(module, exports, __webpack_require__) {
        "use strict";
        var _interopRequireDefault = __webpack_require__(1)["default"];
        exports.__esModule = !0;
        var _exception = __webpack_require__(6), _exception2 = _interopRequireDefault(_exception);
        exports["default"] = function(instance) {
            instance.registerHelper("helperMissing", function() {
                if (1 === arguments.length) return void 0;
                throw new _exception2["default"]('Missing helper: "' + arguments[arguments.length - 1].name + '"');
            });
        }, module.exports = exports["default"];
    }, function(module, exports, __webpack_require__) {
        "use strict";
        exports.__esModule = !0;
        var _utils = __webpack_require__(5);
        exports["default"] = function(instance) {
            instance.registerHelper("if", function(conditional, options) {
                return _utils.isFunction(conditional) && (conditional = conditional.call(this)), 
                !options.hash.includeZero && !conditional || _utils.isEmpty(conditional) ? options.inverse(this) : options.fn(this);
            }), instance.registerHelper("unless", function(conditional, options) {
                return instance.helpers["if"].call(this, conditional, {
                    fn: options.inverse,
                    inverse: options.fn,
                    hash: options.hash
                });
            });
        }, module.exports = exports["default"];
    }, function(module, exports) {
        "use strict";
        exports.__esModule = !0, exports["default"] = function(instance) {
            instance.registerHelper("log", function() {
                for (var args = [ void 0 ], options = arguments[arguments.length - 1], i = 0; i < arguments.length - 1; i++) args.push(arguments[i]);
                var level = 1;
                null != options.hash.level ? level = options.hash.level : options.data && null != options.data.level && (level = options.data.level), 
                args[0] = level, instance.log.apply(instance, args);
            });
        }, module.exports = exports["default"];
    }, function(module, exports) {
        "use strict";
        exports.__esModule = !0, exports["default"] = function(instance) {
            instance.registerHelper("lookup", function(obj, field) {
                return obj && obj[field];
            });
        }, module.exports = exports["default"];
    }, function(module, exports, __webpack_require__) {
        "use strict";
        exports.__esModule = !0;
        var _utils = __webpack_require__(5);
        exports["default"] = function(instance) {
            instance.registerHelper("with", function(context, options) {
                _utils.isFunction(context) && (context = context.call(this));
                var fn = options.fn;
                if (_utils.isEmpty(context)) return options.inverse(this);
                var data = options.data;
                return options.data && options.ids && (data = _utils.createFrame(options.data), 
                data.contextPath = _utils.appendContextPath(options.data.contextPath, options.ids[0])), 
                fn(context, {
                    data: data,
                    blockParams: _utils.blockParams([ context ], [ data && data.contextPath ])
                });
            });
        }, module.exports = exports["default"];
    }, function(module, exports, __webpack_require__) {
        "use strict";
        function registerDefaultDecorators(instance) {
            _decoratorsInline2["default"](instance);
        }
        var _interopRequireDefault = __webpack_require__(1)["default"];
        exports.__esModule = !0, exports.registerDefaultDecorators = registerDefaultDecorators;
        var _decoratorsInline = __webpack_require__(16), _decoratorsInline2 = _interopRequireDefault(_decoratorsInline);
    }, function(module, exports, __webpack_require__) {
        "use strict";
        exports.__esModule = !0;
        var _utils = __webpack_require__(5);
        exports["default"] = function(instance) {
            instance.registerDecorator("inline", function(fn, props, container, options) {
                var ret = fn;
                return props.partials || (props.partials = {}, ret = function(context, options) {
                    var original = container.partials;
                    container.partials = _utils.extend({}, original, props.partials);
                    var ret = fn(context, options);
                    return container.partials = original, ret;
                }), props.partials[options.args[0]] = options.fn, ret;
            });
        }, module.exports = exports["default"];
    }, function(module, exports) {
        "use strict";
        exports.__esModule = !0;
        var logger = {
            methodMap: [ "debug", "info", "warn", "error" ],
            level: "info",
            lookupLevel: function(level) {
                if ("string" == typeof level) {
                    var levelMap = logger.methodMap.indexOf(level.toLowerCase());
                    level = levelMap >= 0 ? levelMap : parseInt(level, 10);
                }
                return level;
            },
            log: function(level) {
                if (level = logger.lookupLevel(level), "undefined" != typeof console && logger.lookupLevel(logger.level) <= level) {
                    var method = logger.methodMap[level];
                    console[method] || (method = "log");
                    for (var _len = arguments.length, message = Array(_len > 1 ? _len - 1 : 0), _key = 1; _len > _key; _key++) message[_key - 1] = arguments[_key];
                    console[method].apply(console, message);
                }
            }
        };
        exports["default"] = logger, module.exports = exports["default"];
    }, function(module, exports) {
        "use strict";
        function SafeString(string) {
            this.string = string;
        }
        exports.__esModule = !0, SafeString.prototype.toString = SafeString.prototype.toHTML = function() {
            return "" + this.string;
        }, exports["default"] = SafeString, module.exports = exports["default"];
    }, function(module, exports, __webpack_require__) {
        "use strict";
        function checkRevision(compilerInfo) {
            var compilerRevision = compilerInfo && compilerInfo[0] || 1, currentRevision = _base.COMPILER_REVISION;
            if (compilerRevision !== currentRevision) {
                if (currentRevision > compilerRevision) {
                    var runtimeVersions = _base.REVISION_CHANGES[currentRevision], compilerVersions = _base.REVISION_CHANGES[compilerRevision];
                    throw new _exception2["default"]("Template was precompiled with an older version of Handlebars than the current runtime. Please update your precompiler to a newer version (" + runtimeVersions + ") or downgrade your runtime to an older version (" + compilerVersions + ").");
                }
                throw new _exception2["default"]("Template was precompiled with a newer version of Handlebars than the current runtime. Please update your runtime to a newer version (" + compilerInfo[1] + ").");
            }
        }
        function template(templateSpec, env) {
            function invokePartialWrapper(partial, context, options) {
                options.hash && (context = Utils.extend({}, context, options.hash), options.ids && (options.ids[0] = !0)), 
                partial = env.VM.resolvePartial.call(this, partial, context, options);
                var result = env.VM.invokePartial.call(this, partial, context, options);
                if (null == result && env.compile && (options.partials[options.name] = env.compile(partial, templateSpec.compilerOptions, env), 
                result = options.partials[options.name](context, options)), null != result) {
                    if (options.indent) {
                        for (var lines = result.split("\n"), i = 0, l = lines.length; l > i && (lines[i] || i + 1 !== l); i++) lines[i] = options.indent + lines[i];
                        result = lines.join("\n");
                    }
                    return result;
                }
                throw new _exception2["default"]("The partial " + options.name + " could not be compiled when running in runtime-only mode");
            }
            function ret(context) {
                function main(context) {
                    return "" + templateSpec.main(container, context, container.helpers, container.partials, data, blockParams, depths);
                }
                var options = arguments.length <= 1 || void 0 === arguments[1] ? {} : arguments[1], data = options.data;
                ret._setup(options), !options.partial && templateSpec.useData && (data = initData(context, data));
                var depths = void 0, blockParams = templateSpec.useBlockParams ? [] : void 0;
                return templateSpec.useDepths && (depths = options.depths ? context !== options.depths[0] ? [ context ].concat(options.depths) : options.depths : [ context ]), 
                (main = executeDecorators(templateSpec.main, main, container, options.depths || [], data, blockParams))(context, options);
            }
            if (!env) throw new _exception2["default"]("No environment passed to template");
            if (!templateSpec || !templateSpec.main) throw new _exception2["default"]("Unknown template object: " + typeof templateSpec);
            templateSpec.main.decorator = templateSpec.main_d, env.VM.checkRevision(templateSpec.compiler);
            var container = {
                strict: function(obj, name) {
                    if (!(name in obj)) throw new _exception2["default"]('"' + name + '" not defined in ' + obj);
                    return obj[name];
                },
                lookup: function(depths, name) {
                    for (var len = depths.length, i = 0; len > i; i++) if (depths[i] && null != depths[i][name]) return depths[i][name];
                },
                lambda: function(current, context) {
                    return "function" == typeof current ? current.call(context) : current;
                },
                escapeExpression: Utils.escapeExpression,
                invokePartial: invokePartialWrapper,
                fn: function(i) {
                    var ret = templateSpec[i];
                    return ret.decorator = templateSpec[i + "_d"], ret;
                },
                programs: [],
                program: function(i, data, declaredBlockParams, blockParams, depths) {
                    var programWrapper = this.programs[i], fn = this.fn(i);
                    return data || depths || blockParams || declaredBlockParams ? programWrapper = wrapProgram(this, i, fn, data, declaredBlockParams, blockParams, depths) : programWrapper || (programWrapper = this.programs[i] = wrapProgram(this, i, fn)), 
                    programWrapper;
                },
                data: function(value, depth) {
                    for (;value && depth--; ) value = value._parent;
                    return value;
                },
                merge: function(param, common) {
                    var obj = param || common;
                    return param && common && param !== common && (obj = Utils.extend({}, common, param)), 
                    obj;
                },
                noop: env.VM.noop,
                compilerInfo: templateSpec.compiler
            };
            return ret.isTop = !0, ret._setup = function(options) {
                options.partial ? (container.helpers = options.helpers, container.partials = options.partials, 
                container.decorators = options.decorators) : (container.helpers = container.merge(options.helpers, env.helpers), 
                templateSpec.usePartial && (container.partials = container.merge(options.partials, env.partials)), 
                (templateSpec.usePartial || templateSpec.useDecorators) && (container.decorators = container.merge(options.decorators, env.decorators)));
            }, ret._child = function(i, data, blockParams, depths) {
                if (templateSpec.useBlockParams && !blockParams) throw new _exception2["default"]("must pass block params");
                if (templateSpec.useDepths && !depths) throw new _exception2["default"]("must pass parent depths");
                return wrapProgram(container, i, templateSpec[i], data, 0, blockParams, depths);
            }, ret;
        }
        function wrapProgram(container, i, fn, data, declaredBlockParams, blockParams, depths) {
            function prog(context) {
                var options = arguments.length <= 1 || void 0 === arguments[1] ? {} : arguments[1], currentDepths = depths;
                return depths && context !== depths[0] && (currentDepths = [ context ].concat(depths)), 
                fn(container, context, container.helpers, container.partials, options.data || data, blockParams && [ options.blockParams ].concat(blockParams), currentDepths);
            }
            return prog = executeDecorators(fn, prog, container, depths, data, blockParams), 
            prog.program = i, prog.depth = depths ? depths.length : 0, prog.blockParams = declaredBlockParams || 0, 
            prog;
        }
        function resolvePartial(partial, context, options) {
            return partial ? partial.call || options.name || (options.name = partial, partial = options.partials[partial]) : partial = "@partial-block" === options.name ? options.data["partial-block"] : options.partials[options.name], 
            partial;
        }
        function invokePartial(partial, context, options) {
            options.partial = !0, options.ids && (options.data.contextPath = options.ids[0] || options.data.contextPath);
            var partialBlock = void 0;
            if (options.fn && options.fn !== noop && (partialBlock = options.data["partial-block"] = options.fn, 
            partialBlock.partials && (options.partials = Utils.extend({}, options.partials, partialBlock.partials))), 
            void 0 === partial && partialBlock && (partial = partialBlock), void 0 === partial) throw new _exception2["default"]("The partial " + options.name + " could not be found");
            return partial instanceof Function ? partial(context, options) : void 0;
        }
        function noop() {
            return "";
        }
        function initData(context, data) {
            return data && "root" in data || (data = data ? _base.createFrame(data) : {}, data.root = context), 
            data;
        }
        function executeDecorators(fn, prog, container, depths, data, blockParams) {
            if (fn.decorator) {
                var props = {};
                prog = fn.decorator(prog, props, container, depths && depths[0], data, blockParams, depths), 
                Utils.extend(prog, props);
            }
            return prog;
        }
        var _interopRequireWildcard = __webpack_require__(3)["default"], _interopRequireDefault = __webpack_require__(1)["default"];
        exports.__esModule = !0, exports.checkRevision = checkRevision, exports.template = template, 
        exports.wrapProgram = wrapProgram, exports.resolvePartial = resolvePartial, exports.invokePartial = invokePartial, 
        exports.noop = noop;
        var _utils = __webpack_require__(5), Utils = _interopRequireWildcard(_utils), _exception = __webpack_require__(6), _exception2 = _interopRequireDefault(_exception), _base = __webpack_require__(4);
    }, function(module, exports) {
        (function(global) {
            "use strict";
            exports.__esModule = !0, exports["default"] = function(Handlebars) {
                var root = "undefined" != typeof global ? global : window, $Handlebars = root.Handlebars;
                Handlebars.noConflict = function() {
                    root.Handlebars === Handlebars && (root.Handlebars = $Handlebars);
                };
            }, module.exports = exports["default"];
        }).call(exports, function() {
            return this;
        }());
    }, function(module, exports) {
        "use strict";
        exports.__esModule = !0;
        var AST = {
            helpers: {
                helperExpression: function(node) {
                    return "SubExpression" === node.type || ("MustacheStatement" === node.type || "BlockStatement" === node.type) && !!(node.params && node.params.length || node.hash);
                },
                scopedId: function(path) {
                    return /^\.|this\b/.test(path.original);
                },
                simpleId: function(path) {
                    return 1 === path.parts.length && !AST.helpers.scopedId(path) && !path.depth;
                }
            }
        };
        exports["default"] = AST, module.exports = exports["default"];
    }, function(module, exports, __webpack_require__) {
        "use strict";
        function parse(input, options) {
            if ("Program" === input.type) return input;
            _parser2["default"].yy = yy, yy.locInfo = function(locInfo) {
                return new yy.SourceLocation(options && options.srcName, locInfo);
            };
            var strip = new _whitespaceControl2["default"](options);
            return strip.accept(_parser2["default"].parse(input));
        }
        var _interopRequireDefault = __webpack_require__(1)["default"], _interopRequireWildcard = __webpack_require__(3)["default"];
        exports.__esModule = !0, exports.parse = parse;
        var _parser = __webpack_require__(23), _parser2 = _interopRequireDefault(_parser), _whitespaceControl = __webpack_require__(24), _whitespaceControl2 = _interopRequireDefault(_whitespaceControl), _helpers = __webpack_require__(26), Helpers = _interopRequireWildcard(_helpers), _utils = __webpack_require__(5);
        exports.parser = _parser2["default"];
        var yy = {};
        _utils.extend(yy, Helpers);
    }, function(module, exports) {
        "use strict";
        var handlebars = function() {
            function Parser() {
                this.yy = {};
            }
            var parser = {
                trace: function() {},
                yy: {},
                symbols_: {
                    error: 2,
                    root: 3,
                    program: 4,
                    EOF: 5,
                    program_repetition0: 6,
                    statement: 7,
                    mustache: 8,
                    block: 9,
                    rawBlock: 10,
                    partial: 11,
                    partialBlock: 12,
                    content: 13,
                    COMMENT: 14,
                    CONTENT: 15,
                    openRawBlock: 16,
                    rawBlock_repetition_plus0: 17,
                    END_RAW_BLOCK: 18,
                    OPEN_RAW_BLOCK: 19,
                    helperName: 20,
                    openRawBlock_repetition0: 21,
                    openRawBlock_option0: 22,
                    CLOSE_RAW_BLOCK: 23,
                    openBlock: 24,
                    block_option0: 25,
                    closeBlock: 26,
                    openInverse: 27,
                    block_option1: 28,
                    OPEN_BLOCK: 29,
                    openBlock_repetition0: 30,
                    openBlock_option0: 31,
                    openBlock_option1: 32,
                    CLOSE: 33,
                    OPEN_INVERSE: 34,
                    openInverse_repetition0: 35,
                    openInverse_option0: 36,
                    openInverse_option1: 37,
                    openInverseChain: 38,
                    OPEN_INVERSE_CHAIN: 39,
                    openInverseChain_repetition0: 40,
                    openInverseChain_option0: 41,
                    openInverseChain_option1: 42,
                    inverseAndProgram: 43,
                    INVERSE: 44,
                    inverseChain: 45,
                    inverseChain_option0: 46,
                    OPEN_ENDBLOCK: 47,
                    OPEN: 48,
                    mustache_repetition0: 49,
                    mustache_option0: 50,
                    OPEN_UNESCAPED: 51,
                    mustache_repetition1: 52,
                    mustache_option1: 53,
                    CLOSE_UNESCAPED: 54,
                    OPEN_PARTIAL: 55,
                    partialName: 56,
                    partial_repetition0: 57,
                    partial_option0: 58,
                    openPartialBlock: 59,
                    OPEN_PARTIAL_BLOCK: 60,
                    openPartialBlock_repetition0: 61,
                    openPartialBlock_option0: 62,
                    param: 63,
                    sexpr: 64,
                    OPEN_SEXPR: 65,
                    sexpr_repetition0: 66,
                    sexpr_option0: 67,
                    CLOSE_SEXPR: 68,
                    hash: 69,
                    hash_repetition_plus0: 70,
                    hashSegment: 71,
                    ID: 72,
                    EQUALS: 73,
                    blockParams: 74,
                    OPEN_BLOCK_PARAMS: 75,
                    blockParams_repetition_plus0: 76,
                    CLOSE_BLOCK_PARAMS: 77,
                    path: 78,
                    dataName: 79,
                    STRING: 80,
                    NUMBER: 81,
                    BOOLEAN: 82,
                    UNDEFINED: 83,
                    NULL: 84,
                    DATA: 85,
                    pathSegments: 86,
                    SEP: 87,
                    $accept: 0,
                    $end: 1
                },
                terminals_: {
                    2: "error",
                    5: "EOF",
                    14: "COMMENT",
                    15: "CONTENT",
                    18: "END_RAW_BLOCK",
                    19: "OPEN_RAW_BLOCK",
                    23: "CLOSE_RAW_BLOCK",
                    29: "OPEN_BLOCK",
                    33: "CLOSE",
                    34: "OPEN_INVERSE",
                    39: "OPEN_INVERSE_CHAIN",
                    44: "INVERSE",
                    47: "OPEN_ENDBLOCK",
                    48: "OPEN",
                    51: "OPEN_UNESCAPED",
                    54: "CLOSE_UNESCAPED",
                    55: "OPEN_PARTIAL",
                    60: "OPEN_PARTIAL_BLOCK",
                    65: "OPEN_SEXPR",
                    68: "CLOSE_SEXPR",
                    72: "ID",
                    73: "EQUALS",
                    75: "OPEN_BLOCK_PARAMS",
                    77: "CLOSE_BLOCK_PARAMS",
                    80: "STRING",
                    81: "NUMBER",
                    82: "BOOLEAN",
                    83: "UNDEFINED",
                    84: "NULL",
                    85: "DATA",
                    87: "SEP"
                },
                productions_: [ 0, [ 3, 2 ], [ 4, 1 ], [ 7, 1 ], [ 7, 1 ], [ 7, 1 ], [ 7, 1 ], [ 7, 1 ], [ 7, 1 ], [ 7, 1 ], [ 13, 1 ], [ 10, 3 ], [ 16, 5 ], [ 9, 4 ], [ 9, 4 ], [ 24, 6 ], [ 27, 6 ], [ 38, 6 ], [ 43, 2 ], [ 45, 3 ], [ 45, 1 ], [ 26, 3 ], [ 8, 5 ], [ 8, 5 ], [ 11, 5 ], [ 12, 3 ], [ 59, 5 ], [ 63, 1 ], [ 63, 1 ], [ 64, 5 ], [ 69, 1 ], [ 71, 3 ], [ 74, 3 ], [ 20, 1 ], [ 20, 1 ], [ 20, 1 ], [ 20, 1 ], [ 20, 1 ], [ 20, 1 ], [ 20, 1 ], [ 56, 1 ], [ 56, 1 ], [ 79, 2 ], [ 78, 1 ], [ 86, 3 ], [ 86, 1 ], [ 6, 0 ], [ 6, 2 ], [ 17, 1 ], [ 17, 2 ], [ 21, 0 ], [ 21, 2 ], [ 22, 0 ], [ 22, 1 ], [ 25, 0 ], [ 25, 1 ], [ 28, 0 ], [ 28, 1 ], [ 30, 0 ], [ 30, 2 ], [ 31, 0 ], [ 31, 1 ], [ 32, 0 ], [ 32, 1 ], [ 35, 0 ], [ 35, 2 ], [ 36, 0 ], [ 36, 1 ], [ 37, 0 ], [ 37, 1 ], [ 40, 0 ], [ 40, 2 ], [ 41, 0 ], [ 41, 1 ], [ 42, 0 ], [ 42, 1 ], [ 46, 0 ], [ 46, 1 ], [ 49, 0 ], [ 49, 2 ], [ 50, 0 ], [ 50, 1 ], [ 52, 0 ], [ 52, 2 ], [ 53, 0 ], [ 53, 1 ], [ 57, 0 ], [ 57, 2 ], [ 58, 0 ], [ 58, 1 ], [ 61, 0 ], [ 61, 2 ], [ 62, 0 ], [ 62, 1 ], [ 66, 0 ], [ 66, 2 ], [ 67, 0 ], [ 67, 1 ], [ 70, 1 ], [ 70, 2 ], [ 76, 1 ], [ 76, 2 ] ],
                performAction: function(yytext, yyleng, yylineno, yy, yystate, $$, _$) {
                    var $0 = $$.length - 1;
                    switch (yystate) {
                      case 1:
                        return $$[$0 - 1];

                      case 2:
                        this.$ = yy.prepareProgram($$[$0]);
                        break;

                      case 3:
                        this.$ = $$[$0];
                        break;

                      case 4:
                        this.$ = $$[$0];
                        break;

                      case 5:
                        this.$ = $$[$0];
                        break;

                      case 6:
                        this.$ = $$[$0];
                        break;

                      case 7:
                        this.$ = $$[$0];
                        break;

                      case 8:
                        this.$ = $$[$0];
                        break;

                      case 9:
                        this.$ = {
                            type: "CommentStatement",
                            value: yy.stripComment($$[$0]),
                            strip: yy.stripFlags($$[$0], $$[$0]),
                            loc: yy.locInfo(this._$)
                        };
                        break;

                      case 10:
                        this.$ = {
                            type: "ContentStatement",
                            original: $$[$0],
                            value: $$[$0],
                            loc: yy.locInfo(this._$)
                        };
                        break;

                      case 11:
                        this.$ = yy.prepareRawBlock($$[$0 - 2], $$[$0 - 1], $$[$0], this._$);
                        break;

                      case 12:
                        this.$ = {
                            path: $$[$0 - 3],
                            params: $$[$0 - 2],
                            hash: $$[$0 - 1]
                        };
                        break;

                      case 13:
                        this.$ = yy.prepareBlock($$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0], !1, this._$);
                        break;

                      case 14:
                        this.$ = yy.prepareBlock($$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0], !0, this._$);
                        break;

                      case 15:
                        this.$ = {
                            open: $$[$0 - 5],
                            path: $$[$0 - 4],
                            params: $$[$0 - 3],
                            hash: $$[$0 - 2],
                            blockParams: $$[$0 - 1],
                            strip: yy.stripFlags($$[$0 - 5], $$[$0])
                        };
                        break;

                      case 16:
                        this.$ = {
                            path: $$[$0 - 4],
                            params: $$[$0 - 3],
                            hash: $$[$0 - 2],
                            blockParams: $$[$0 - 1],
                            strip: yy.stripFlags($$[$0 - 5], $$[$0])
                        };
                        break;

                      case 17:
                        this.$ = {
                            path: $$[$0 - 4],
                            params: $$[$0 - 3],
                            hash: $$[$0 - 2],
                            blockParams: $$[$0 - 1],
                            strip: yy.stripFlags($$[$0 - 5], $$[$0])
                        };
                        break;

                      case 18:
                        this.$ = {
                            strip: yy.stripFlags($$[$0 - 1], $$[$0 - 1]),
                            program: $$[$0]
                        };
                        break;

                      case 19:
                        var inverse = yy.prepareBlock($$[$0 - 2], $$[$0 - 1], $$[$0], $$[$0], !1, this._$), program = yy.prepareProgram([ inverse ], $$[$0 - 1].loc);
                        program.chained = !0, this.$ = {
                            strip: $$[$0 - 2].strip,
                            program: program,
                            chain: !0
                        };
                        break;

                      case 20:
                        this.$ = $$[$0];
                        break;

                      case 21:
                        this.$ = {
                            path: $$[$0 - 1],
                            strip: yy.stripFlags($$[$0 - 2], $$[$0])
                        };
                        break;

                      case 22:
                        this.$ = yy.prepareMustache($$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0 - 4], yy.stripFlags($$[$0 - 4], $$[$0]), this._$);
                        break;

                      case 23:
                        this.$ = yy.prepareMustache($$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0 - 4], yy.stripFlags($$[$0 - 4], $$[$0]), this._$);
                        break;

                      case 24:
                        this.$ = {
                            type: "PartialStatement",
                            name: $$[$0 - 3],
                            params: $$[$0 - 2],
                            hash: $$[$0 - 1],
                            indent: "",
                            strip: yy.stripFlags($$[$0 - 4], $$[$0]),
                            loc: yy.locInfo(this._$)
                        };
                        break;

                      case 25:
                        this.$ = yy.preparePartialBlock($$[$0 - 2], $$[$0 - 1], $$[$0], this._$);
                        break;

                      case 26:
                        this.$ = {
                            path: $$[$0 - 3],
                            params: $$[$0 - 2],
                            hash: $$[$0 - 1],
                            strip: yy.stripFlags($$[$0 - 4], $$[$0])
                        };
                        break;

                      case 27:
                        this.$ = $$[$0];
                        break;

                      case 28:
                        this.$ = $$[$0];
                        break;

                      case 29:
                        this.$ = {
                            type: "SubExpression",
                            path: $$[$0 - 3],
                            params: $$[$0 - 2],
                            hash: $$[$0 - 1],
                            loc: yy.locInfo(this._$)
                        };
                        break;

                      case 30:
                        this.$ = {
                            type: "Hash",
                            pairs: $$[$0],
                            loc: yy.locInfo(this._$)
                        };
                        break;

                      case 31:
                        this.$ = {
                            type: "HashPair",
                            key: yy.id($$[$0 - 2]),
                            value: $$[$0],
                            loc: yy.locInfo(this._$)
                        };
                        break;

                      case 32:
                        this.$ = yy.id($$[$0 - 1]);
                        break;

                      case 33:
                        this.$ = $$[$0];
                        break;

                      case 34:
                        this.$ = $$[$0];
                        break;

                      case 35:
                        this.$ = {
                            type: "StringLiteral",
                            value: $$[$0],
                            original: $$[$0],
                            loc: yy.locInfo(this._$)
                        };
                        break;

                      case 36:
                        this.$ = {
                            type: "NumberLiteral",
                            value: Number($$[$0]),
                            original: Number($$[$0]),
                            loc: yy.locInfo(this._$)
                        };
                        break;

                      case 37:
                        this.$ = {
                            type: "BooleanLiteral",
                            value: "true" === $$[$0],
                            original: "true" === $$[$0],
                            loc: yy.locInfo(this._$)
                        };
                        break;

                      case 38:
                        this.$ = {
                            type: "UndefinedLiteral",
                            original: void 0,
                            value: void 0,
                            loc: yy.locInfo(this._$)
                        };
                        break;

                      case 39:
                        this.$ = {
                            type: "NullLiteral",
                            original: null,
                            value: null,
                            loc: yy.locInfo(this._$)
                        };
                        break;

                      case 40:
                        this.$ = $$[$0];
                        break;

                      case 41:
                        this.$ = $$[$0];
                        break;

                      case 42:
                        this.$ = yy.preparePath(!0, $$[$0], this._$);
                        break;

                      case 43:
                        this.$ = yy.preparePath(!1, $$[$0], this._$);
                        break;

                      case 44:
                        $$[$0 - 2].push({
                            part: yy.id($$[$0]),
                            original: $$[$0],
                            separator: $$[$0 - 1]
                        }), this.$ = $$[$0 - 2];
                        break;

                      case 45:
                        this.$ = [ {
                            part: yy.id($$[$0]),
                            original: $$[$0]
                        } ];
                        break;

                      case 46:
                        this.$ = [];
                        break;

                      case 47:
                        $$[$0 - 1].push($$[$0]);
                        break;

                      case 48:
                        this.$ = [ $$[$0] ];
                        break;

                      case 49:
                        $$[$0 - 1].push($$[$0]);
                        break;

                      case 50:
                        this.$ = [];
                        break;

                      case 51:
                        $$[$0 - 1].push($$[$0]);
                        break;

                      case 58:
                        this.$ = [];
                        break;

                      case 59:
                        $$[$0 - 1].push($$[$0]);
                        break;

                      case 64:
                        this.$ = [];
                        break;

                      case 65:
                        $$[$0 - 1].push($$[$0]);
                        break;

                      case 70:
                        this.$ = [];
                        break;

                      case 71:
                        $$[$0 - 1].push($$[$0]);
                        break;

                      case 78:
                        this.$ = [];
                        break;

                      case 79:
                        $$[$0 - 1].push($$[$0]);
                        break;

                      case 82:
                        this.$ = [];
                        break;

                      case 83:
                        $$[$0 - 1].push($$[$0]);
                        break;

                      case 86:
                        this.$ = [];
                        break;

                      case 87:
                        $$[$0 - 1].push($$[$0]);
                        break;

                      case 90:
                        this.$ = [];
                        break;

                      case 91:
                        $$[$0 - 1].push($$[$0]);
                        break;

                      case 94:
                        this.$ = [];
                        break;

                      case 95:
                        $$[$0 - 1].push($$[$0]);
                        break;

                      case 98:
                        this.$ = [ $$[$0] ];
                        break;

                      case 99:
                        $$[$0 - 1].push($$[$0]);
                        break;

                      case 100:
                        this.$ = [ $$[$0] ];
                        break;

                      case 101:
                        $$[$0 - 1].push($$[$0]);
                    }
                },
                table: [ {
                    3: 1,
                    4: 2,
                    5: [ 2, 46 ],
                    6: 3,
                    14: [ 2, 46 ],
                    15: [ 2, 46 ],
                    19: [ 2, 46 ],
                    29: [ 2, 46 ],
                    34: [ 2, 46 ],
                    48: [ 2, 46 ],
                    51: [ 2, 46 ],
                    55: [ 2, 46 ],
                    60: [ 2, 46 ]
                }, {
                    1: [ 3 ]
                }, {
                    5: [ 1, 4 ]
                }, {
                    5: [ 2, 2 ],
                    7: 5,
                    8: 6,
                    9: 7,
                    10: 8,
                    11: 9,
                    12: 10,
                    13: 11,
                    14: [ 1, 12 ],
                    15: [ 1, 20 ],
                    16: 17,
                    19: [ 1, 23 ],
                    24: 15,
                    27: 16,
                    29: [ 1, 21 ],
                    34: [ 1, 22 ],
                    39: [ 2, 2 ],
                    44: [ 2, 2 ],
                    47: [ 2, 2 ],
                    48: [ 1, 13 ],
                    51: [ 1, 14 ],
                    55: [ 1, 18 ],
                    59: 19,
                    60: [ 1, 24 ]
                }, {
                    1: [ 2, 1 ]
                }, {
                    5: [ 2, 47 ],
                    14: [ 2, 47 ],
                    15: [ 2, 47 ],
                    19: [ 2, 47 ],
                    29: [ 2, 47 ],
                    34: [ 2, 47 ],
                    39: [ 2, 47 ],
                    44: [ 2, 47 ],
                    47: [ 2, 47 ],
                    48: [ 2, 47 ],
                    51: [ 2, 47 ],
                    55: [ 2, 47 ],
                    60: [ 2, 47 ]
                }, {
                    5: [ 2, 3 ],
                    14: [ 2, 3 ],
                    15: [ 2, 3 ],
                    19: [ 2, 3 ],
                    29: [ 2, 3 ],
                    34: [ 2, 3 ],
                    39: [ 2, 3 ],
                    44: [ 2, 3 ],
                    47: [ 2, 3 ],
                    48: [ 2, 3 ],
                    51: [ 2, 3 ],
                    55: [ 2, 3 ],
                    60: [ 2, 3 ]
                }, {
                    5: [ 2, 4 ],
                    14: [ 2, 4 ],
                    15: [ 2, 4 ],
                    19: [ 2, 4 ],
                    29: [ 2, 4 ],
                    34: [ 2, 4 ],
                    39: [ 2, 4 ],
                    44: [ 2, 4 ],
                    47: [ 2, 4 ],
                    48: [ 2, 4 ],
                    51: [ 2, 4 ],
                    55: [ 2, 4 ],
                    60: [ 2, 4 ]
                }, {
                    5: [ 2, 5 ],
                    14: [ 2, 5 ],
                    15: [ 2, 5 ],
                    19: [ 2, 5 ],
                    29: [ 2, 5 ],
                    34: [ 2, 5 ],
                    39: [ 2, 5 ],
                    44: [ 2, 5 ],
                    47: [ 2, 5 ],
                    48: [ 2, 5 ],
                    51: [ 2, 5 ],
                    55: [ 2, 5 ],
                    60: [ 2, 5 ]
                }, {
                    5: [ 2, 6 ],
                    14: [ 2, 6 ],
                    15: [ 2, 6 ],
                    19: [ 2, 6 ],
                    29: [ 2, 6 ],
                    34: [ 2, 6 ],
                    39: [ 2, 6 ],
                    44: [ 2, 6 ],
                    47: [ 2, 6 ],
                    48: [ 2, 6 ],
                    51: [ 2, 6 ],
                    55: [ 2, 6 ],
                    60: [ 2, 6 ]
                }, {
                    5: [ 2, 7 ],
                    14: [ 2, 7 ],
                    15: [ 2, 7 ],
                    19: [ 2, 7 ],
                    29: [ 2, 7 ],
                    34: [ 2, 7 ],
                    39: [ 2, 7 ],
                    44: [ 2, 7 ],
                    47: [ 2, 7 ],
                    48: [ 2, 7 ],
                    51: [ 2, 7 ],
                    55: [ 2, 7 ],
                    60: [ 2, 7 ]
                }, {
                    5: [ 2, 8 ],
                    14: [ 2, 8 ],
                    15: [ 2, 8 ],
                    19: [ 2, 8 ],
                    29: [ 2, 8 ],
                    34: [ 2, 8 ],
                    39: [ 2, 8 ],
                    44: [ 2, 8 ],
                    47: [ 2, 8 ],
                    48: [ 2, 8 ],
                    51: [ 2, 8 ],
                    55: [ 2, 8 ],
                    60: [ 2, 8 ]
                }, {
                    5: [ 2, 9 ],
                    14: [ 2, 9 ],
                    15: [ 2, 9 ],
                    19: [ 2, 9 ],
                    29: [ 2, 9 ],
                    34: [ 2, 9 ],
                    39: [ 2, 9 ],
                    44: [ 2, 9 ],
                    47: [ 2, 9 ],
                    48: [ 2, 9 ],
                    51: [ 2, 9 ],
                    55: [ 2, 9 ],
                    60: [ 2, 9 ]
                }, {
                    20: 25,
                    72: [ 1, 35 ],
                    78: 26,
                    79: 27,
                    80: [ 1, 28 ],
                    81: [ 1, 29 ],
                    82: [ 1, 30 ],
                    83: [ 1, 31 ],
                    84: [ 1, 32 ],
                    85: [ 1, 34 ],
                    86: 33
                }, {
                    20: 36,
                    72: [ 1, 35 ],
                    78: 26,
                    79: 27,
                    80: [ 1, 28 ],
                    81: [ 1, 29 ],
                    82: [ 1, 30 ],
                    83: [ 1, 31 ],
                    84: [ 1, 32 ],
                    85: [ 1, 34 ],
                    86: 33
                }, {
                    4: 37,
                    6: 3,
                    14: [ 2, 46 ],
                    15: [ 2, 46 ],
                    19: [ 2, 46 ],
                    29: [ 2, 46 ],
                    34: [ 2, 46 ],
                    39: [ 2, 46 ],
                    44: [ 2, 46 ],
                    47: [ 2, 46 ],
                    48: [ 2, 46 ],
                    51: [ 2, 46 ],
                    55: [ 2, 46 ],
                    60: [ 2, 46 ]
                }, {
                    4: 38,
                    6: 3,
                    14: [ 2, 46 ],
                    15: [ 2, 46 ],
                    19: [ 2, 46 ],
                    29: [ 2, 46 ],
                    34: [ 2, 46 ],
                    44: [ 2, 46 ],
                    47: [ 2, 46 ],
                    48: [ 2, 46 ],
                    51: [ 2, 46 ],
                    55: [ 2, 46 ],
                    60: [ 2, 46 ]
                }, {
                    13: 40,
                    15: [ 1, 20 ],
                    17: 39
                }, {
                    20: 42,
                    56: 41,
                    64: 43,
                    65: [ 1, 44 ],
                    72: [ 1, 35 ],
                    78: 26,
                    79: 27,
                    80: [ 1, 28 ],
                    81: [ 1, 29 ],
                    82: [ 1, 30 ],
                    83: [ 1, 31 ],
                    84: [ 1, 32 ],
                    85: [ 1, 34 ],
                    86: 33
                }, {
                    4: 45,
                    6: 3,
                    14: [ 2, 46 ],
                    15: [ 2, 46 ],
                    19: [ 2, 46 ],
                    29: [ 2, 46 ],
                    34: [ 2, 46 ],
                    47: [ 2, 46 ],
                    48: [ 2, 46 ],
                    51: [ 2, 46 ],
                    55: [ 2, 46 ],
                    60: [ 2, 46 ]
                }, {
                    5: [ 2, 10 ],
                    14: [ 2, 10 ],
                    15: [ 2, 10 ],
                    18: [ 2, 10 ],
                    19: [ 2, 10 ],
                    29: [ 2, 10 ],
                    34: [ 2, 10 ],
                    39: [ 2, 10 ],
                    44: [ 2, 10 ],
                    47: [ 2, 10 ],
                    48: [ 2, 10 ],
                    51: [ 2, 10 ],
                    55: [ 2, 10 ],
                    60: [ 2, 10 ]
                }, {
                    20: 46,
                    72: [ 1, 35 ],
                    78: 26,
                    79: 27,
                    80: [ 1, 28 ],
                    81: [ 1, 29 ],
                    82: [ 1, 30 ],
                    83: [ 1, 31 ],
                    84: [ 1, 32 ],
                    85: [ 1, 34 ],
                    86: 33
                }, {
                    20: 47,
                    72: [ 1, 35 ],
                    78: 26,
                    79: 27,
                    80: [ 1, 28 ],
                    81: [ 1, 29 ],
                    82: [ 1, 30 ],
                    83: [ 1, 31 ],
                    84: [ 1, 32 ],
                    85: [ 1, 34 ],
                    86: 33
                }, {
                    20: 48,
                    72: [ 1, 35 ],
                    78: 26,
                    79: 27,
                    80: [ 1, 28 ],
                    81: [ 1, 29 ],
                    82: [ 1, 30 ],
                    83: [ 1, 31 ],
                    84: [ 1, 32 ],
                    85: [ 1, 34 ],
                    86: 33
                }, {
                    20: 42,
                    56: 49,
                    64: 43,
                    65: [ 1, 44 ],
                    72: [ 1, 35 ],
                    78: 26,
                    79: 27,
                    80: [ 1, 28 ],
                    81: [ 1, 29 ],
                    82: [ 1, 30 ],
                    83: [ 1, 31 ],
                    84: [ 1, 32 ],
                    85: [ 1, 34 ],
                    86: 33
                }, {
                    33: [ 2, 78 ],
                    49: 50,
                    65: [ 2, 78 ],
                    72: [ 2, 78 ],
                    80: [ 2, 78 ],
                    81: [ 2, 78 ],
                    82: [ 2, 78 ],
                    83: [ 2, 78 ],
                    84: [ 2, 78 ],
                    85: [ 2, 78 ]
                }, {
                    23: [ 2, 33 ],
                    33: [ 2, 33 ],
                    54: [ 2, 33 ],
                    65: [ 2, 33 ],
                    68: [ 2, 33 ],
                    72: [ 2, 33 ],
                    75: [ 2, 33 ],
                    80: [ 2, 33 ],
                    81: [ 2, 33 ],
                    82: [ 2, 33 ],
                    83: [ 2, 33 ],
                    84: [ 2, 33 ],
                    85: [ 2, 33 ]
                }, {
                    23: [ 2, 34 ],
                    33: [ 2, 34 ],
                    54: [ 2, 34 ],
                    65: [ 2, 34 ],
                    68: [ 2, 34 ],
                    72: [ 2, 34 ],
                    75: [ 2, 34 ],
                    80: [ 2, 34 ],
                    81: [ 2, 34 ],
                    82: [ 2, 34 ],
                    83: [ 2, 34 ],
                    84: [ 2, 34 ],
                    85: [ 2, 34 ]
                }, {
                    23: [ 2, 35 ],
                    33: [ 2, 35 ],
                    54: [ 2, 35 ],
                    65: [ 2, 35 ],
                    68: [ 2, 35 ],
                    72: [ 2, 35 ],
                    75: [ 2, 35 ],
                    80: [ 2, 35 ],
                    81: [ 2, 35 ],
                    82: [ 2, 35 ],
                    83: [ 2, 35 ],
                    84: [ 2, 35 ],
                    85: [ 2, 35 ]
                }, {
                    23: [ 2, 36 ],
                    33: [ 2, 36 ],
                    54: [ 2, 36 ],
                    65: [ 2, 36 ],
                    68: [ 2, 36 ],
                    72: [ 2, 36 ],
                    75: [ 2, 36 ],
                    80: [ 2, 36 ],
                    81: [ 2, 36 ],
                    82: [ 2, 36 ],
                    83: [ 2, 36 ],
                    84: [ 2, 36 ],
                    85: [ 2, 36 ]
                }, {
                    23: [ 2, 37 ],
                    33: [ 2, 37 ],
                    54: [ 2, 37 ],
                    65: [ 2, 37 ],
                    68: [ 2, 37 ],
                    72: [ 2, 37 ],
                    75: [ 2, 37 ],
                    80: [ 2, 37 ],
                    81: [ 2, 37 ],
                    82: [ 2, 37 ],
                    83: [ 2, 37 ],
                    84: [ 2, 37 ],
                    85: [ 2, 37 ]
                }, {
                    23: [ 2, 38 ],
                    33: [ 2, 38 ],
                    54: [ 2, 38 ],
                    65: [ 2, 38 ],
                    68: [ 2, 38 ],
                    72: [ 2, 38 ],
                    75: [ 2, 38 ],
                    80: [ 2, 38 ],
                    81: [ 2, 38 ],
                    82: [ 2, 38 ],
                    83: [ 2, 38 ],
                    84: [ 2, 38 ],
                    85: [ 2, 38 ]
                }, {
                    23: [ 2, 39 ],
                    33: [ 2, 39 ],
                    54: [ 2, 39 ],
                    65: [ 2, 39 ],
                    68: [ 2, 39 ],
                    72: [ 2, 39 ],
                    75: [ 2, 39 ],
                    80: [ 2, 39 ],
                    81: [ 2, 39 ],
                    82: [ 2, 39 ],
                    83: [ 2, 39 ],
                    84: [ 2, 39 ],
                    85: [ 2, 39 ]
                }, {
                    23: [ 2, 43 ],
                    33: [ 2, 43 ],
                    54: [ 2, 43 ],
                    65: [ 2, 43 ],
                    68: [ 2, 43 ],
                    72: [ 2, 43 ],
                    75: [ 2, 43 ],
                    80: [ 2, 43 ],
                    81: [ 2, 43 ],
                    82: [ 2, 43 ],
                    83: [ 2, 43 ],
                    84: [ 2, 43 ],
                    85: [ 2, 43 ],
                    87: [ 1, 51 ]
                }, {
                    72: [ 1, 35 ],
                    86: 52
                }, {
                    23: [ 2, 45 ],
                    33: [ 2, 45 ],
                    54: [ 2, 45 ],
                    65: [ 2, 45 ],
                    68: [ 2, 45 ],
                    72: [ 2, 45 ],
                    75: [ 2, 45 ],
                    80: [ 2, 45 ],
                    81: [ 2, 45 ],
                    82: [ 2, 45 ],
                    83: [ 2, 45 ],
                    84: [ 2, 45 ],
                    85: [ 2, 45 ],
                    87: [ 2, 45 ]
                }, {
                    52: 53,
                    54: [ 2, 82 ],
                    65: [ 2, 82 ],
                    72: [ 2, 82 ],
                    80: [ 2, 82 ],
                    81: [ 2, 82 ],
                    82: [ 2, 82 ],
                    83: [ 2, 82 ],
                    84: [ 2, 82 ],
                    85: [ 2, 82 ]
                }, {
                    25: 54,
                    38: 56,
                    39: [ 1, 58 ],
                    43: 57,
                    44: [ 1, 59 ],
                    45: 55,
                    47: [ 2, 54 ]
                }, {
                    28: 60,
                    43: 61,
                    44: [ 1, 59 ],
                    47: [ 2, 56 ]
                }, {
                    13: 63,
                    15: [ 1, 20 ],
                    18: [ 1, 62 ]
                }, {
                    15: [ 2, 48 ],
                    18: [ 2, 48 ]
                }, {
                    33: [ 2, 86 ],
                    57: 64,
                    65: [ 2, 86 ],
                    72: [ 2, 86 ],
                    80: [ 2, 86 ],
                    81: [ 2, 86 ],
                    82: [ 2, 86 ],
                    83: [ 2, 86 ],
                    84: [ 2, 86 ],
                    85: [ 2, 86 ]
                }, {
                    33: [ 2, 40 ],
                    65: [ 2, 40 ],
                    72: [ 2, 40 ],
                    80: [ 2, 40 ],
                    81: [ 2, 40 ],
                    82: [ 2, 40 ],
                    83: [ 2, 40 ],
                    84: [ 2, 40 ],
                    85: [ 2, 40 ]
                }, {
                    33: [ 2, 41 ],
                    65: [ 2, 41 ],
                    72: [ 2, 41 ],
                    80: [ 2, 41 ],
                    81: [ 2, 41 ],
                    82: [ 2, 41 ],
                    83: [ 2, 41 ],
                    84: [ 2, 41 ],
                    85: [ 2, 41 ]
                }, {
                    20: 65,
                    72: [ 1, 35 ],
                    78: 26,
                    79: 27,
                    80: [ 1, 28 ],
                    81: [ 1, 29 ],
                    82: [ 1, 30 ],
                    83: [ 1, 31 ],
                    84: [ 1, 32 ],
                    85: [ 1, 34 ],
                    86: 33
                }, {
                    26: 66,
                    47: [ 1, 67 ]
                }, {
                    30: 68,
                    33: [ 2, 58 ],
                    65: [ 2, 58 ],
                    72: [ 2, 58 ],
                    75: [ 2, 58 ],
                    80: [ 2, 58 ],
                    81: [ 2, 58 ],
                    82: [ 2, 58 ],
                    83: [ 2, 58 ],
                    84: [ 2, 58 ],
                    85: [ 2, 58 ]
                }, {
                    33: [ 2, 64 ],
                    35: 69,
                    65: [ 2, 64 ],
                    72: [ 2, 64 ],
                    75: [ 2, 64 ],
                    80: [ 2, 64 ],
                    81: [ 2, 64 ],
                    82: [ 2, 64 ],
                    83: [ 2, 64 ],
                    84: [ 2, 64 ],
                    85: [ 2, 64 ]
                }, {
                    21: 70,
                    23: [ 2, 50 ],
                    65: [ 2, 50 ],
                    72: [ 2, 50 ],
                    80: [ 2, 50 ],
                    81: [ 2, 50 ],
                    82: [ 2, 50 ],
                    83: [ 2, 50 ],
                    84: [ 2, 50 ],
                    85: [ 2, 50 ]
                }, {
                    33: [ 2, 90 ],
                    61: 71,
                    65: [ 2, 90 ],
                    72: [ 2, 90 ],
                    80: [ 2, 90 ],
                    81: [ 2, 90 ],
                    82: [ 2, 90 ],
                    83: [ 2, 90 ],
                    84: [ 2, 90 ],
                    85: [ 2, 90 ]
                }, {
                    20: 75,
                    33: [ 2, 80 ],
                    50: 72,
                    63: 73,
                    64: 76,
                    65: [ 1, 44 ],
                    69: 74,
                    70: 77,
                    71: 78,
                    72: [ 1, 79 ],
                    78: 26,
                    79: 27,
                    80: [ 1, 28 ],
                    81: [ 1, 29 ],
                    82: [ 1, 30 ],
                    83: [ 1, 31 ],
                    84: [ 1, 32 ],
                    85: [ 1, 34 ],
                    86: 33
                }, {
                    72: [ 1, 80 ]
                }, {
                    23: [ 2, 42 ],
                    33: [ 2, 42 ],
                    54: [ 2, 42 ],
                    65: [ 2, 42 ],
                    68: [ 2, 42 ],
                    72: [ 2, 42 ],
                    75: [ 2, 42 ],
                    80: [ 2, 42 ],
                    81: [ 2, 42 ],
                    82: [ 2, 42 ],
                    83: [ 2, 42 ],
                    84: [ 2, 42 ],
                    85: [ 2, 42 ],
                    87: [ 1, 51 ]
                }, {
                    20: 75,
                    53: 81,
                    54: [ 2, 84 ],
                    63: 82,
                    64: 76,
                    65: [ 1, 44 ],
                    69: 83,
                    70: 77,
                    71: 78,
                    72: [ 1, 79 ],
                    78: 26,
                    79: 27,
                    80: [ 1, 28 ],
                    81: [ 1, 29 ],
                    82: [ 1, 30 ],
                    83: [ 1, 31 ],
                    84: [ 1, 32 ],
                    85: [ 1, 34 ],
                    86: 33
                }, {
                    26: 84,
                    47: [ 1, 67 ]
                }, {
                    47: [ 2, 55 ]
                }, {
                    4: 85,
                    6: 3,
                    14: [ 2, 46 ],
                    15: [ 2, 46 ],
                    19: [ 2, 46 ],
                    29: [ 2, 46 ],
                    34: [ 2, 46 ],
                    39: [ 2, 46 ],
                    44: [ 2, 46 ],
                    47: [ 2, 46 ],
                    48: [ 2, 46 ],
                    51: [ 2, 46 ],
                    55: [ 2, 46 ],
                    60: [ 2, 46 ]
                }, {
                    47: [ 2, 20 ]
                }, {
                    20: 86,
                    72: [ 1, 35 ],
                    78: 26,
                    79: 27,
                    80: [ 1, 28 ],
                    81: [ 1, 29 ],
                    82: [ 1, 30 ],
                    83: [ 1, 31 ],
                    84: [ 1, 32 ],
                    85: [ 1, 34 ],
                    86: 33
                }, {
                    4: 87,
                    6: 3,
                    14: [ 2, 46 ],
                    15: [ 2, 46 ],
                    19: [ 2, 46 ],
                    29: [ 2, 46 ],
                    34: [ 2, 46 ],
                    47: [ 2, 46 ],
                    48: [ 2, 46 ],
                    51: [ 2, 46 ],
                    55: [ 2, 46 ],
                    60: [ 2, 46 ]
                }, {
                    26: 88,
                    47: [ 1, 67 ]
                }, {
                    47: [ 2, 57 ]
                }, {
                    5: [ 2, 11 ],
                    14: [ 2, 11 ],
                    15: [ 2, 11 ],
                    19: [ 2, 11 ],
                    29: [ 2, 11 ],
                    34: [ 2, 11 ],
                    39: [ 2, 11 ],
                    44: [ 2, 11 ],
                    47: [ 2, 11 ],
                    48: [ 2, 11 ],
                    51: [ 2, 11 ],
                    55: [ 2, 11 ],
                    60: [ 2, 11 ]
                }, {
                    15: [ 2, 49 ],
                    18: [ 2, 49 ]
                }, {
                    20: 75,
                    33: [ 2, 88 ],
                    58: 89,
                    63: 90,
                    64: 76,
                    65: [ 1, 44 ],
                    69: 91,
                    70: 77,
                    71: 78,
                    72: [ 1, 79 ],
                    78: 26,
                    79: 27,
                    80: [ 1, 28 ],
                    81: [ 1, 29 ],
                    82: [ 1, 30 ],
                    83: [ 1, 31 ],
                    84: [ 1, 32 ],
                    85: [ 1, 34 ],
                    86: 33
                }, {
                    65: [ 2, 94 ],
                    66: 92,
                    68: [ 2, 94 ],
                    72: [ 2, 94 ],
                    80: [ 2, 94 ],
                    81: [ 2, 94 ],
                    82: [ 2, 94 ],
                    83: [ 2, 94 ],
                    84: [ 2, 94 ],
                    85: [ 2, 94 ]
                }, {
                    5: [ 2, 25 ],
                    14: [ 2, 25 ],
                    15: [ 2, 25 ],
                    19: [ 2, 25 ],
                    29: [ 2, 25 ],
                    34: [ 2, 25 ],
                    39: [ 2, 25 ],
                    44: [ 2, 25 ],
                    47: [ 2, 25 ],
                    48: [ 2, 25 ],
                    51: [ 2, 25 ],
                    55: [ 2, 25 ],
                    60: [ 2, 25 ]
                }, {
                    20: 93,
                    72: [ 1, 35 ],
                    78: 26,
                    79: 27,
                    80: [ 1, 28 ],
                    81: [ 1, 29 ],
                    82: [ 1, 30 ],
                    83: [ 1, 31 ],
                    84: [ 1, 32 ],
                    85: [ 1, 34 ],
                    86: 33
                }, {
                    20: 75,
                    31: 94,
                    33: [ 2, 60 ],
                    63: 95,
                    64: 76,
                    65: [ 1, 44 ],
                    69: 96,
                    70: 77,
                    71: 78,
                    72: [ 1, 79 ],
                    75: [ 2, 60 ],
                    78: 26,
                    79: 27,
                    80: [ 1, 28 ],
                    81: [ 1, 29 ],
                    82: [ 1, 30 ],
                    83: [ 1, 31 ],
                    84: [ 1, 32 ],
                    85: [ 1, 34 ],
                    86: 33
                }, {
                    20: 75,
                    33: [ 2, 66 ],
                    36: 97,
                    63: 98,
                    64: 76,
                    65: [ 1, 44 ],
                    69: 99,
                    70: 77,
                    71: 78,
                    72: [ 1, 79 ],
                    75: [ 2, 66 ],
                    78: 26,
                    79: 27,
                    80: [ 1, 28 ],
                    81: [ 1, 29 ],
                    82: [ 1, 30 ],
                    83: [ 1, 31 ],
                    84: [ 1, 32 ],
                    85: [ 1, 34 ],
                    86: 33
                }, {
                    20: 75,
                    22: 100,
                    23: [ 2, 52 ],
                    63: 101,
                    64: 76,
                    65: [ 1, 44 ],
                    69: 102,
                    70: 77,
                    71: 78,
                    72: [ 1, 79 ],
                    78: 26,
                    79: 27,
                    80: [ 1, 28 ],
                    81: [ 1, 29 ],
                    82: [ 1, 30 ],
                    83: [ 1, 31 ],
                    84: [ 1, 32 ],
                    85: [ 1, 34 ],
                    86: 33
                }, {
                    20: 75,
                    33: [ 2, 92 ],
                    62: 103,
                    63: 104,
                    64: 76,
                    65: [ 1, 44 ],
                    69: 105,
                    70: 77,
                    71: 78,
                    72: [ 1, 79 ],
                    78: 26,
                    79: 27,
                    80: [ 1, 28 ],
                    81: [ 1, 29 ],
                    82: [ 1, 30 ],
                    83: [ 1, 31 ],
                    84: [ 1, 32 ],
                    85: [ 1, 34 ],
                    86: 33
                }, {
                    33: [ 1, 106 ]
                }, {
                    33: [ 2, 79 ],
                    65: [ 2, 79 ],
                    72: [ 2, 79 ],
                    80: [ 2, 79 ],
                    81: [ 2, 79 ],
                    82: [ 2, 79 ],
                    83: [ 2, 79 ],
                    84: [ 2, 79 ],
                    85: [ 2, 79 ]
                }, {
                    33: [ 2, 81 ]
                }, {
                    23: [ 2, 27 ],
                    33: [ 2, 27 ],
                    54: [ 2, 27 ],
                    65: [ 2, 27 ],
                    68: [ 2, 27 ],
                    72: [ 2, 27 ],
                    75: [ 2, 27 ],
                    80: [ 2, 27 ],
                    81: [ 2, 27 ],
                    82: [ 2, 27 ],
                    83: [ 2, 27 ],
                    84: [ 2, 27 ],
                    85: [ 2, 27 ]
                }, {
                    23: [ 2, 28 ],
                    33: [ 2, 28 ],
                    54: [ 2, 28 ],
                    65: [ 2, 28 ],
                    68: [ 2, 28 ],
                    72: [ 2, 28 ],
                    75: [ 2, 28 ],
                    80: [ 2, 28 ],
                    81: [ 2, 28 ],
                    82: [ 2, 28 ],
                    83: [ 2, 28 ],
                    84: [ 2, 28 ],
                    85: [ 2, 28 ]
                }, {
                    23: [ 2, 30 ],
                    33: [ 2, 30 ],
                    54: [ 2, 30 ],
                    68: [ 2, 30 ],
                    71: 107,
                    72: [ 1, 108 ],
                    75: [ 2, 30 ]
                }, {
                    23: [ 2, 98 ],
                    33: [ 2, 98 ],
                    54: [ 2, 98 ],
                    68: [ 2, 98 ],
                    72: [ 2, 98 ],
                    75: [ 2, 98 ]
                }, {
                    23: [ 2, 45 ],
                    33: [ 2, 45 ],
                    54: [ 2, 45 ],
                    65: [ 2, 45 ],
                    68: [ 2, 45 ],
                    72: [ 2, 45 ],
                    73: [ 1, 109 ],
                    75: [ 2, 45 ],
                    80: [ 2, 45 ],
                    81: [ 2, 45 ],
                    82: [ 2, 45 ],
                    83: [ 2, 45 ],
                    84: [ 2, 45 ],
                    85: [ 2, 45 ],
                    87: [ 2, 45 ]
                }, {
                    23: [ 2, 44 ],
                    33: [ 2, 44 ],
                    54: [ 2, 44 ],
                    65: [ 2, 44 ],
                    68: [ 2, 44 ],
                    72: [ 2, 44 ],
                    75: [ 2, 44 ],
                    80: [ 2, 44 ],
                    81: [ 2, 44 ],
                    82: [ 2, 44 ],
                    83: [ 2, 44 ],
                    84: [ 2, 44 ],
                    85: [ 2, 44 ],
                    87: [ 2, 44 ]
                }, {
                    54: [ 1, 110 ]
                }, {
                    54: [ 2, 83 ],
                    65: [ 2, 83 ],
                    72: [ 2, 83 ],
                    80: [ 2, 83 ],
                    81: [ 2, 83 ],
                    82: [ 2, 83 ],
                    83: [ 2, 83 ],
                    84: [ 2, 83 ],
                    85: [ 2, 83 ]
                }, {
                    54: [ 2, 85 ]
                }, {
                    5: [ 2, 13 ],
                    14: [ 2, 13 ],
                    15: [ 2, 13 ],
                    19: [ 2, 13 ],
                    29: [ 2, 13 ],
                    34: [ 2, 13 ],
                    39: [ 2, 13 ],
                    44: [ 2, 13 ],
                    47: [ 2, 13 ],
                    48: [ 2, 13 ],
                    51: [ 2, 13 ],
                    55: [ 2, 13 ],
                    60: [ 2, 13 ]
                }, {
                    38: 56,
                    39: [ 1, 58 ],
                    43: 57,
                    44: [ 1, 59 ],
                    45: 112,
                    46: 111,
                    47: [ 2, 76 ]
                }, {
                    33: [ 2, 70 ],
                    40: 113,
                    65: [ 2, 70 ],
                    72: [ 2, 70 ],
                    75: [ 2, 70 ],
                    80: [ 2, 70 ],
                    81: [ 2, 70 ],
                    82: [ 2, 70 ],
                    83: [ 2, 70 ],
                    84: [ 2, 70 ],
                    85: [ 2, 70 ]
                }, {
                    47: [ 2, 18 ]
                }, {
                    5: [ 2, 14 ],
                    14: [ 2, 14 ],
                    15: [ 2, 14 ],
                    19: [ 2, 14 ],
                    29: [ 2, 14 ],
                    34: [ 2, 14 ],
                    39: [ 2, 14 ],
                    44: [ 2, 14 ],
                    47: [ 2, 14 ],
                    48: [ 2, 14 ],
                    51: [ 2, 14 ],
                    55: [ 2, 14 ],
                    60: [ 2, 14 ]
                }, {
                    33: [ 1, 114 ]
                }, {
                    33: [ 2, 87 ],
                    65: [ 2, 87 ],
                    72: [ 2, 87 ],
                    80: [ 2, 87 ],
                    81: [ 2, 87 ],
                    82: [ 2, 87 ],
                    83: [ 2, 87 ],
                    84: [ 2, 87 ],
                    85: [ 2, 87 ]
                }, {
                    33: [ 2, 89 ]
                }, {
                    20: 75,
                    63: 116,
                    64: 76,
                    65: [ 1, 44 ],
                    67: 115,
                    68: [ 2, 96 ],
                    69: 117,
                    70: 77,
                    71: 78,
                    72: [ 1, 79 ],
                    78: 26,
                    79: 27,
                    80: [ 1, 28 ],
                    81: [ 1, 29 ],
                    82: [ 1, 30 ],
                    83: [ 1, 31 ],
                    84: [ 1, 32 ],
                    85: [ 1, 34 ],
                    86: 33
                }, {
                    33: [ 1, 118 ]
                }, {
                    32: 119,
                    33: [ 2, 62 ],
                    74: 120,
                    75: [ 1, 121 ]
                }, {
                    33: [ 2, 59 ],
                    65: [ 2, 59 ],
                    72: [ 2, 59 ],
                    75: [ 2, 59 ],
                    80: [ 2, 59 ],
                    81: [ 2, 59 ],
                    82: [ 2, 59 ],
                    83: [ 2, 59 ],
                    84: [ 2, 59 ],
                    85: [ 2, 59 ]
                }, {
                    33: [ 2, 61 ],
                    75: [ 2, 61 ]
                }, {
                    33: [ 2, 68 ],
                    37: 122,
                    74: 123,
                    75: [ 1, 121 ]
                }, {
                    33: [ 2, 65 ],
                    65: [ 2, 65 ],
                    72: [ 2, 65 ],
                    75: [ 2, 65 ],
                    80: [ 2, 65 ],
                    81: [ 2, 65 ],
                    82: [ 2, 65 ],
                    83: [ 2, 65 ],
                    84: [ 2, 65 ],
                    85: [ 2, 65 ]
                }, {
                    33: [ 2, 67 ],
                    75: [ 2, 67 ]
                }, {
                    23: [ 1, 124 ]
                }, {
                    23: [ 2, 51 ],
                    65: [ 2, 51 ],
                    72: [ 2, 51 ],
                    80: [ 2, 51 ],
                    81: [ 2, 51 ],
                    82: [ 2, 51 ],
                    83: [ 2, 51 ],
                    84: [ 2, 51 ],
                    85: [ 2, 51 ]
                }, {
                    23: [ 2, 53 ]
                }, {
                    33: [ 1, 125 ]
                }, {
                    33: [ 2, 91 ],
                    65: [ 2, 91 ],
                    72: [ 2, 91 ],
                    80: [ 2, 91 ],
                    81: [ 2, 91 ],
                    82: [ 2, 91 ],
                    83: [ 2, 91 ],
                    84: [ 2, 91 ],
                    85: [ 2, 91 ]
                }, {
                    33: [ 2, 93 ]
                }, {
                    5: [ 2, 22 ],
                    14: [ 2, 22 ],
                    15: [ 2, 22 ],
                    19: [ 2, 22 ],
                    29: [ 2, 22 ],
                    34: [ 2, 22 ],
                    39: [ 2, 22 ],
                    44: [ 2, 22 ],
                    47: [ 2, 22 ],
                    48: [ 2, 22 ],
                    51: [ 2, 22 ],
                    55: [ 2, 22 ],
                    60: [ 2, 22 ]
                }, {
                    23: [ 2, 99 ],
                    33: [ 2, 99 ],
                    54: [ 2, 99 ],
                    68: [ 2, 99 ],
                    72: [ 2, 99 ],
                    75: [ 2, 99 ]
                }, {
                    73: [ 1, 109 ]
                }, {
                    20: 75,
                    63: 126,
                    64: 76,
                    65: [ 1, 44 ],
                    72: [ 1, 35 ],
                    78: 26,
                    79: 27,
                    80: [ 1, 28 ],
                    81: [ 1, 29 ],
                    82: [ 1, 30 ],
                    83: [ 1, 31 ],
                    84: [ 1, 32 ],
                    85: [ 1, 34 ],
                    86: 33
                }, {
                    5: [ 2, 23 ],
                    14: [ 2, 23 ],
                    15: [ 2, 23 ],
                    19: [ 2, 23 ],
                    29: [ 2, 23 ],
                    34: [ 2, 23 ],
                    39: [ 2, 23 ],
                    44: [ 2, 23 ],
                    47: [ 2, 23 ],
                    48: [ 2, 23 ],
                    51: [ 2, 23 ],
                    55: [ 2, 23 ],
                    60: [ 2, 23 ]
                }, {
                    47: [ 2, 19 ]
                }, {
                    47: [ 2, 77 ]
                }, {
                    20: 75,
                    33: [ 2, 72 ],
                    41: 127,
                    63: 128,
                    64: 76,
                    65: [ 1, 44 ],
                    69: 129,
                    70: 77,
                    71: 78,
                    72: [ 1, 79 ],
                    75: [ 2, 72 ],
                    78: 26,
                    79: 27,
                    80: [ 1, 28 ],
                    81: [ 1, 29 ],
                    82: [ 1, 30 ],
                    83: [ 1, 31 ],
                    84: [ 1, 32 ],
                    85: [ 1, 34 ],
                    86: 33
                }, {
                    5: [ 2, 24 ],
                    14: [ 2, 24 ],
                    15: [ 2, 24 ],
                    19: [ 2, 24 ],
                    29: [ 2, 24 ],
                    34: [ 2, 24 ],
                    39: [ 2, 24 ],
                    44: [ 2, 24 ],
                    47: [ 2, 24 ],
                    48: [ 2, 24 ],
                    51: [ 2, 24 ],
                    55: [ 2, 24 ],
                    60: [ 2, 24 ]
                }, {
                    68: [ 1, 130 ]
                }, {
                    65: [ 2, 95 ],
                    68: [ 2, 95 ],
                    72: [ 2, 95 ],
                    80: [ 2, 95 ],
                    81: [ 2, 95 ],
                    82: [ 2, 95 ],
                    83: [ 2, 95 ],
                    84: [ 2, 95 ],
                    85: [ 2, 95 ]
                }, {
                    68: [ 2, 97 ]
                }, {
                    5: [ 2, 21 ],
                    14: [ 2, 21 ],
                    15: [ 2, 21 ],
                    19: [ 2, 21 ],
                    29: [ 2, 21 ],
                    34: [ 2, 21 ],
                    39: [ 2, 21 ],
                    44: [ 2, 21 ],
                    47: [ 2, 21 ],
                    48: [ 2, 21 ],
                    51: [ 2, 21 ],
                    55: [ 2, 21 ],
                    60: [ 2, 21 ]
                }, {
                    33: [ 1, 131 ]
                }, {
                    33: [ 2, 63 ]
                }, {
                    72: [ 1, 133 ],
                    76: 132
                }, {
                    33: [ 1, 134 ]
                }, {
                    33: [ 2, 69 ]
                }, {
                    15: [ 2, 12 ]
                }, {
                    14: [ 2, 26 ],
                    15: [ 2, 26 ],
                    19: [ 2, 26 ],
                    29: [ 2, 26 ],
                    34: [ 2, 26 ],
                    47: [ 2, 26 ],
                    48: [ 2, 26 ],
                    51: [ 2, 26 ],
                    55: [ 2, 26 ],
                    60: [ 2, 26 ]
                }, {
                    23: [ 2, 31 ],
                    33: [ 2, 31 ],
                    54: [ 2, 31 ],
                    68: [ 2, 31 ],
                    72: [ 2, 31 ],
                    75: [ 2, 31 ]
                }, {
                    33: [ 2, 74 ],
                    42: 135,
                    74: 136,
                    75: [ 1, 121 ]
                }, {
                    33: [ 2, 71 ],
                    65: [ 2, 71 ],
                    72: [ 2, 71 ],
                    75: [ 2, 71 ],
                    80: [ 2, 71 ],
                    81: [ 2, 71 ],
                    82: [ 2, 71 ],
                    83: [ 2, 71 ],
                    84: [ 2, 71 ],
                    85: [ 2, 71 ]
                }, {
                    33: [ 2, 73 ],
                    75: [ 2, 73 ]
                }, {
                    23: [ 2, 29 ],
                    33: [ 2, 29 ],
                    54: [ 2, 29 ],
                    65: [ 2, 29 ],
                    68: [ 2, 29 ],
                    72: [ 2, 29 ],
                    75: [ 2, 29 ],
                    80: [ 2, 29 ],
                    81: [ 2, 29 ],
                    82: [ 2, 29 ],
                    83: [ 2, 29 ],
                    84: [ 2, 29 ],
                    85: [ 2, 29 ]
                }, {
                    14: [ 2, 15 ],
                    15: [ 2, 15 ],
                    19: [ 2, 15 ],
                    29: [ 2, 15 ],
                    34: [ 2, 15 ],
                    39: [ 2, 15 ],
                    44: [ 2, 15 ],
                    47: [ 2, 15 ],
                    48: [ 2, 15 ],
                    51: [ 2, 15 ],
                    55: [ 2, 15 ],
                    60: [ 2, 15 ]
                }, {
                    72: [ 1, 138 ],
                    77: [ 1, 137 ]
                }, {
                    72: [ 2, 100 ],
                    77: [ 2, 100 ]
                }, {
                    14: [ 2, 16 ],
                    15: [ 2, 16 ],
                    19: [ 2, 16 ],
                    29: [ 2, 16 ],
                    34: [ 2, 16 ],
                    44: [ 2, 16 ],
                    47: [ 2, 16 ],
                    48: [ 2, 16 ],
                    51: [ 2, 16 ],
                    55: [ 2, 16 ],
                    60: [ 2, 16 ]
                }, {
                    33: [ 1, 139 ]
                }, {
                    33: [ 2, 75 ]
                }, {
                    33: [ 2, 32 ]
                }, {
                    72: [ 2, 101 ],
                    77: [ 2, 101 ]
                }, {
                    14: [ 2, 17 ],
                    15: [ 2, 17 ],
                    19: [ 2, 17 ],
                    29: [ 2, 17 ],
                    34: [ 2, 17 ],
                    39: [ 2, 17 ],
                    44: [ 2, 17 ],
                    47: [ 2, 17 ],
                    48: [ 2, 17 ],
                    51: [ 2, 17 ],
                    55: [ 2, 17 ],
                    60: [ 2, 17 ]
                } ],
                defaultActions: {
                    4: [ 2, 1 ],
                    55: [ 2, 55 ],
                    57: [ 2, 20 ],
                    61: [ 2, 57 ],
                    74: [ 2, 81 ],
                    83: [ 2, 85 ],
                    87: [ 2, 18 ],
                    91: [ 2, 89 ],
                    102: [ 2, 53 ],
                    105: [ 2, 93 ],
                    111: [ 2, 19 ],
                    112: [ 2, 77 ],
                    117: [ 2, 97 ],
                    120: [ 2, 63 ],
                    123: [ 2, 69 ],
                    124: [ 2, 12 ],
                    136: [ 2, 75 ],
                    137: [ 2, 32 ]
                },
                parseError: function(str, hash) {
                    throw new Error(str);
                },
                parse: function(input) {
                    function lex() {
                        var token;
                        return token = self.lexer.lex() || 1, "number" != typeof token && (token = self.symbols_[token] || token), 
                        token;
                    }
                    var self = this, stack = [ 0 ], vstack = [ null ], lstack = [], table = this.table, yytext = "", yylineno = 0, yyleng = 0, recovering = 0;
                    this.lexer.setInput(input), this.lexer.yy = this.yy, this.yy.lexer = this.lexer, 
                    this.yy.parser = this, "undefined" == typeof this.lexer.yylloc && (this.lexer.yylloc = {});
                    var yyloc = this.lexer.yylloc;
                    lstack.push(yyloc);
                    var ranges = this.lexer.options && this.lexer.options.ranges;
                    "function" == typeof this.yy.parseError && (this.parseError = this.yy.parseError);
                    for (var symbol, preErrorSymbol, state, action, r, p, len, newState, expected, yyval = {}; ;) {
                        if (state = stack[stack.length - 1], this.defaultActions[state] ? action = this.defaultActions[state] : ((null === symbol || "undefined" == typeof symbol) && (symbol = lex()), 
                        action = table[state] && table[state][symbol]), "undefined" == typeof action || !action.length || !action[0]) {
                            var errStr = "";
                            if (!recovering) {
                                expected = [];
                                for (p in table[state]) this.terminals_[p] && p > 2 && expected.push("'" + this.terminals_[p] + "'");
                                errStr = this.lexer.showPosition ? "Parse error on line " + (yylineno + 1) + ":\n" + this.lexer.showPosition() + "\nExpecting " + expected.join(", ") + ", got '" + (this.terminals_[symbol] || symbol) + "'" : "Parse error on line " + (yylineno + 1) + ": Unexpected " + (1 == symbol ? "end of input" : "'" + (this.terminals_[symbol] || symbol) + "'"), 
                                this.parseError(errStr, {
                                    text: this.lexer.match,
                                    token: this.terminals_[symbol] || symbol,
                                    line: this.lexer.yylineno,
                                    loc: yyloc,
                                    expected: expected
                                });
                            }
                        }
                        if (action[0] instanceof Array && action.length > 1) throw new Error("Parse Error: multiple actions possible at state: " + state + ", token: " + symbol);
                        switch (action[0]) {
                          case 1:
                            stack.push(symbol), vstack.push(this.lexer.yytext), lstack.push(this.lexer.yylloc), 
                            stack.push(action[1]), symbol = null, preErrorSymbol ? (symbol = preErrorSymbol, 
                            preErrorSymbol = null) : (yyleng = this.lexer.yyleng, yytext = this.lexer.yytext, 
                            yylineno = this.lexer.yylineno, yyloc = this.lexer.yylloc, recovering > 0 && recovering--);
                            break;

                          case 2:
                            if (len = this.productions_[action[1]][1], yyval.$ = vstack[vstack.length - len], 
                            yyval._$ = {
                                first_line: lstack[lstack.length - (len || 1)].first_line,
                                last_line: lstack[lstack.length - 1].last_line,
                                first_column: lstack[lstack.length - (len || 1)].first_column,
                                last_column: lstack[lstack.length - 1].last_column
                            }, ranges && (yyval._$.range = [ lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1] ]), 
                            r = this.performAction.call(yyval, yytext, yyleng, yylineno, this.yy, action[1], vstack, lstack), 
                            "undefined" != typeof r) return r;
                            len && (stack = stack.slice(0, -1 * len * 2), vstack = vstack.slice(0, -1 * len), 
                            lstack = lstack.slice(0, -1 * len)), stack.push(this.productions_[action[1]][0]), 
                            vstack.push(yyval.$), lstack.push(yyval._$), newState = table[stack[stack.length - 2]][stack[stack.length - 1]], 
                            stack.push(newState);
                            break;

                          case 3:
                            return !0;
                        }
                    }
                    return !0;
                }
            }, lexer = function() {
                var lexer = {
                    EOF: 1,
                    parseError: function(str, hash) {
                        if (!this.yy.parser) throw new Error(str);
                        this.yy.parser.parseError(str, hash);
                    },
                    setInput: function(input) {
                        return this._input = input, this._more = this._less = this.done = !1, this.yylineno = this.yyleng = 0, 
                        this.yytext = this.matched = this.match = "", this.conditionStack = [ "INITIAL" ], 
                        this.yylloc = {
                            first_line: 1,
                            first_column: 0,
                            last_line: 1,
                            last_column: 0
                        }, this.options.ranges && (this.yylloc.range = [ 0, 0 ]), this.offset = 0, this;
                    },
                    input: function() {
                        var ch = this._input[0];
                        this.yytext += ch, this.yyleng++, this.offset++, this.match += ch, this.matched += ch;
                        var lines = ch.match(/(?:\r\n?|\n).*/g);
                        return lines ? (this.yylineno++, this.yylloc.last_line++) : this.yylloc.last_column++, 
                        this.options.ranges && this.yylloc.range[1]++, this._input = this._input.slice(1), 
                        ch;
                    },
                    unput: function(ch) {
                        var len = ch.length, lines = ch.split(/(?:\r\n?|\n)/g);
                        this._input = ch + this._input, this.yytext = this.yytext.substr(0, this.yytext.length - len - 1), 
                        this.offset -= len;
                        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
                        this.match = this.match.substr(0, this.match.length - 1), this.matched = this.matched.substr(0, this.matched.length - 1), 
                        lines.length - 1 && (this.yylineno -= lines.length - 1);
                        var r = this.yylloc.range;
                        return this.yylloc = {
                            first_line: this.yylloc.first_line,
                            last_line: this.yylineno + 1,
                            first_column: this.yylloc.first_column,
                            last_column: lines ? (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length : this.yylloc.first_column - len
                        }, this.options.ranges && (this.yylloc.range = [ r[0], r[0] + this.yyleng - len ]), 
                        this;
                    },
                    more: function() {
                        return this._more = !0, this;
                    },
                    less: function(n) {
                        this.unput(this.match.slice(n));
                    },
                    pastInput: function() {
                        var past = this.matched.substr(0, this.matched.length - this.match.length);
                        return (past.length > 20 ? "..." : "") + past.substr(-20).replace(/\n/g, "");
                    },
                    upcomingInput: function() {
                        var next = this.match;
                        return next.length < 20 && (next += this._input.substr(0, 20 - next.length)), (next.substr(0, 20) + (next.length > 20 ? "..." : "")).replace(/\n/g, "");
                    },
                    showPosition: function() {
                        var pre = this.pastInput(), c = new Array(pre.length + 1).join("-");
                        return pre + this.upcomingInput() + "\n" + c + "^";
                    },
                    next: function() {
                        if (this.done) return this.EOF;
                        this._input || (this.done = !0);
                        var token, match, tempMatch, index, lines;
                        this._more || (this.yytext = "", this.match = "");
                        for (var rules = this._currentRules(), i = 0; i < rules.length && (tempMatch = this._input.match(this.rules[rules[i]]), 
                        !tempMatch || match && !(tempMatch[0].length > match[0].length) || (match = tempMatch, 
                        index = i, this.options.flex)); i++) ;
                        return match ? (lines = match[0].match(/(?:\r\n?|\n).*/g), lines && (this.yylineno += lines.length), 
                        this.yylloc = {
                            first_line: this.yylloc.last_line,
                            last_line: this.yylineno + 1,
                            first_column: this.yylloc.last_column,
                            last_column: lines ? lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length : this.yylloc.last_column + match[0].length
                        }, this.yytext += match[0], this.match += match[0], this.matches = match, this.yyleng = this.yytext.length, 
                        this.options.ranges && (this.yylloc.range = [ this.offset, this.offset += this.yyleng ]), 
                        this._more = !1, this._input = this._input.slice(match[0].length), this.matched += match[0], 
                        token = this.performAction.call(this, this.yy, this, rules[index], this.conditionStack[this.conditionStack.length - 1]), 
                        this.done && this._input && (this.done = !1), token ? token : void 0) : "" === this._input ? this.EOF : this.parseError("Lexical error on line " + (this.yylineno + 1) + ". Unrecognized text.\n" + this.showPosition(), {
                            text: "",
                            token: null,
                            line: this.yylineno
                        });
                    },
                    lex: function() {
                        var r = this.next();
                        return "undefined" != typeof r ? r : this.lex();
                    },
                    begin: function(condition) {
                        this.conditionStack.push(condition);
                    },
                    popState: function() {
                        return this.conditionStack.pop();
                    },
                    _currentRules: function() {
                        return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
                    },
                    topState: function() {
                        return this.conditionStack[this.conditionStack.length - 2];
                    },
                    pushState: function(condition) {
                        this.begin(condition);
                    }
                };
                return lexer.options = {}, lexer.performAction = function(yy, yy_, $avoiding_name_collisions, YY_START) {
                    function strip(start, end) {
                        return yy_.yytext = yy_.yytext.substr(start, yy_.yyleng - end);
                    }
                    switch ($avoiding_name_collisions) {
                      case 0:
                        if ("\\\\" === yy_.yytext.slice(-2) ? (strip(0, 1), this.begin("mu")) : "\\" === yy_.yytext.slice(-1) ? (strip(0, 1), 
                        this.begin("emu")) : this.begin("mu"), yy_.yytext) return 15;
                        break;

                      case 1:
                        return 15;

                      case 2:
                        return this.popState(), 15;

                      case 3:
                        return this.begin("raw"), 15;

                      case 4:
                        return this.popState(), "raw" === this.conditionStack[this.conditionStack.length - 1] ? 15 : (yy_.yytext = yy_.yytext.substr(5, yy_.yyleng - 9), 
                        "END_RAW_BLOCK");

                      case 5:
                        return 15;

                      case 6:
                        return this.popState(), 14;

                      case 7:
                        return 65;

                      case 8:
                        return 68;

                      case 9:
                        return 19;

                      case 10:
                        return this.popState(), this.begin("raw"), 23;

                      case 11:
                        return 55;

                      case 12:
                        return 60;

                      case 13:
                        return 29;

                      case 14:
                        return 47;

                      case 15:
                        return this.popState(), 44;

                      case 16:
                        return this.popState(), 44;

                      case 17:
                        return 34;

                      case 18:
                        return 39;

                      case 19:
                        return 51;

                      case 20:
                        return 48;

                      case 21:
                        this.unput(yy_.yytext), this.popState(), this.begin("com");
                        break;

                      case 22:
                        return this.popState(), 14;

                      case 23:
                        return 48;

                      case 24:
                        return 73;

                      case 25:
                        return 72;

                      case 26:
                        return 72;

                      case 27:
                        return 87;

                      case 28:
                        break;

                      case 29:
                        return this.popState(), 54;

                      case 30:
                        return this.popState(), 33;

                      case 31:
                        return yy_.yytext = strip(1, 2).replace(/\\"/g, '"'), 80;

                      case 32:
                        return yy_.yytext = strip(1, 2).replace(/\\'/g, "'"), 80;

                      case 33:
                        return 85;

                      case 34:
                        return 82;

                      case 35:
                        return 82;

                      case 36:
                        return 83;

                      case 37:
                        return 84;

                      case 38:
                        return 81;

                      case 39:
                        return 75;

                      case 40:
                        return 77;

                      case 41:
                        return 72;

                      case 42:
                        return 72;

                      case 43:
                        return "INVALID";

                      case 44:
                        return 5;
                    }
                }, lexer.rules = [ /^(?:[^\x00]*?(?=(\{\{)))/, /^(?:[^\x00]+)/, /^(?:[^\x00]{2,}?(?=(\{\{|\\\{\{|\\\\\{\{|$)))/, /^(?:\{\{\{\{(?=[^/]))/, /^(?:\{\{\{\{\/[^\s!"#%-,\.\/;->@\[-\^`\{-~]+(?=[=}\s\/.])\}\}\}\})/, /^(?:[^\x00]*?(?=(\{\{\{\{)))/, /^(?:[\s\S]*?--(~)?\}\})/, /^(?:\()/, /^(?:\))/, /^(?:\{\{\{\{)/, /^(?:\}\}\}\})/, /^(?:\{\{(~)?>)/, /^(?:\{\{(~)?#>)/, /^(?:\{\{(~)?#\*?)/, /^(?:\{\{(~)?\/)/, /^(?:\{\{(~)?\^\s*(~)?\}\})/, /^(?:\{\{(~)?\s*else\s*(~)?\}\})/, /^(?:\{\{(~)?\^)/, /^(?:\{\{(~)?\s*else\b)/, /^(?:\{\{(~)?\{)/, /^(?:\{\{(~)?&)/, /^(?:\{\{(~)?!--)/, /^(?:\{\{(~)?![\s\S]*?\}\})/, /^(?:\{\{(~)?\*?)/, /^(?:=)/, /^(?:\.\.)/, /^(?:\.(?=([=~}\s\/.)|])))/, /^(?:[\/.])/, /^(?:\s+)/, /^(?:\}(~)?\}\})/, /^(?:(~)?\}\})/, /^(?:"(\\["]|[^"])*")/, /^(?:'(\\[']|[^'])*')/, /^(?:@)/, /^(?:true(?=([~}\s)])))/, /^(?:false(?=([~}\s)])))/, /^(?:undefined(?=([~}\s)])))/, /^(?:null(?=([~}\s)])))/, /^(?:-?[0-9]+(?:\.[0-9]+)?(?=([~}\s)])))/, /^(?:as\s+\|)/, /^(?:\|)/, /^(?:([^\s!"#%-,\.\/;->@\[-\^`\{-~]+(?=([=~}\s\/.)|]))))/, /^(?:\[[^\]]*\])/, /^(?:.)/, /^(?:$)/ ], 
                lexer.conditions = {
                    mu: {
                        rules: [ 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44 ],
                        inclusive: !1
                    },
                    emu: {
                        rules: [ 2 ],
                        inclusive: !1
                    },
                    com: {
                        rules: [ 6 ],
                        inclusive: !1
                    },
                    raw: {
                        rules: [ 3, 4, 5 ],
                        inclusive: !1
                    },
                    INITIAL: {
                        rules: [ 0, 1, 44 ],
                        inclusive: !0
                    }
                }, lexer;
            }();
            return parser.lexer = lexer, Parser.prototype = parser, parser.Parser = Parser, 
            new Parser();
        }();
        exports.__esModule = !0, exports["default"] = handlebars;
    }, function(module, exports, __webpack_require__) {
        "use strict";
        function WhitespaceControl() {
            var options = arguments.length <= 0 || void 0 === arguments[0] ? {} : arguments[0];
            this.options = options;
        }
        function isPrevWhitespace(body, i, isRoot) {
            void 0 === i && (i = body.length);
            var prev = body[i - 1], sibling = body[i - 2];
            return prev ? "ContentStatement" === prev.type ? (sibling || !isRoot ? /\r?\n\s*?$/ : /(^|\r?\n)\s*?$/).test(prev.original) : void 0 : isRoot;
        }
        function isNextWhitespace(body, i, isRoot) {
            void 0 === i && (i = -1);
            var next = body[i + 1], sibling = body[i + 2];
            return next ? "ContentStatement" === next.type ? (sibling || !isRoot ? /^\s*?\r?\n/ : /^\s*?(\r?\n|$)/).test(next.original) : void 0 : isRoot;
        }
        function omitRight(body, i, multiple) {
            var current = body[null == i ? 0 : i + 1];
            if (current && "ContentStatement" === current.type && (multiple || !current.rightStripped)) {
                var original = current.value;
                current.value = current.value.replace(multiple ? /^\s+/ : /^[ \t]*\r?\n?/, ""), 
                current.rightStripped = current.value !== original;
            }
        }
        function omitLeft(body, i, multiple) {
            var current = body[null == i ? body.length - 1 : i - 1];
            if (current && "ContentStatement" === current.type && (multiple || !current.leftStripped)) {
                var original = current.value;
                return current.value = current.value.replace(multiple ? /\s+$/ : /[ \t]+$/, ""), 
                current.leftStripped = current.value !== original, current.leftStripped;
            }
        }
        var _interopRequireDefault = __webpack_require__(1)["default"];
        exports.__esModule = !0;
        var _visitor = __webpack_require__(25), _visitor2 = _interopRequireDefault(_visitor);
        WhitespaceControl.prototype = new _visitor2["default"](), WhitespaceControl.prototype.Program = function(program) {
            var doStandalone = !this.options.ignoreStandalone, isRoot = !this.isRootSeen;
            this.isRootSeen = !0;
            for (var body = program.body, i = 0, l = body.length; l > i; i++) {
                var current = body[i], strip = this.accept(current);
                if (strip) {
                    var _isPrevWhitespace = isPrevWhitespace(body, i, isRoot), _isNextWhitespace = isNextWhitespace(body, i, isRoot), openStandalone = strip.openStandalone && _isPrevWhitespace, closeStandalone = strip.closeStandalone && _isNextWhitespace, inlineStandalone = strip.inlineStandalone && _isPrevWhitespace && _isNextWhitespace;
                    strip.close && omitRight(body, i, !0), strip.open && omitLeft(body, i, !0), doStandalone && inlineStandalone && (omitRight(body, i), 
                    omitLeft(body, i) && "PartialStatement" === current.type && (current.indent = /([ \t]+$)/.exec(body[i - 1].original)[1])), 
                    doStandalone && openStandalone && (omitRight((current.program || current.inverse).body), 
                    omitLeft(body, i)), doStandalone && closeStandalone && (omitRight(body, i), omitLeft((current.inverse || current.program).body));
                }
            }
            return program;
        }, WhitespaceControl.prototype.BlockStatement = WhitespaceControl.prototype.DecoratorBlock = WhitespaceControl.prototype.PartialBlockStatement = function(block) {
            this.accept(block.program), this.accept(block.inverse);
            var program = block.program || block.inverse, inverse = block.program && block.inverse, firstInverse = inverse, lastInverse = inverse;
            if (inverse && inverse.chained) for (firstInverse = inverse.body[0].program; lastInverse.chained; ) lastInverse = lastInverse.body[lastInverse.body.length - 1].program;
            var strip = {
                open: block.openStrip.open,
                close: block.closeStrip.close,
                openStandalone: isNextWhitespace(program.body),
                closeStandalone: isPrevWhitespace((firstInverse || program).body)
            };
            if (block.openStrip.close && omitRight(program.body, null, !0), inverse) {
                var inverseStrip = block.inverseStrip;
                inverseStrip.open && omitLeft(program.body, null, !0), inverseStrip.close && omitRight(firstInverse.body, null, !0), 
                block.closeStrip.open && omitLeft(lastInverse.body, null, !0), !this.options.ignoreStandalone && isPrevWhitespace(program.body) && isNextWhitespace(firstInverse.body) && (omitLeft(program.body), 
                omitRight(firstInverse.body));
            } else block.closeStrip.open && omitLeft(program.body, null, !0);
            return strip;
        }, WhitespaceControl.prototype.Decorator = WhitespaceControl.prototype.MustacheStatement = function(mustache) {
            return mustache.strip;
        }, WhitespaceControl.prototype.PartialStatement = WhitespaceControl.prototype.CommentStatement = function(node) {
            var strip = node.strip || {};
            return {
                inlineStandalone: !0,
                open: strip.open,
                close: strip.close
            };
        }, exports["default"] = WhitespaceControl, module.exports = exports["default"];
    }, function(module, exports, __webpack_require__) {
        "use strict";
        function Visitor() {
            this.parents = [];
        }
        function visitSubExpression(mustache) {
            this.acceptRequired(mustache, "path"), this.acceptArray(mustache.params), this.acceptKey(mustache, "hash");
        }
        function visitBlock(block) {
            visitSubExpression.call(this, block), this.acceptKey(block, "program"), this.acceptKey(block, "inverse");
        }
        function visitPartial(partial) {
            this.acceptRequired(partial, "name"), this.acceptArray(partial.params), this.acceptKey(partial, "hash");
        }
        var _interopRequireDefault = __webpack_require__(1)["default"];
        exports.__esModule = !0;
        var _exception = __webpack_require__(6), _exception2 = _interopRequireDefault(_exception);
        Visitor.prototype = {
            constructor: Visitor,
            mutating: !1,
            acceptKey: function(node, name) {
                var value = this.accept(node[name]);
                if (this.mutating) {
                    if (value && !Visitor.prototype[value.type]) throw new _exception2["default"]('Unexpected node type "' + value.type + '" found when accepting ' + name + " on " + node.type);
                    node[name] = value;
                }
            },
            acceptRequired: function(node, name) {
                if (this.acceptKey(node, name), !node[name]) throw new _exception2["default"](node.type + " requires " + name);
            },
            acceptArray: function(array) {
                for (var i = 0, l = array.length; l > i; i++) this.acceptKey(array, i), array[i] || (array.splice(i, 1), 
                i--, l--);
            },
            accept: function(object) {
                if (object) {
                    if (!this[object.type]) throw new _exception2["default"]("Unknown type: " + object.type, object);
                    this.current && this.parents.unshift(this.current), this.current = object;
                    var ret = this[object.type](object);
                    return this.current = this.parents.shift(), !this.mutating || ret ? ret : ret !== !1 ? object : void 0;
                }
            },
            Program: function(program) {
                this.acceptArray(program.body);
            },
            MustacheStatement: visitSubExpression,
            Decorator: visitSubExpression,
            BlockStatement: visitBlock,
            DecoratorBlock: visitBlock,
            PartialStatement: visitPartial,
            PartialBlockStatement: function(partial) {
                visitPartial.call(this, partial), this.acceptKey(partial, "program");
            },
            ContentStatement: function() {},
            CommentStatement: function() {},
            SubExpression: visitSubExpression,
            PathExpression: function() {},
            StringLiteral: function() {},
            NumberLiteral: function() {},
            BooleanLiteral: function() {},
            UndefinedLiteral: function() {},
            NullLiteral: function() {},
            Hash: function(hash) {
                this.acceptArray(hash.pairs);
            },
            HashPair: function(pair) {
                this.acceptRequired(pair, "value");
            }
        }, exports["default"] = Visitor, module.exports = exports["default"];
    }, function(module, exports, __webpack_require__) {
        "use strict";
        function validateClose(open, close) {
            if (close = close.path ? close.path.original : close, open.path.original !== close) {
                var errorNode = {
                    loc: open.path.loc
                };
                throw new _exception2["default"](open.path.original + " doesn't match " + close, errorNode);
            }
        }
        function SourceLocation(source, locInfo) {
            this.source = source, this.start = {
                line: locInfo.first_line,
                column: locInfo.first_column
            }, this.end = {
                line: locInfo.last_line,
                column: locInfo.last_column
            };
        }
        function id(token) {
            return /^\[.*\]$/.test(token) ? token.substr(1, token.length - 2) : token;
        }
        function stripFlags(open, close) {
            return {
                open: "~" === open.charAt(2),
                close: "~" === close.charAt(close.length - 3)
            };
        }
        function stripComment(comment) {
            return comment.replace(/^\{\{~?\!-?-?/, "").replace(/-?-?~?\}\}$/, "");
        }
        function preparePath(data, parts, loc) {
            loc = this.locInfo(loc);
            for (var original = data ? "@" : "", dig = [], depth = 0, depthString = "", i = 0, l = parts.length; l > i; i++) {
                var part = parts[i].part, isLiteral = parts[i].original !== part;
                if (original += (parts[i].separator || "") + part, isLiteral || ".." !== part && "." !== part && "this" !== part) dig.push(part); else {
                    if (dig.length > 0) throw new _exception2["default"]("Invalid path: " + original, {
                        loc: loc
                    });
                    ".." === part && (depth++, depthString += "../");
                }
            }
            return {
                type: "PathExpression",
                data: data,
                depth: depth,
                parts: dig,
                original: original,
                loc: loc
            };
        }
        function prepareMustache(path, params, hash, open, strip, locInfo) {
            var escapeFlag = open.charAt(3) || open.charAt(2), escaped = "{" !== escapeFlag && "&" !== escapeFlag, decorator = /\*/.test(open);
            return {
                type: decorator ? "Decorator" : "MustacheStatement",
                path: path,
                params: params,
                hash: hash,
                escaped: escaped,
                strip: strip,
                loc: this.locInfo(locInfo)
            };
        }
        function prepareRawBlock(openRawBlock, contents, close, locInfo) {
            validateClose(openRawBlock, close), locInfo = this.locInfo(locInfo);
            var program = {
                type: "Program",
                body: contents,
                strip: {},
                loc: locInfo
            };
            return {
                type: "BlockStatement",
                path: openRawBlock.path,
                params: openRawBlock.params,
                hash: openRawBlock.hash,
                program: program,
                openStrip: {},
                inverseStrip: {},
                closeStrip: {},
                loc: locInfo
            };
        }
        function prepareBlock(openBlock, program, inverseAndProgram, close, inverted, locInfo) {
            close && close.path && validateClose(openBlock, close);
            var decorator = /\*/.test(openBlock.open);
            program.blockParams = openBlock.blockParams;
            var inverse = void 0, inverseStrip = void 0;
            if (inverseAndProgram) {
                if (decorator) throw new _exception2["default"]("Unexpected inverse block on decorator", inverseAndProgram);
                inverseAndProgram.chain && (inverseAndProgram.program.body[0].closeStrip = close.strip), 
                inverseStrip = inverseAndProgram.strip, inverse = inverseAndProgram.program;
            }
            return inverted && (inverted = inverse, inverse = program, program = inverted), 
            {
                type: decorator ? "DecoratorBlock" : "BlockStatement",
                path: openBlock.path,
                params: openBlock.params,
                hash: openBlock.hash,
                program: program,
                inverse: inverse,
                openStrip: openBlock.strip,
                inverseStrip: inverseStrip,
                closeStrip: close && close.strip,
                loc: this.locInfo(locInfo)
            };
        }
        function prepareProgram(statements, loc) {
            if (!loc && statements.length) {
                var firstLoc = statements[0].loc, lastLoc = statements[statements.length - 1].loc;
                firstLoc && lastLoc && (loc = {
                    source: firstLoc.source,
                    start: {
                        line: firstLoc.start.line,
                        column: firstLoc.start.column
                    },
                    end: {
                        line: lastLoc.end.line,
                        column: lastLoc.end.column
                    }
                });
            }
            return {
                type: "Program",
                body: statements,
                strip: {},
                loc: loc
            };
        }
        function preparePartialBlock(open, program, close, locInfo) {
            return validateClose(open, close), {
                type: "PartialBlockStatement",
                name: open.path,
                params: open.params,
                hash: open.hash,
                program: program,
                openStrip: open.strip,
                closeStrip: close && close.strip,
                loc: this.locInfo(locInfo)
            };
        }
        var _interopRequireDefault = __webpack_require__(1)["default"];
        exports.__esModule = !0, exports.SourceLocation = SourceLocation, exports.id = id, 
        exports.stripFlags = stripFlags, exports.stripComment = stripComment, exports.preparePath = preparePath, 
        exports.prepareMustache = prepareMustache, exports.prepareRawBlock = prepareRawBlock, 
        exports.prepareBlock = prepareBlock, exports.prepareProgram = prepareProgram, exports.preparePartialBlock = preparePartialBlock;
        var _exception = __webpack_require__(6), _exception2 = _interopRequireDefault(_exception);
    }, function(module, exports, __webpack_require__) {
        "use strict";
        function Compiler() {}
        function precompile(input, options, env) {
            if (null == input || "string" != typeof input && "Program" !== input.type) throw new _exception2["default"]("You must pass a string or Handlebars AST to Handlebars.precompile. You passed " + input);
            options = options || {}, "data" in options || (options.data = !0), options.compat && (options.useDepths = !0);
            var ast = env.parse(input, options), environment = new env.Compiler().compile(ast, options);
            return new env.JavaScriptCompiler().compile(environment, options);
        }
        function compile(input, options, env) {
            function compileInput() {
                var ast = env.parse(input, options), environment = new env.Compiler().compile(ast, options), templateSpec = new env.JavaScriptCompiler().compile(environment, options, void 0, !0);
                return env.template(templateSpec);
            }
            function ret(context, execOptions) {
                return compiled || (compiled = compileInput()), compiled.call(this, context, execOptions);
            }
            if (void 0 === options && (options = {}), null == input || "string" != typeof input && "Program" !== input.type) throw new _exception2["default"]("You must pass a string or Handlebars AST to Handlebars.compile. You passed " + input);
            "data" in options || (options.data = !0), options.compat && (options.useDepths = !0);
            var compiled = void 0;
            return ret._setup = function(setupOptions) {
                return compiled || (compiled = compileInput()), compiled._setup(setupOptions);
            }, ret._child = function(i, data, blockParams, depths) {
                return compiled || (compiled = compileInput()), compiled._child(i, data, blockParams, depths);
            }, ret;
        }
        function argEquals(a, b) {
            if (a === b) return !0;
            if (_utils.isArray(a) && _utils.isArray(b) && a.length === b.length) {
                for (var i = 0; i < a.length; i++) if (!argEquals(a[i], b[i])) return !1;
                return !0;
            }
        }
        function transformLiteralToPath(sexpr) {
            if (!sexpr.path.parts) {
                var literal = sexpr.path;
                sexpr.path = {
                    type: "PathExpression",
                    data: !1,
                    depth: 0,
                    parts: [ literal.original + "" ],
                    original: literal.original + "",
                    loc: literal.loc
                };
            }
        }
        var _interopRequireDefault = __webpack_require__(1)["default"];
        exports.__esModule = !0, exports.Compiler = Compiler, exports.precompile = precompile, 
        exports.compile = compile;
        var _exception = __webpack_require__(6), _exception2 = _interopRequireDefault(_exception), _utils = __webpack_require__(5), _ast = __webpack_require__(21), _ast2 = _interopRequireDefault(_ast), slice = [].slice;
        Compiler.prototype = {
            compiler: Compiler,
            equals: function(other) {
                var len = this.opcodes.length;
                if (other.opcodes.length !== len) return !1;
                for (var i = 0; len > i; i++) {
                    var opcode = this.opcodes[i], otherOpcode = other.opcodes[i];
                    if (opcode.opcode !== otherOpcode.opcode || !argEquals(opcode.args, otherOpcode.args)) return !1;
                }
                len = this.children.length;
                for (var i = 0; len > i; i++) if (!this.children[i].equals(other.children[i])) return !1;
                return !0;
            },
            guid: 0,
            compile: function(program, options) {
                this.sourceNode = [], this.opcodes = [], this.children = [], this.options = options, 
                this.stringParams = options.stringParams, this.trackIds = options.trackIds, options.blockParams = options.blockParams || [];
                var knownHelpers = options.knownHelpers;
                if (options.knownHelpers = {
                    helperMissing: !0,
                    blockHelperMissing: !0,
                    each: !0,
                    "if": !0,
                    unless: !0,
                    "with": !0,
                    log: !0,
                    lookup: !0
                }, knownHelpers) for (var _name in knownHelpers) _name in knownHelpers && (options.knownHelpers[_name] = knownHelpers[_name]);
                return this.accept(program);
            },
            compileProgram: function(program) {
                var childCompiler = new this.compiler(), result = childCompiler.compile(program, this.options), guid = this.guid++;
                return this.usePartial = this.usePartial || result.usePartial, this.children[guid] = result, 
                this.useDepths = this.useDepths || result.useDepths, guid;
            },
            accept: function(node) {
                if (!this[node.type]) throw new _exception2["default"]("Unknown type: " + node.type, node);
                this.sourceNode.unshift(node);
                var ret = this[node.type](node);
                return this.sourceNode.shift(), ret;
            },
            Program: function(program) {
                this.options.blockParams.unshift(program.blockParams);
                for (var body = program.body, bodyLength = body.length, i = 0; bodyLength > i; i++) this.accept(body[i]);
                return this.options.blockParams.shift(), this.isSimple = 1 === bodyLength, this.blockParams = program.blockParams ? program.blockParams.length : 0, 
                this;
            },
            BlockStatement: function(block) {
                transformLiteralToPath(block);
                var program = block.program, inverse = block.inverse;
                program = program && this.compileProgram(program), inverse = inverse && this.compileProgram(inverse);
                var type = this.classifySexpr(block);
                "helper" === type ? this.helperSexpr(block, program, inverse) : "simple" === type ? (this.simpleSexpr(block), 
                this.opcode("pushProgram", program), this.opcode("pushProgram", inverse), this.opcode("emptyHash"), 
                this.opcode("blockValue", block.path.original)) : (this.ambiguousSexpr(block, program, inverse), 
                this.opcode("pushProgram", program), this.opcode("pushProgram", inverse), this.opcode("emptyHash"), 
                this.opcode("ambiguousBlockValue")), this.opcode("append");
            },
            DecoratorBlock: function(decorator) {
                var program = decorator.program && this.compileProgram(decorator.program), params = this.setupFullMustacheParams(decorator, program, void 0), path = decorator.path;
                this.useDecorators = !0, this.opcode("registerDecorator", params.length, path.original);
            },
            PartialStatement: function(partial) {
                this.usePartial = !0;
                var program = partial.program;
                program && (program = this.compileProgram(partial.program));
                var params = partial.params;
                if (params.length > 1) throw new _exception2["default"]("Unsupported number of partial arguments: " + params.length, partial);
                params.length || (this.options.explicitPartialContext ? this.opcode("pushLiteral", "undefined") : params.push({
                    type: "PathExpression",
                    parts: [],
                    depth: 0
                }));
                var partialName = partial.name.original, isDynamic = "SubExpression" === partial.name.type;
                isDynamic && this.accept(partial.name), this.setupFullMustacheParams(partial, program, void 0, !0);
                var indent = partial.indent || "";
                this.options.preventIndent && indent && (this.opcode("appendContent", indent), indent = ""), 
                this.opcode("invokePartial", isDynamic, partialName, indent), this.opcode("append");
            },
            PartialBlockStatement: function(partialBlock) {
                this.PartialStatement(partialBlock);
            },
            MustacheStatement: function(mustache) {
                this.SubExpression(mustache), mustache.escaped && !this.options.noEscape ? this.opcode("appendEscaped") : this.opcode("append");
            },
            Decorator: function(decorator) {
                this.DecoratorBlock(decorator);
            },
            ContentStatement: function(content) {
                content.value && this.opcode("appendContent", content.value);
            },
            CommentStatement: function() {},
            SubExpression: function(sexpr) {
                transformLiteralToPath(sexpr);
                var type = this.classifySexpr(sexpr);
                "simple" === type ? this.simpleSexpr(sexpr) : "helper" === type ? this.helperSexpr(sexpr) : this.ambiguousSexpr(sexpr);
            },
            ambiguousSexpr: function(sexpr, program, inverse) {
                var path = sexpr.path, name = path.parts[0], isBlock = null != program || null != inverse;
                this.opcode("getContext", path.depth), this.opcode("pushProgram", program), this.opcode("pushProgram", inverse), 
                path.strict = !0, this.accept(path), this.opcode("invokeAmbiguous", name, isBlock);
            },
            simpleSexpr: function(sexpr) {
                var path = sexpr.path;
                path.strict = !0, this.accept(path), this.opcode("resolvePossibleLambda");
            },
            helperSexpr: function(sexpr, program, inverse) {
                var params = this.setupFullMustacheParams(sexpr, program, inverse), path = sexpr.path, name = path.parts[0];
                if (this.options.knownHelpers[name]) this.opcode("invokeKnownHelper", params.length, name); else {
                    if (this.options.knownHelpersOnly) throw new _exception2["default"]("You specified knownHelpersOnly, but used the unknown helper " + name, sexpr);
                    path.strict = !0, path.falsy = !0, this.accept(path), this.opcode("invokeHelper", params.length, path.original, _ast2["default"].helpers.simpleId(path));
                }
            },
            PathExpression: function(path) {
                this.addDepth(path.depth), this.opcode("getContext", path.depth);
                var name = path.parts[0], scoped = _ast2["default"].helpers.scopedId(path), blockParamId = !path.depth && !scoped && this.blockParamIndex(name);
                blockParamId ? this.opcode("lookupBlockParam", blockParamId, path.parts) : name ? path.data ? (this.options.data = !0, 
                this.opcode("lookupData", path.depth, path.parts, path.strict)) : this.opcode("lookupOnContext", path.parts, path.falsy, path.strict, scoped) : this.opcode("pushContext");
            },
            StringLiteral: function(string) {
                this.opcode("pushString", string.value);
            },
            NumberLiteral: function(number) {
                this.opcode("pushLiteral", number.value);
            },
            BooleanLiteral: function(bool) {
                this.opcode("pushLiteral", bool.value);
            },
            UndefinedLiteral: function() {
                this.opcode("pushLiteral", "undefined");
            },
            NullLiteral: function() {
                this.opcode("pushLiteral", "null");
            },
            Hash: function(hash) {
                var pairs = hash.pairs, i = 0, l = pairs.length;
                for (this.opcode("pushHash"); l > i; i++) this.pushParam(pairs[i].value);
                for (;i--; ) this.opcode("assignToHash", pairs[i].key);
                this.opcode("popHash");
            },
            opcode: function(name) {
                this.opcodes.push({
                    opcode: name,
                    args: slice.call(arguments, 1),
                    loc: this.sourceNode[0].loc
                });
            },
            addDepth: function(depth) {
                depth && (this.useDepths = !0);
            },
            classifySexpr: function(sexpr) {
                var isSimple = _ast2["default"].helpers.simpleId(sexpr.path), isBlockParam = isSimple && !!this.blockParamIndex(sexpr.path.parts[0]), isHelper = !isBlockParam && _ast2["default"].helpers.helperExpression(sexpr), isEligible = !isBlockParam && (isHelper || isSimple);
                if (isEligible && !isHelper) {
                    var _name2 = sexpr.path.parts[0], options = this.options;
                    options.knownHelpers[_name2] ? isHelper = !0 : options.knownHelpersOnly && (isEligible = !1);
                }
                return isHelper ? "helper" : isEligible ? "ambiguous" : "simple";
            },
            pushParams: function(params) {
                for (var i = 0, l = params.length; l > i; i++) this.pushParam(params[i]);
            },
            pushParam: function(val) {
                var value = null != val.value ? val.value : val.original || "";
                if (this.stringParams) value.replace && (value = value.replace(/^(\.?\.\/)*/g, "").replace(/\//g, ".")), 
                val.depth && this.addDepth(val.depth), this.opcode("getContext", val.depth || 0), 
                this.opcode("pushStringParam", value, val.type), "SubExpression" === val.type && this.accept(val); else {
                    if (this.trackIds) {
                        var blockParamIndex = void 0;
                        if (!val.parts || _ast2["default"].helpers.scopedId(val) || val.depth || (blockParamIndex = this.blockParamIndex(val.parts[0])), 
                        blockParamIndex) {
                            var blockParamChild = val.parts.slice(1).join(".");
                            this.opcode("pushId", "BlockParam", blockParamIndex, blockParamChild);
                        } else value = val.original || value, value.replace && (value = value.replace(/^this(?:\.|$)/, "").replace(/^\.\//, "").replace(/^\.$/, "")), 
                        this.opcode("pushId", val.type, value);
                    }
                    this.accept(val);
                }
            },
            setupFullMustacheParams: function(sexpr, program, inverse, omitEmpty) {
                var params = sexpr.params;
                return this.pushParams(params), this.opcode("pushProgram", program), this.opcode("pushProgram", inverse), 
                sexpr.hash ? this.accept(sexpr.hash) : this.opcode("emptyHash", omitEmpty), params;
            },
            blockParamIndex: function(name) {
                for (var depth = 0, len = this.options.blockParams.length; len > depth; depth++) {
                    var blockParams = this.options.blockParams[depth], param = blockParams && _utils.indexOf(blockParams, name);
                    if (blockParams && param >= 0) return [ depth, param ];
                }
            }
        };
    }, function(module, exports, __webpack_require__) {
        "use strict";
        function Literal(value) {
            this.value = value;
        }
        function JavaScriptCompiler() {}
        function strictLookup(requireTerminal, compiler, parts, type) {
            var stack = compiler.popStack(), i = 0, len = parts.length;
            for (requireTerminal && len--; len > i; i++) stack = compiler.nameLookup(stack, parts[i], type);
            return requireTerminal ? [ compiler.aliasable("container.strict"), "(", stack, ", ", compiler.quotedString(parts[i]), ")" ] : stack;
        }
        var _interopRequireDefault = __webpack_require__(1)["default"];
        exports.__esModule = !0;
        var _base = __webpack_require__(4), _exception = __webpack_require__(6), _exception2 = _interopRequireDefault(_exception), _utils = __webpack_require__(5), _codeGen = __webpack_require__(29), _codeGen2 = _interopRequireDefault(_codeGen);
        JavaScriptCompiler.prototype = {
            nameLookup: function(parent, name) {
                return JavaScriptCompiler.isValidJavaScriptVariableName(name) ? [ parent, ".", name ] : [ parent, "[", JSON.stringify(name), "]" ];
            },
            depthedLookup: function(name) {
                return [ this.aliasable("container.lookup"), '(depths, "', name, '")' ];
            },
            compilerInfo: function() {
                var revision = _base.COMPILER_REVISION, versions = _base.REVISION_CHANGES[revision];
                return [ revision, versions ];
            },
            appendToBuffer: function(source, location, explicit) {
                return _utils.isArray(source) || (source = [ source ]), source = this.source.wrap(source, location), 
                this.environment.isSimple ? [ "return ", source, ";" ] : explicit ? [ "buffer += ", source, ";" ] : (source.appendToBuffer = !0, 
                source);
            },
            initializeBuffer: function() {
                return this.quotedString("");
            },
            compile: function(environment, options, context, asObject) {
                this.environment = environment, this.options = options, this.stringParams = this.options.stringParams, 
                this.trackIds = this.options.trackIds, this.precompile = !asObject, this.name = this.environment.name, 
                this.isChild = !!context, this.context = context || {
                    decorators: [],
                    programs: [],
                    environments: []
                }, this.preamble(), this.stackSlot = 0, this.stackVars = [], this.aliases = {}, 
                this.registers = {
                    list: []
                }, this.hashes = [], this.compileStack = [], this.inlineStack = [], this.blockParams = [], 
                this.compileChildren(environment, options), this.useDepths = this.useDepths || environment.useDepths || environment.useDecorators || this.options.compat, 
                this.useBlockParams = this.useBlockParams || environment.useBlockParams;
                var opcodes = environment.opcodes, opcode = void 0, firstLoc = void 0, i = void 0, l = void 0;
                for (i = 0, l = opcodes.length; l > i; i++) opcode = opcodes[i], this.source.currentLocation = opcode.loc, 
                firstLoc = firstLoc || opcode.loc, this[opcode.opcode].apply(this, opcode.args);
                if (this.source.currentLocation = firstLoc, this.pushSource(""), this.stackSlot || this.inlineStack.length || this.compileStack.length) throw new _exception2["default"]("Compile completed with content left on stack");
                this.decorators.isEmpty() ? this.decorators = void 0 : (this.useDecorators = !0, 
                this.decorators.prepend("var decorators = container.decorators;\n"), this.decorators.push("return fn;"), 
                asObject ? this.decorators = Function.apply(this, [ "fn", "props", "container", "depth0", "data", "blockParams", "depths", this.decorators.merge() ]) : (this.decorators.prepend("function(fn, props, container, depth0, data, blockParams, depths) {\n"), 
                this.decorators.push("}\n"), this.decorators = this.decorators.merge()));
                var fn = this.createFunctionContext(asObject);
                if (this.isChild) return fn;
                var ret = {
                    compiler: this.compilerInfo(),
                    main: fn
                };
                this.decorators && (ret.main_d = this.decorators, ret.useDecorators = !0);
                var _context = this.context, programs = _context.programs, decorators = _context.decorators;
                for (i = 0, l = programs.length; l > i; i++) programs[i] && (ret[i] = programs[i], 
                decorators[i] && (ret[i + "_d"] = decorators[i], ret.useDecorators = !0));
                return this.environment.usePartial && (ret.usePartial = !0), this.options.data && (ret.useData = !0), 
                this.useDepths && (ret.useDepths = !0), this.useBlockParams && (ret.useBlockParams = !0), 
                this.options.compat && (ret.compat = !0), asObject ? ret.compilerOptions = this.options : (ret.compiler = JSON.stringify(ret.compiler), 
                this.source.currentLocation = {
                    start: {
                        line: 1,
                        column: 0
                    }
                }, ret = this.objectLiteral(ret), options.srcName ? (ret = ret.toStringWithSourceMap({
                    file: options.destName
                }), ret.map = ret.map && ret.map.toString()) : ret = ret.toString()), ret;
            },
            preamble: function() {
                this.lastContext = 0, this.source = new _codeGen2["default"](this.options.srcName), 
                this.decorators = new _codeGen2["default"](this.options.srcName);
            },
            createFunctionContext: function(asObject) {
                var varDeclarations = "", locals = this.stackVars.concat(this.registers.list);
                locals.length > 0 && (varDeclarations += ", " + locals.join(", "));
                var aliasCount = 0;
                for (var alias in this.aliases) {
                    var node = this.aliases[alias];
                    this.aliases.hasOwnProperty(alias) && node.children && node.referenceCount > 1 && (varDeclarations += ", alias" + ++aliasCount + "=" + alias, 
                    node.children[0] = "alias" + aliasCount);
                }
                var params = [ "container", "depth0", "helpers", "partials", "data" ];
                (this.useBlockParams || this.useDepths) && params.push("blockParams"), this.useDepths && params.push("depths");
                var source = this.mergeSource(varDeclarations);
                return asObject ? (params.push(source), Function.apply(this, params)) : this.source.wrap([ "function(", params.join(","), ") {\n  ", source, "}" ]);
            },
            mergeSource: function(varDeclarations) {
                var isSimple = this.environment.isSimple, appendOnly = !this.forceBuffer, appendFirst = void 0, sourceSeen = void 0, bufferStart = void 0, bufferEnd = void 0;
                return this.source.each(function(line) {
                    line.appendToBuffer ? (bufferStart ? line.prepend("  + ") : bufferStart = line, 
                    bufferEnd = line) : (bufferStart && (sourceSeen ? bufferStart.prepend("buffer += ") : appendFirst = !0, 
                    bufferEnd.add(";"), bufferStart = bufferEnd = void 0), sourceSeen = !0, isSimple || (appendOnly = !1));
                }), appendOnly ? bufferStart ? (bufferStart.prepend("return "), bufferEnd.add(";")) : sourceSeen || this.source.push('return "";') : (varDeclarations += ", buffer = " + (appendFirst ? "" : this.initializeBuffer()), 
                bufferStart ? (bufferStart.prepend("return buffer + "), bufferEnd.add(";")) : this.source.push("return buffer;")), 
                varDeclarations && this.source.prepend("var " + varDeclarations.substring(2) + (appendFirst ? "" : ";\n")), 
                this.source.merge();
            },
            blockValue: function(name) {
                var blockHelperMissing = this.aliasable("helpers.blockHelperMissing"), params = [ this.contextName(0) ];
                this.setupHelperArgs(name, 0, params);
                var blockName = this.popStack();
                params.splice(1, 0, blockName), this.push(this.source.functionCall(blockHelperMissing, "call", params));
            },
            ambiguousBlockValue: function() {
                var blockHelperMissing = this.aliasable("helpers.blockHelperMissing"), params = [ this.contextName(0) ];
                this.setupHelperArgs("", 0, params, !0), this.flushInline();
                var current = this.topStack();
                params.splice(1, 0, current), this.pushSource([ "if (!", this.lastHelper, ") { ", current, " = ", this.source.functionCall(blockHelperMissing, "call", params), "}" ]);
            },
            appendContent: function(content) {
                this.pendingContent ? content = this.pendingContent + content : this.pendingLocation = this.source.currentLocation, 
                this.pendingContent = content;
            },
            append: function() {
                if (this.isInline()) this.replaceStack(function(current) {
                    return [ " != null ? ", current, ' : ""' ];
                }), this.pushSource(this.appendToBuffer(this.popStack())); else {
                    var local = this.popStack();
                    this.pushSource([ "if (", local, " != null) { ", this.appendToBuffer(local, void 0, !0), " }" ]), 
                    this.environment.isSimple && this.pushSource([ "else { ", this.appendToBuffer("''", void 0, !0), " }" ]);
                }
            },
            appendEscaped: function() {
                this.pushSource(this.appendToBuffer([ this.aliasable("container.escapeExpression"), "(", this.popStack(), ")" ]));
            },
            getContext: function(depth) {
                this.lastContext = depth;
            },
            pushContext: function() {
                this.pushStackLiteral(this.contextName(this.lastContext));
            },
            lookupOnContext: function(parts, falsy, strict, scoped) {
                var i = 0;
                scoped || !this.options.compat || this.lastContext ? this.pushContext() : this.push(this.depthedLookup(parts[i++])), 
                this.resolvePath("context", parts, i, falsy, strict);
            },
            lookupBlockParam: function(blockParamId, parts) {
                this.useBlockParams = !0, this.push([ "blockParams[", blockParamId[0], "][", blockParamId[1], "]" ]), 
                this.resolvePath("context", parts, 1);
            },
            lookupData: function(depth, parts, strict) {
                depth ? this.pushStackLiteral("container.data(data, " + depth + ")") : this.pushStackLiteral("data"), 
                this.resolvePath("data", parts, 0, !0, strict);
            },
            resolvePath: function(type, parts, i, falsy, strict) {
                var _this = this;
                if (this.options.strict || this.options.assumeObjects) return void this.push(strictLookup(this.options.strict && strict, this, parts, type));
                for (var len = parts.length; len > i; i++) this.replaceStack(function(current) {
                    var lookup = _this.nameLookup(current, parts[i], type);
                    return falsy ? [ " && ", lookup ] : [ " != null ? ", lookup, " : ", current ];
                });
            },
            resolvePossibleLambda: function() {
                this.push([ this.aliasable("container.lambda"), "(", this.popStack(), ", ", this.contextName(0), ")" ]);
            },
            pushStringParam: function(string, type) {
                this.pushContext(), this.pushString(type), "SubExpression" !== type && ("string" == typeof string ? this.pushString(string) : this.pushStackLiteral(string));
            },
            emptyHash: function(omitEmpty) {
                this.trackIds && this.push("{}"), this.stringParams && (this.push("{}"), this.push("{}")), 
                this.pushStackLiteral(omitEmpty ? "undefined" : "{}");
            },
            pushHash: function() {
                this.hash && this.hashes.push(this.hash), this.hash = {
                    values: [],
                    types: [],
                    contexts: [],
                    ids: []
                };
            },
            popHash: function() {
                var hash = this.hash;
                this.hash = this.hashes.pop(), this.trackIds && this.push(this.objectLiteral(hash.ids)), 
                this.stringParams && (this.push(this.objectLiteral(hash.contexts)), this.push(this.objectLiteral(hash.types))), 
                this.push(this.objectLiteral(hash.values));
            },
            pushString: function(string) {
                this.pushStackLiteral(this.quotedString(string));
            },
            pushLiteral: function(value) {
                this.pushStackLiteral(value);
            },
            pushProgram: function(guid) {
                null != guid ? this.pushStackLiteral(this.programExpression(guid)) : this.pushStackLiteral(null);
            },
            registerDecorator: function(paramSize, name) {
                var foundDecorator = this.nameLookup("decorators", name, "decorator"), options = this.setupHelperArgs(name, paramSize);
                this.decorators.push([ "fn = ", this.decorators.functionCall(foundDecorator, "", [ "fn", "props", "container", options ]), " || fn;" ]);
            },
            invokeHelper: function(paramSize, name, isSimple) {
                var nonHelper = this.popStack(), helper = this.setupHelper(paramSize, name), simple = isSimple ? [ helper.name, " || " ] : "", lookup = [ "(" ].concat(simple, nonHelper);
                this.options.strict || lookup.push(" || ", this.aliasable("helpers.helperMissing")), 
                lookup.push(")"), this.push(this.source.functionCall(lookup, "call", helper.callParams));
            },
            invokeKnownHelper: function(paramSize, name) {
                var helper = this.setupHelper(paramSize, name);
                this.push(this.source.functionCall(helper.name, "call", helper.callParams));
            },
            invokeAmbiguous: function(name, helperCall) {
                this.useRegister("helper");
                var nonHelper = this.popStack();
                this.emptyHash();
                var helper = this.setupHelper(0, name, helperCall), helperName = this.lastHelper = this.nameLookup("helpers", name, "helper"), lookup = [ "(", "(helper = ", helperName, " || ", nonHelper, ")" ];
                this.options.strict || (lookup[0] = "(helper = ", lookup.push(" != null ? helper : ", this.aliasable("helpers.helperMissing"))), 
                this.push([ "(", lookup, helper.paramsInit ? [ "),(", helper.paramsInit ] : [], "),", "(typeof helper === ", this.aliasable('"function"'), " ? ", this.source.functionCall("helper", "call", helper.callParams), " : helper))" ]);
            },
            invokePartial: function(isDynamic, name, indent) {
                var params = [], options = this.setupParams(name, 1, params);
                isDynamic && (name = this.popStack(), delete options.name), indent && (options.indent = JSON.stringify(indent)), 
                options.helpers = "helpers", options.partials = "partials", options.decorators = "container.decorators", 
                isDynamic ? params.unshift(name) : params.unshift(this.nameLookup("partials", name, "partial")), 
                this.options.compat && (options.depths = "depths"), options = this.objectLiteral(options), 
                params.push(options), this.push(this.source.functionCall("container.invokePartial", "", params));
            },
            assignToHash: function(key) {
                var value = this.popStack(), context = void 0, type = void 0, id = void 0;
                this.trackIds && (id = this.popStack()), this.stringParams && (type = this.popStack(), 
                context = this.popStack());
                var hash = this.hash;
                context && (hash.contexts[key] = context), type && (hash.types[key] = type), id && (hash.ids[key] = id), 
                hash.values[key] = value;
            },
            pushId: function(type, name, child) {
                "BlockParam" === type ? this.pushStackLiteral("blockParams[" + name[0] + "].path[" + name[1] + "]" + (child ? " + " + JSON.stringify("." + child) : "")) : "PathExpression" === type ? this.pushString(name) : "SubExpression" === type ? this.pushStackLiteral("true") : this.pushStackLiteral("null");
            },
            compiler: JavaScriptCompiler,
            compileChildren: function(environment, options) {
                for (var children = environment.children, child = void 0, compiler = void 0, i = 0, l = children.length; l > i; i++) {
                    child = children[i], compiler = new this.compiler();
                    var index = this.matchExistingProgram(child);
                    null == index ? (this.context.programs.push(""), index = this.context.programs.length, 
                    child.index = index, child.name = "program" + index, this.context.programs[index] = compiler.compile(child, options, this.context, !this.precompile), 
                    this.context.decorators[index] = compiler.decorators, this.context.environments[index] = child, 
                    this.useDepths = this.useDepths || compiler.useDepths, this.useBlockParams = this.useBlockParams || compiler.useBlockParams) : (child.index = index, 
                    child.name = "program" + index, this.useDepths = this.useDepths || child.useDepths, 
                    this.useBlockParams = this.useBlockParams || child.useBlockParams);
                }
            },
            matchExistingProgram: function(child) {
                for (var i = 0, len = this.context.environments.length; len > i; i++) {
                    var environment = this.context.environments[i];
                    if (environment && environment.equals(child)) return i;
                }
            },
            programExpression: function(guid) {
                var child = this.environment.children[guid], programParams = [ child.index, "data", child.blockParams ];
                return (this.useBlockParams || this.useDepths) && programParams.push("blockParams"), 
                this.useDepths && programParams.push("depths"), "container.program(" + programParams.join(", ") + ")";
            },
            useRegister: function(name) {
                this.registers[name] || (this.registers[name] = !0, this.registers.list.push(name));
            },
            push: function(expr) {
                return expr instanceof Literal || (expr = this.source.wrap(expr)), this.inlineStack.push(expr), 
                expr;
            },
            pushStackLiteral: function(item) {
                this.push(new Literal(item));
            },
            pushSource: function(source) {
                this.pendingContent && (this.source.push(this.appendToBuffer(this.source.quotedString(this.pendingContent), this.pendingLocation)), 
                this.pendingContent = void 0), source && this.source.push(source);
            },
            replaceStack: function(callback) {
                var prefix = [ "(" ], stack = void 0, createdStack = void 0, usedLiteral = void 0;
                if (!this.isInline()) throw new _exception2["default"]("replaceStack on non-inline");
                var top = this.popStack(!0);
                if (top instanceof Literal) stack = [ top.value ], prefix = [ "(", stack ], usedLiteral = !0; else {
                    createdStack = !0;
                    var _name = this.incrStack();
                    prefix = [ "((", this.push(_name), " = ", top, ")" ], stack = this.topStack();
                }
                var item = callback.call(this, stack);
                usedLiteral || this.popStack(), createdStack && this.stackSlot--, this.push(prefix.concat(item, ")"));
            },
            incrStack: function() {
                return this.stackSlot++, this.stackSlot > this.stackVars.length && this.stackVars.push("stack" + this.stackSlot), 
                this.topStackName();
            },
            topStackName: function() {
                return "stack" + this.stackSlot;
            },
            flushInline: function() {
                var inlineStack = this.inlineStack;
                this.inlineStack = [];
                for (var i = 0, len = inlineStack.length; len > i; i++) {
                    var entry = inlineStack[i];
                    if (entry instanceof Literal) this.compileStack.push(entry); else {
                        var stack = this.incrStack();
                        this.pushSource([ stack, " = ", entry, ";" ]), this.compileStack.push(stack);
                    }
                }
            },
            isInline: function() {
                return this.inlineStack.length;
            },
            popStack: function(wrapped) {
                var inline = this.isInline(), item = (inline ? this.inlineStack : this.compileStack).pop();
                if (!wrapped && item instanceof Literal) return item.value;
                if (!inline) {
                    if (!this.stackSlot) throw new _exception2["default"]("Invalid stack pop");
                    this.stackSlot--;
                }
                return item;
            },
            topStack: function() {
                var stack = this.isInline() ? this.inlineStack : this.compileStack, item = stack[stack.length - 1];
                return item instanceof Literal ? item.value : item;
            },
            contextName: function(context) {
                return this.useDepths && context ? "depths[" + context + "]" : "depth" + context;
            },
            quotedString: function(str) {
                return this.source.quotedString(str);
            },
            objectLiteral: function(obj) {
                return this.source.objectLiteral(obj);
            },
            aliasable: function(name) {
                var ret = this.aliases[name];
                return ret ? (ret.referenceCount++, ret) : (ret = this.aliases[name] = this.source.wrap(name), 
                ret.aliasable = !0, ret.referenceCount = 1, ret);
            },
            setupHelper: function(paramSize, name, blockHelper) {
                var params = [], paramsInit = this.setupHelperArgs(name, paramSize, params, blockHelper), foundHelper = this.nameLookup("helpers", name, "helper");
                return {
                    params: params,
                    paramsInit: paramsInit,
                    name: foundHelper,
                    callParams: [ this.contextName(0) ].concat(params)
                };
            },
            setupParams: function(helper, paramSize, params) {
                var options = {}, contexts = [], types = [], ids = [], objectArgs = !params, param = void 0;
                objectArgs && (params = []), options.name = this.quotedString(helper), options.hash = this.popStack(), 
                this.trackIds && (options.hashIds = this.popStack()), this.stringParams && (options.hashTypes = this.popStack(), 
                options.hashContexts = this.popStack());
                var inverse = this.popStack(), program = this.popStack();
                (program || inverse) && (options.fn = program || "container.noop", options.inverse = inverse || "container.noop");
                for (var i = paramSize; i--; ) param = this.popStack(), params[i] = param, this.trackIds && (ids[i] = this.popStack()), 
                this.stringParams && (types[i] = this.popStack(), contexts[i] = this.popStack());
                return objectArgs && (options.args = this.source.generateArray(params)), this.trackIds && (options.ids = this.source.generateArray(ids)), 
                this.stringParams && (options.types = this.source.generateArray(types), options.contexts = this.source.generateArray(contexts)), 
                this.options.data && (options.data = "data"), this.useBlockParams && (options.blockParams = "blockParams"), 
                options;
            },
            setupHelperArgs: function(helper, paramSize, params, useRegister) {
                var options = this.setupParams(helper, paramSize, params);
                return options = this.objectLiteral(options), useRegister ? (this.useRegister("options"), 
                params.push("options"), [ "options=", options ]) : params ? (params.push(options), 
                "") : options;
            }
        }, function() {
            for (var reservedWords = "break else new var case finally return void catch for switch while continue function this with default if throw delete in try do instanceof typeof abstract enum int short boolean export interface static byte extends long super char final native synchronized class float package throws const goto private transient debugger implements protected volatile double import public let yield await null true false".split(" "), compilerWords = JavaScriptCompiler.RESERVED_WORDS = {}, i = 0, l = reservedWords.length; l > i; i++) compilerWords[reservedWords[i]] = !0;
        }(), JavaScriptCompiler.isValidJavaScriptVariableName = function(name) {
            return !JavaScriptCompiler.RESERVED_WORDS[name] && /^[a-zA-Z_$][0-9a-zA-Z_$]*$/.test(name);
        }, exports["default"] = JavaScriptCompiler, module.exports = exports["default"];
    }, function(module, exports, __webpack_require__) {
        "use strict";
        function castChunk(chunk, codeGen, loc) {
            if (_utils.isArray(chunk)) {
                for (var ret = [], i = 0, len = chunk.length; len > i; i++) ret.push(codeGen.wrap(chunk[i], loc));
                return ret;
            }
            return "boolean" == typeof chunk || "number" == typeof chunk ? chunk + "" : chunk;
        }
        function CodeGen(srcFile) {
            this.srcFile = srcFile, this.source = [];
        }
        exports.__esModule = !0;
        var _utils = __webpack_require__(5), SourceNode = void 0;
        try {
        } catch (err) {}
        SourceNode || (SourceNode = function(line, column, srcFile, chunks) {
            this.src = "", chunks && this.add(chunks);
        }, SourceNode.prototype = {
            add: function(chunks) {
                _utils.isArray(chunks) && (chunks = chunks.join("")), this.src += chunks;
            },
            prepend: function(chunks) {
                _utils.isArray(chunks) && (chunks = chunks.join("")), this.src = chunks + this.src;
            },
            toStringWithSourceMap: function() {
                return {
                    code: this.toString()
                };
            },
            toString: function() {
                return this.src;
            }
        }), CodeGen.prototype = {
            isEmpty: function() {
                return !this.source.length;
            },
            prepend: function(source, loc) {
                this.source.unshift(this.wrap(source, loc));
            },
            push: function(source, loc) {
                this.source.push(this.wrap(source, loc));
            },
            merge: function() {
                var source = this.empty();
                return this.each(function(line) {
                    source.add([ "  ", line, "\n" ]);
                }), source;
            },
            each: function(iter) {
                for (var i = 0, len = this.source.length; len > i; i++) iter(this.source[i]);
            },
            empty: function() {
                var loc = this.currentLocation || {
                    start: {}
                };
                return new SourceNode(loc.start.line, loc.start.column, this.srcFile);
            },
            wrap: function(chunk) {
                var loc = arguments.length <= 1 || void 0 === arguments[1] ? this.currentLocation || {
                    start: {}
                } : arguments[1];
                return chunk instanceof SourceNode ? chunk : (chunk = castChunk(chunk, this, loc), 
                new SourceNode(loc.start.line, loc.start.column, this.srcFile, chunk));
            },
            functionCall: function(fn, type, params) {
                return params = this.generateList(params), this.wrap([ fn, type ? "." + type + "(" : "(", params, ")" ]);
            },
            quotedString: function(str) {
                return '"' + (str + "").replace(/\\/g, "\\\\").replace(/"/g, '\\"').replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/\u2028/g, "\\u2028").replace(/\u2029/g, "\\u2029") + '"';
            },
            objectLiteral: function(obj) {
                var pairs = [];
                for (var key in obj) if (obj.hasOwnProperty(key)) {
                    var value = castChunk(obj[key], this);
                    "undefined" !== value && pairs.push([ this.quotedString(key), ":", value ]);
                }
                var ret = this.generateList(pairs);
                return ret.prepend("{"), ret.add("}"), ret;
            },
            generateList: function(entries) {
                for (var ret = this.empty(), i = 0, len = entries.length; len > i; i++) i && ret.add(","), 
                ret.add(castChunk(entries[i], this));
                return ret;
            },
            generateArray: function(entries) {
                var ret = this.generateList(entries);
                return ret.prepend("["), ret.add("]"), ret;
            }
        }, exports["default"] = CodeGen, module.exports = exports["default"];
    } ]);
}), function(root, factory) {
    "object" == typeof exports ? module.exports = factory() : "function" == typeof define && define.amd ? define(factory) : root.Spinner = factory();
}(this, function() {
    "use strict";
    function createEl(tag, prop) {
        var n, el = document.createElement(tag || "div");
        for (n in prop) el[n] = prop[n];
        return el;
    }
    function ins(parent) {
        for (var i = 1, n = arguments.length; n > i; i++) parent.appendChild(arguments[i]);
        return parent;
    }
    function addAnimation(alpha, trail, i, lines) {
        var name = [ "opacity", trail, ~~(100 * alpha), i, lines ].join("-"), start = .01 + i / lines * 100, z = Math.max(1 - (1 - alpha) / trail * (100 - start), alpha), prefix = useCssAnimations.substring(0, useCssAnimations.indexOf("Animation")).toLowerCase(), pre = prefix && "-" + prefix + "-" || "";
        return animations[name] || (sheet.insertRule("@" + pre + "keyframes " + name + "{0%{opacity:" + z + "}" + start + "%{opacity:" + alpha + "}" + (start + .01) + "%{opacity:1}" + (start + trail) % 100 + "%{opacity:" + alpha + "}100%{opacity:" + z + "}}", sheet.cssRules.length), 
        animations[name] = 1), name;
    }
    function vendor(el, prop) {
        var pp, i, s = el.style;
        for (prop = prop.charAt(0).toUpperCase() + prop.slice(1), i = 0; i < prefixes.length; i++) if (pp = prefixes[i] + prop, 
        void 0 !== s[pp]) return pp;
        return void 0 !== s[prop] ? prop : void 0;
    }
    function css(el, prop) {
        for (var n in prop) el.style[vendor(el, n) || n] = prop[n];
        return el;
    }
    function merge(obj) {
        for (var i = 1; i < arguments.length; i++) {
            var def = arguments[i];
            for (var n in def) void 0 === obj[n] && (obj[n] = def[n]);
        }
        return obj;
    }
    function getColor(color, idx) {
        return "string" == typeof color ? color : color[idx % color.length];
    }
    function Spinner(o) {
        this.opts = merge(o || {}, Spinner.defaults, defaults);
    }
    function initVML() {
        function vml(tag, attr) {
            return createEl("<" + tag + ' xmlns="urn:schemas-microsoft.com:vml" class="spin-vml">', attr);
        }
        sheet.addRule(".spin-vml", "behavior:url(#default#VML)"), Spinner.prototype.lines = function(el, o) {
            function grp() {
                return css(vml("group", {
                    coordsize: s + " " + s,
                    coordorigin: -r + " " + -r
                }), {
                    width: s,
                    height: s
                });
            }
            function seg(i, dx, filter) {
                ins(g, ins(css(grp(), {
                    rotation: 360 / o.lines * i + "deg",
                    left: ~~dx
                }), ins(css(vml("roundrect", {
                    arcsize: o.corners
                }), {
                    width: r,
                    height: o.width,
                    left: o.radius,
                    top: -o.width >> 1,
                    filter: filter
                }), vml("fill", {
                    color: getColor(o.color, i),
                    opacity: o.opacity
                }), vml("stroke", {
                    opacity: 0
                }))));
            }
            var i, r = o.length + o.width, s = 2 * r, margin = 2 * -(o.width + o.length) + "px", g = css(grp(), {
                position: "absolute",
                top: margin,
                left: margin
            });
            if (o.shadow) for (i = 1; i <= o.lines; i++) seg(i, -2, "progid:DXImageTransform.Microsoft.Blur(pixelradius=2,makeshadow=1,shadowopacity=.3)");
            for (i = 1; i <= o.lines; i++) seg(i);
            return ins(el, g);
        }, Spinner.prototype.opacity = function(el, i, val, o) {
            var c = el.firstChild;
            o = o.shadow && o.lines || 0, c && i + o < c.childNodes.length && (c = c.childNodes[i + o], 
            c = c && c.firstChild, c = c && c.firstChild, c && (c.opacity = val));
        };
    }
    var useCssAnimations, prefixes = [ "webkit", "Moz", "ms", "O" ], animations = {}, sheet = function() {
        var el = createEl("style", {
            type: "text/css"
        });
        return ins(document.getElementsByTagName("head")[0], el), el.sheet || el.styleSheet;
    }(), defaults = {
        lines: 12,
        length: 7,
        width: 5,
        radius: 10,
        rotate: 0,
        corners: 1,
        color: "#000",
        direction: 1,
        speed: 1,
        trail: 100,
        opacity: .25,
        fps: 20,
        zIndex: 2e9,
        className: "spinner",
        top: "50%",
        left: "50%",
        position: "absolute"
    };
    Spinner.defaults = {}, merge(Spinner.prototype, {
        spin: function(target) {
            this.stop();
            var self = this, o = self.opts, el = self.el = css(createEl(0, {
                className: o.className
            }), {
                position: o.position,
                width: 0,
                zIndex: o.zIndex
            });
            o.radius + o.length + o.width;
            if (css(el, {
                left: o.left,
                top: o.top
            }), target && target.insertBefore(el, target.firstChild || null), el.setAttribute("role", "progressbar"), 
            self.lines(el, self.opts), !useCssAnimations) {
                var alpha, i = 0, start = (o.lines - 1) * (1 - o.direction) / 2, fps = o.fps, f = fps / o.speed, ostep = (1 - o.opacity) / (f * o.trail / 100), astep = f / o.lines;
                !function anim() {
                    i++;
                    for (var j = 0; j < o.lines; j++) alpha = Math.max(1 - (i + (o.lines - j) * astep) % f * ostep, o.opacity), 
                    self.opacity(el, j * o.direction + start, alpha, o);
                    self.timeout = self.el && setTimeout(anim, ~~(1e3 / fps));
                }();
            }
            return self;
        },
        stop: function() {
            var el = this.el;
            return el && (clearTimeout(this.timeout), el.parentNode && el.parentNode.removeChild(el), 
            this.el = void 0), this;
        },
        lines: function(el, o) {
            function fill(color, shadow) {
                return css(createEl(), {
                    position: "absolute",
                    width: o.length + o.width + "px",
                    height: o.width + "px",
                    background: color,
                    boxShadow: shadow,
                    transformOrigin: "left",
                    transform: "rotate(" + ~~(360 / o.lines * i + o.rotate) + "deg) translate(" + o.radius + "px,0)",
                    borderRadius: (o.corners * o.width >> 1) + "px"
                });
            }
            for (var seg, i = 0, start = (o.lines - 1) * (1 - o.direction) / 2; i < o.lines; i++) seg = css(createEl(), {
                position: "absolute",
                top: 1 + ~(o.width / 2) + "px",
                transform: o.hwaccel ? "translate3d(0,0,0)" : "",
                opacity: o.opacity,
                animation: useCssAnimations && addAnimation(o.opacity, o.trail, start + i * o.direction, o.lines) + " " + 1 / o.speed + "s linear infinite"
            }), o.shadow && ins(seg, css(fill("#000", "0 0 4px #000"), {
                top: "2px"
            })), ins(el, ins(seg, fill(getColor(o.color, i), "0 0 1px rgba(0,0,0,.1)")));
            return el;
        },
        opacity: function(el, i, val) {
            i < el.childNodes.length && (el.childNodes[i].style.opacity = val);
        }
    });
    var probe = css(createEl("group"), {
        behavior: "url(#default#VML)"
    });
    return !vendor(probe, "transform") && probe.adj ? initVML() : useCssAnimations = vendor(probe, "animation"), 
    Spinner;
}), function(factory) {
    if ("object" == typeof exports) factory(require("jquery"), require("spin")); else if ("function" == typeof define && define.amd) define([ "jquery", "spin" ], factory); else {
        if (!window.Spinner) throw new Error("Spin.js not present");
        factory(window.jQuery, window.Spinner);
    }
}(function($, Spinner) {
    $.fn.spin = function(opts, color) {
        return this.each(function() {
            var $this = $(this), data = $this.data();
            data.spinner && (data.spinner.stop(), delete data.spinner), opts !== !1 && (opts = $.extend({
                color: color || $this.css("color")
            }, $.fn.spin.presets[opts] || opts), data.spinner = new Spinner(opts).spin(this));
        });
    }, $.fn.spin.presets = {
        tiny: {
            lines: 8,
            length: 2,
            width: 2,
            radius: 3
        },
        small: {
            lines: 8,
            length: 4,
            width: 3,
            radius: 5
        },
        large: {
            lines: 10,
            length: 8,
            width: 4,
            radius: 8
        }
    };
});
//# sourceMappingURL=lib.min.js.map