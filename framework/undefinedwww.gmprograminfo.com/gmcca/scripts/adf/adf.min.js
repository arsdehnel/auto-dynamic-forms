ADF.config = {
    validationSettings: {
        selector: ".adf-validation-required",
        failClass: "adf-validation-fail"
    },
    dataAttributes: {
        "input-delimiter": {
            location: "input"
        }
    },
    userPrefDefaults: {
        recordAddCount: 1
    },
    upload: {
        url: "../service/excel-conversion/upload-file.action",
        maxFileSize: 3e7,
        fileTypes: [ "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" ]
    },
    grids: {
        filters: {
            fieldTypeInclude: [ "number", "text", "readonly", "select", "selectFancy" ]
        }
    },
    svg: {
        cdnUrl: "https://www.program-info.com/cdn/adf/svg/defs.svg"
    },
    messages: {
        levels: {
            confirm: {
                displayMethod: "none",
                label: "Confirm"
            },
            log: {
                displayMethod: "none",
                label: "Log Entry"
            },
            info: {
                displayMethod: "console",
                label: "Info"
            },
            debug: {
                displayMethod: "console",
                label: "Debug"
            },
            warn: {
                displayMethod: "messagesWindow",
                label: "Warning"
            },
            error: {
                displayMethod: "messagesWindow",
                label: "Error"
            }
        }
    },
    set: function(itemName, value) {
        "[object Object]" === Object.prototype.toString.call(value) ? localStorage.setItem(itemName, JSON.stringify(value)) : localStorage.setItem(itemName, value);
    },
    get: function(itemName) {
        var configItem;
        return localStorage.getItem(itemName) ? (configItem = localStorage.getItem(itemName), 
        "[object Object]" === _.isObject(configItem) && (configItem = JSON.parse(configItem))) : configItem = ADF.config[itemName], 
        configItem;
    }
}, ADF.utils = {
    randomId: function() {
        return Math.floor(3789.4 * Math.random());
    },
    string: {
        underscore: function(string) {
            return string.replace(/([A-Z])/g, function($1) {
                return "_" + $1.toLowerCase();
            });
        },
        escape: function(string) {
            return string.replace(/'/g, "\\'");
        },
        camelize: function(string) {
            return string.toUpperCase() === string && (string = string.toLowerCase()), string.replace(/[_.-](\w|$)/g, function(_, x) {
                return x.toUpperCase();
            });
        },
        capitalize: function(string) {
            return string.charAt(0).toUpperCase() + string.slice(1);
        },
        querystringToObj: function(string) {
            for (var oResult = {}, aQueryString = string.split("&"), i = 0; i < aQueryString.length; i++) {
                var aTemp = aQueryString[i].split("=");
                aTemp[1].length > 0 && (oResult[aTemp[0]] = decodeURIComponent(aTemp[1]));
            }
            return oResult;
        },
        substitute: function(inputString, inputData) {
            for (var tokenArray = inputString ? inputString.split("##") : [], returnString = tokenArray[0], i = 1; i < tokenArray.length; i++) i % 2 === 1 ? inputData[tokenArray[i].toLowerCase()] && (returnString += inputData[tokenArray[i].toLowerCase()]) : returnString += tokenArray[i];
            return returnString;
        }
    },
    emToPx: function(context, emValue) {
        return emValue * parseFloat(getComputedStyle(context || document.documentElement).fontSize);
    },
    prepareDebug: function($element) {
        var dataObj = $element.data();
        _.each(dataObj, function(dataItem, index) {
            "function" == typeof dataItem && delete dataObj[index];
        }), $element.append(ADF.templates.utils.debugData({
            data: dataObj
        }));
    },
    isObject: function(obj) {
        return "[object Object]" === Object.prototype.toString.call(obj);
    },
    arrayToHTML: function(array, parentElement, childElement) {
        var retElement = document.createElement(parentElement);
        return _.each(array, function(item) {
            var child = document.createElement(childElement);
            ADF.utils.isObject(item) ? child.appendChild(document.createTextNode(item)) : child.appendChild(document.createTextNode(item)), 
            retElement.appendChild(child);
        }), retElement.innerHTML;
    },
    objPropToLower: function(object) {
        return _.each(object, function(element, index, array) {
            index.toLowerCase() !== index && (object[index.toLowerCase()] = element, delete object[index]);
        }), object;
    },
    inputHandlerRefresh: function($context) {
        $context || ($context = adf.page.$el), $(".adf-datepicker", $context).datepicker({
            dateFormat: "mm/dd/yy",
            changeYear: !0,
            yearRange: "-10:+50"
        }), $(".adf-datetimepicker", $context).datetimepicker({
            dateFormat: "mm/dd/yy",
            timeFormat: "HH:mm",
            changeYear: !0,
            yearRange: "-10:+50"
        }), this.selectFancy.refresh();
    },
    selectFancy: {
        render: function() {
            var settings = {
                dropdownAutoWidth: !0,
                allowClear: !0,
                formatResult: ADF.utils.selectFancy.template,
                matcher: ADF.utils.selectFancy.matcher
            };
            $.extend(settings, arguments[0]);
            var selectFancyObj = settings.selectFancyObj;
            delete settings.selectFancyObj, selectFancyObj.chosen(settings), "readonly" === selectFancyObj.attr("readonly") && selectFancyObj.select2("readonly", !0);
        },
        matcher: function(term, text, option) {
            return text.toUpperCase().indexOf(term.toUpperCase()) >= 0 || option.val().toUpperCase().indexOf(term.toUpperCase()) >= 0;
        },
        template: function(object, container, query) {
            var optObj = $(object.element), entryObj = {
                value: object.id,
                tooltip: optObj.data("tooltip")
            };
            return object.id === object.text || 0 === object.text.length ? entryObj.label = object.id : entryObj.label = '<span class="select2-option-value">' + object.id + '</span><span class="select2-option-label">' + object.text + "</span>", 
            ADF.templates.inputHelpers.select2Record(entryObj);
        },
        refresh: function() {}
    },
    spin: function(targetObj, opts) {
        var settings = {}, defaults = {
            emptyTarget: !1
        };
        $.extend(settings, defaults, opts), settings.stop ? targetObj.removeClass("loading").find(".spinner").remove() : (targetObj.removeClass("hide"), 
        settings.emptyTarget && targetObj.empty(), targetObj.addClass("loading").spin());
    },
    message: function() {
        var args = Array.prototype.slice.call(arguments), level = args[0] ? args.shift().toLowerCase() : !1;
        if (level) if (ADF.config.get("messages").levels[level]) {
            var levelObj = ADF.config.get("messages").levels[level];
            switch (levelObj.displayMethod) {
              case "confirm":
                confirm(args);
                break;

              case "messagesWindow":
                adf && adf.page && adf.page.getRegion("messagesWindow") ? (adf.page.getRegion("messagesWindow").messagesWindowView.collection.add([ {
                    level: level,
                    label: levelObj.label,
                    originalArguments: args
                } ]), adf.page.getRegion("messagesWindow").show()) : (args.unshift("[ADF]"), window.console && console[level](args));
                break;

              case "console":
                args.unshift("[ADF]"), window.console && console[level](args);
            }
        } else ADF.utils.message("error", "unexpected level" + ADF.utils.printObject(args));
    },
    printObject: function(obj) {
        return JSON.stringify(obj, null, "	").replace(/\n/g, "<br>").replace(/\t/g, "&nbsp;&nbsp;&nbsp;");
    },
    buildADFserializedArray: function(fieldsCollection, fieldsObject, recordModel) {
        var crntVal, dataArray = [];
        return fieldsCollection && fieldsCollection.each(function(model) {
            crntVal = _.isUndefined(recordModel) || _.isNull(recordModel) || !recordModel ? model.get("currentValue") : recordModel.get(model.get("name")), 
            crntVal = ADF.utils.string.escape(crntVal), dataArray.push({
                dyn_frm_fld_mstr_id: model.get("fldMstrId"),
                field_code: model.get("name"),
                data_value: crntVal
            });
        }), fieldsObject && _.each(fieldsObject, function(fieldVal, fieldKey) {
            0 === _.where(dataArray, {
                field_code: ADF.utils.string.underscore(fieldKey)
            }).length && (crntVal = _.isUndefined(recordModel) || _.isNull(recordModel) || !recordModel ? fieldVal : recordModel.get(fieldKey), 
            dataArray.push({
                field_code: ADF.utils.string.underscore(fieldKey),
                data_value: ADF.utils.string.escape(crntVal)
            }));
        }), adf.debugEnabled && (dataArray.length > 0 ? (console.log("Data Array:"), console.table(dataArray)) : console.log("Data array empty")), 
        dataArray;
    },
    userPrefs: {
        get: function(item) {
            return adf.userPrefs[item] ? adf.userPrefs[item] : ADF.config.get("userPrefDefaults")[item];
        },
        set: function(item, value) {
            adf.userPrefs[item] = value, localStorage.setItem("userPreferences", JSON.stringify(adf.userPrefs));
        }
    },
    cookies: {
        get: function(sKey) {
            return sKey ? decodeURIComponent(document.cookie.replace(new RegExp("(?:(?:^|.*;)\\s*" + encodeURIComponent(sKey).replace(/[\-\.\+\*]/g, "\\$&") + "\\s*\\=\\s*([^;]*).*$)|^.*$"), "$1")) || null : null;
        },
        set: function(sKey, sValue, vEnd, sPath, sDomain, bSecure) {
            if (!sKey || /^(?:expires|max\-age|path|domain|secure)$/i.test(sKey)) return !1;
            var sExpires = "";
            if (vEnd) switch (vEnd.constructor) {
              case Number:
                sExpires = vEnd === 1 / 0 ? "; expires=Fri, 31 Dec 9999 23:59:59 GMT" : "; max-age=" + vEnd;
                break;

              case String:
                sExpires = "; expires=" + vEnd;
                break;

              case Date:
                sExpires = "; expires=" + vEnd.toUTCString();
            }
            return document.cookie = encodeURIComponent(sKey) + "=" + encodeURIComponent(sValue) + sExpires + (sDomain ? "; domain=" + sDomain : "") + (sPath ? "; path=" + sPath : "") + (bSecure ? "; secure" : ""), 
            !0;
        },
        remove: function(sKey, sPath, sDomain) {
            return this.hasItem(sKey) ? (document.cookie = encodeURIComponent(sKey) + "=; expires=Thu, 01 Jan 1970 00:00:00 GMT" + (sDomain ? "; domain=" + sDomain : "") + (sPath ? "; path=" + sPath : ""), 
            !0) : !1;
        },
        has: function(sKey) {
            return sKey ? new RegExp("(?:^|;\\s*)" + encodeURIComponent(sKey).replace(/[\-\.\+\*]/g, "\\$&") + "\\s*\\=").test(document.cookie) : !1;
        },
        keys: function() {
            for (var aKeys = document.cookie.replace(/((?:^|\s*;)[^\=]+)(?=;|$)|^\s*|\s*(?:\=[^;]*)?(?:\1|$)/g, "").split(/\s*(?:\=[^;]*)?;\s*/), nLen = aKeys.length, nIdx = 0; nLen > nIdx; nIdx++) aKeys[nIdx] = decodeURIComponent(aKeys[nIdx]);
            return aKeys;
        }
    }
}, Backbone.emulateHTTP = !0;

var ADF = ADF || {};

ADF.Actions = {}, ADF.Core = {}, ADF.Forms = {}, ADF.Inputs = {}, ADF.Grids = {}, 
ADF.Messages = {}, ADF.Modules = {}, ADF.App = Marionette.Application.extend({
    initialize: function(options) {
        ADF.utils.message("log", "App Initialized", options), this._importPageTemplates(), 
        "true" === ADF.utils.cookies.get("tsga-adf-debug") ? this.debugEnabled = !0 : this.debugEnabled = !1;
    },
    _importPageTemplates: function() {
        $(".adf-template").each(function() {
            var $tmplt = $(this), tmpltName = $tmplt.attr("id").split("--");
            2 === tmpltName.length ? ADF.templates[ADF.utils.string.camelize(tmpltName[0])][ADF.utils.string.camelize(tmpltName[1])] = Handlebars.compile($tmplt.html()) : ADF.utils.message("warn", "Invalid custom ADF template found", tmpltName);
        });
    },
    keepSessionAlive: function() {
        var interval = 6e5, sessionKeeper = setInterval(function() {
            $.ajax({
                url: "../home.do",
                dataType: "html",
                complete: function(jqXHR, textStatus) {
                    200 !== jqXHR.status ? (ADF.utils.message("log", "keepSessionAlive call failed", textStatus, jqXHR), 
                    clearInterval(sessionKeeper)) : ADF.utils.message("log", "keepSessionAlive call completed", textStatus, jqXHR);
                }
            });
        }, interval);
    }
});

var adf = new ADF.App({
    container: "body"
});

adf.on("before:start", function(options) {
    adf.userPrefs = localStorage.getItem("userPreferences") ? JSON.parse(localStorage.getItem("userPreferences")) : {};
}), adf.on("start", function(options) {
    $.ajaxSetup({
        dataType: "json"
    }), adf.page = new ADF.PageLayoutView({
        el: ".adf-page"
    }), adf.keepSessionAlive();
}), window.onerror = function(message, file, lineNumber) {
    return ADF.utils.message("error", message, file, lineNumber), !0;
}, ADF.PageLayoutView = Backbone.Marionette.LayoutView.extend({
    events: {
        "click .overlay-close": "closeOverlayEditor",
        "adf-module-received": "moduleReceived"
    },
    initialize: function(options) {
        ADF.utils.message("log", "PageLayoutView Initialized", options);
        var pageView = this;
        pageView.dndSources = [], pageView.dndTargets = [], pageView.loadSvgDefs(), adf.debugEnabled, 
        pageView.initRegions(), this._super(options);
    },
    loadSvgDefs: function() {
        var adfPage = this;
        $.ajax({
            url: ADF.config.get("svg").cdnUrl,
            dataType: "html",
            complete: function(jqXHR, textStatus) {
                adfPage.$el.append(jqXHR.responseText);
            }
        });
    },
    _buildRegion: function(regionData, id) {
        var regionObj = {};
        return regionData.regionClass = ADF[ADF.utils.string.capitalize(ADF.utils.string.camelize(regionData.adfRegionType)) + "Region"], 
        regionData.selector = "#" + id, regionData.regionName = ADF.utils.string.camelize(id), 
        regionObj[regionData.regionName] = regionData, regionObj;
    },
    initRegions: function() {
        var pageView = this;
        this._initMessagesWindow(), this._initWidgetEditor(), pageView.$el.find(".adf-region").each(function() {
            var $region = $(this);
            if ($region.attr("id")) {
                var regionData = $region.data();
                regionData.adfRegionType && pageView.addRegions(pageView._buildRegion(regionData, $region.attr("id")));
            } else ADF.utils.message("error", "Region has no ID attribute");
        }), setTimeout(function() {
            pageView.showRegions();
        }, 1);
    },
    showRegions: function() {
        _.each(this.getRegions(), function(region) {
            region.inert || region.show();
        });
    },
    findRegion: function(filter) {
        var regions = this.getRegions();
        return _.find(regions, function(region) {
            return region[filter.attribute] === filter.value || region.options[filter.attribute] === filter.value;
        });
    },
    showBackdrop: function(backdropType) {
        $(".backdrop").removeClass("hide"), "widget" === backdropType && $(".backdrop").addClass("widget");
    },
    hideBackdrop: function(backdropType) {
        "widget" === backdropType ? $(".backdrop").removeClass("widget") : $(".backdrop").addClass("hide");
    },
    closeOverlayEditor: function(e) {
        e.preventDefault(), $(e.target).closest(".adf-widget-editor").size() > 0 ? this.getRegion("widgetEditor").hide() : this.getRegion("overlayEditor").hide();
    },
    _initWidgetEditor: function() {
        var pageView = this;
        0 === pageView.$el.find(".adf-widget-editor").size() && pageView.$el.find("main").append(ADF.templates.grids.widgetEditor());
    },
    _initMessagesWindow: function() {
        var pageView = this;
        0 === pageView.$el.find(".adf-messages-window").size() && pageView.$el.append(ADF.templates.messages.window());
    }
}), ADF.Region = Marionette.Region.extend({
    initialize: function(options) {
        ADF.utils.message("log", "Region Initialized", options), this.adfAjaxOnshow = options.adfAjaxOnshow ? options.adfAjaxOnshow : !1, 
        this.name = options.regionName;
    },
    show: function() {
        adf.debugEnabled && ADF.utils.prepareDebug(this.$el), this.adfAjaxOnshow && this.ajax();
    },
    hide: function() {
        this.$el.addClass("hide");
    },
    ajax: function(options) {
        var region = this, dataArray = ADF.utils.buildADFserializedArray(region.fieldsCollection, this.$el.find(":input:hidden").serializeObject(), !1), data = $.extend({
            adfSerializedData: JSON.stringify(dataArray)
        }, region.options.adfAjaxData), settings = $.extend({
            data: data
        }, options);
        ADF.utils.message("log", "Ajax Call", options, settings), $.ajax({
            url: settings.url ? settings.url : region.options.adfAjaxUrl,
            type: settings.method ? settings.method : "POST",
            data: settings.data,
            beforeSend: function() {
                ADF.utils.spin(region.$el);
            },
            complete: function(jqXHR, textStatus) {
                ADF.utils.spin(region.$el, {
                    stop: !0
                }), region.$el.closest(".hide").removeClass("hide"), 200 === jqXHR.status ? (jqXHR.responseJSON || (jqXHR.responseJSON = $.parseJSON(jqXHR.responseText)), 
                jqXHR.responseJSON ? (ADF.utils.message("log", "AJAX message: " + jqXHR.responseJSON.message), 
                region.ajaxSuccessHandler(jqXHR.responseJSON, settings)) : ADF.utils.message("error", "Malformed response received that does not have the expected JSON object", jqXHR, settings)) : 404 === jqXHR.status ? ADF.utils.message("error", "<h1>Page Not Found.</h1><p>The ajax calls is being made to a page (" + settings.url + ") that could not be found. Probably going to need to get a TA involved to see what is going on here.") : (ADF.utils.message("error", textStatus + "! Probably going to need to get a TA involved."), 
                console.log("settings", settings), console.log(jqXHR), region.$el.html(jqXHR.responseText));
            }
        });
    }
}), ADF.FormRegion = ADF.Region.extend({
    template: ADF.templates.forms.region,
    initialize: function(options) {
        ADF.utils.message("log", "FormRegion Initialized", options), 0 === this.$el.find("form").size() && this.$el.html(this.template()), 
        this._super(options);
    },
    show: function() {
        var formRegion = this;
        formRegion.actionsCollection = new ADF.ActionsCollection(null, {
            regionName: formRegion.options.regionName
        }), formRegion.fieldsCollection = new ADF.FieldsCollection(null, {
            regionName: formRegion.options.regionName
        }), formRegion.formView = new ADF.Forms.FormView({
            el: formRegion.$el.find("form")[0],
            regionName: formRegion.options.regionName
        }), this._super();
    },
    ajaxSuccessHandler: function(xhrJson, settings) {
        var formRegion = this;
        xhrJson.success === !0 ? (xhrJson.data.hasOwnProperty("actions") && (settings.emptyCollections === !1 ? formRegion.actionsCollection.add(xhrJson.data.actions) : formRegion.actionsCollection.reset(xhrJson.data.actions)), 
        xhrJson.data.hasOwnProperty("fields") && (settings.emptyCollections === !1 ? settings.newModelIdx ? formRegion.formView.formFields.collection.add(xhrJson.data.fields.reverse(), {
            at: settings.newModelIdx
        }) : formRegion.formView.formFields.collection.add(xhrJson.data.fields) : formRegion.formView.formFields.collection.reset(xhrJson.data.fields))) : xhrJson.hasOwnProperty("errors") ? _.each(xhrJson.errors, function(element, index, array) {
            ADF.utils.message("error", element);
        }) : ADF.utils.message("error", "Looks like the ajax response wasn't quite what was expected.  Probably need to get a TA involved to help figure it out.");
    }
}), ADF.GridRegion = ADF.Region.extend({
    template: ADF.templates.grids.region,
    initialize: function(options) {
        ADF.utils.message("log", "GridRegion Initialized", options);
        var gridRegion = this;
        gridRegion.$el.is(".adf-grid-overlay-editor, .adf-widget-editor") ? gridRegion.inOverlay = !0 : gridRegion.inOverlay = !1, 
        this.autoSave = gridRegion.$el.data("adf-auto-save") || !1;
        var $initLoadForm = gridRegion.$el.find("form").clone(), templateData = {
            inOverlay: gridRegion.inOverlay
        };
        templateData.regionLabel = gridRegion.$el.data("region-label") ? gridRegion.$el.data("region-label") : !1, 
        gridRegion.$el.html(gridRegion.template(templateData)).append($initLoadForm), gridRegion.fieldsCollection = new ADF.FieldsCollection(null, {
            regionName: gridRegion.options.regionName
        }), gridRegion.actionsCollection = new ADF.ActionsCollection(null, {
            regionName: gridRegion.options.regionName
        }), this._super(options);
    },
    show: function() {
        ADF.utils.message("log", "gridRegion Shown");
        var gridRegion = this;
        gridRegion.gridView = new ADF.Grids.GridView({
            el: gridRegion.$el.find(".adf-grid-wrapper")[0],
            regionName: gridRegion.options.regionName
        }), this._super();
    },
    ajaxSuccessHandler: function(xhrJson, settings) {
        var gridRegion = this;
        xhrJson.success === !0 ? (xhrJson.data.hasOwnProperty("fields") && gridRegion.fieldsCollection.reset(xhrJson.data.fields), 
        xhrJson.data.hasOwnProperty("actions") && (settings.emptyCollections === !1 ? gridRegion.actionsCollection.add(xhrJson.data.actions) : gridRegion.actionsCollection.reset(xhrJson.data.actions)), 
        xhrJson.data.hasOwnProperty("records") && gridRegion.gridView.bodyView.collection.reset(xhrJson.data.records)) : xhrJson.hasOwnProperty("errors") ? _.each(xhrJson.errors, function(element, index, array) {
            ADF.utils.message("error", element);
        }) : ADF.utils.message("error", "Looks like the ajax response wasn't quite what was expected.  Probably need to get a TA involved to help figure it out.");
    }
}), ADF.ModulesRegion = ADF.Region.extend({
    template: ADF.templates.modules.wrapper,
    initialize: function(options) {
        ADF.utils.message("log", "ModulesRegion Initialized", options);
        var modulesRegion = this;
        modulesRegion.options = $.extend({}, options, modulesRegion.$el.data()), modulesRegion.$el.html(modulesRegion.template({
            dndSource: modulesRegion.options.adfDndSource,
            dndTarget: modulesRegion.options.adfDndTarget
        })), modulesRegion.fieldsCollection = new ADF.FieldsCollection(null, {
            regionName: modulesRegion.options.regionName
        }), modulesRegion.actionsCollection = new ADF.ActionsCollection(null, {
            regionName: modulesRegion.options.regionName
        }), this._super(options);
    },
    show: function() {
        var modulesRegion = this;
        modulesRegion.modulesView = new ADF.Modules.ModulesView({
            el: modulesRegion.$el.find(".modules-wrapper")[0],
            regionName: modulesRegion.options.regionName,
            dndSource: modulesRegion.options.adfDndSource,
            dndTarget: modulesRegion.options.adfDndTarget
        }), this._super();
    },
    ajaxSuccessHandler: function(xhrJson, settings) {
        var modulesRegion = this, ajaxData = {}, defaultObj = {};
        xhrJson.success === !0 ? (xhrJson.data.hasOwnProperty("actions") && (settings.emptyCollections === !1 ? modulesRegion.actionsCollection.add(xhrJson.data.actions) : modulesRegion.actionsCollection.reset(xhrJson.data.actions)), 
        xhrJson.data.hasOwnProperty("fields") && (settings.emptyCollections === !1 ? modulesRegion.fieldsCollection.add(xhrJson.data.fields) : modulesRegion.fieldsCollection.reset(xhrJson.data.fields)), 
        xhrJson.data.hasOwnProperty("records") && (settings.emptyCollections === !1 ? modulesRegion.modulesView.moduleListView.collection.add(xhrJson.data.records) : modulesRegion.modulesView.moduleListView.collection.reset(xhrJson.data.records)), 
        settings.data && settings.data.adfSerializedData && (ajaxData = JSON.parse(settings.data.adfSerializedData), 
        _.each(modulesRegion.fieldsCollection.models, function(fieldModel) {
            defaultObj = _.find(ajaxData, function(adfRecord) {
                return adfRecord.field_code === fieldModel.get("name");
            }), _.isUndefined(defaultObj) || fieldModel.set("currentValue", defaultObj.data_value);
        }, this)), modulesRegion.modulesView.render()) : xhrJson.hasOwnProperty("errors") ? _.each(xhrJson.errors, function(element, index, array) {
            ADF.utils.message("error", element);
        }) : ADF.utils.message("error", "Looks like the ajax response wasn't quite what was expected.  Probably need to get a TA involved to help figure it out.");
    }
}), ADF.OverlayGridRegion = ADF.GridRegion.extend({
    initialize: function(options) {
        ADF.utils.message("log", "OverlayGridRegion Initialized", options), this.inert = !0, 
        this._super(options);
    },
    show: function(triggerCellView) {
        ADF.utils.message("info", "OverlayGridRegion Shown", triggerCellView);
        var overlayRegion = this, sourceRegion = adf.page.getRegion(triggerCellView.options.regionName), dataArray = [], triggerBox = triggerCellView._parent.el.getBoundingClientRect();
        if (!triggerCellView.model.dataAttributes.dataFields) return void ADF.utils.message.call(this, "error", "This overlay field has no data fields setup and at least one is required for the overlay lookup to know what data to retrieve.");
        var dataFields = triggerCellView.model.dataAttributes.dataFields.toLowerCase().split(",");
        adf.page.showBackdrop(), this.$el.addClass("open").css({
            top: triggerBox.top + triggerBox.height
        }), this.options.adfAjaxUrl = triggerCellView.model.dataAttributes.ajaxUrl, overlayRegion.options.dataFields = new ADF.FieldsCollection(sourceRegion.fieldsCollection.filter(function(field) {
            return _.indexOf(dataFields, field.get("name")) >= 0;
        }), {
            recordModelDefaults: triggerCellView._parent.model.toJSON()
        }), dataArray = ADF.utils.buildADFserializedArray(overlayRegion.options.dataFields, null, triggerCellView._parent.model), 
        overlayRegion.options.adfAjaxData = {
            adfSerializedData: JSON.stringify(dataArray)
        }, this._super();
    },
    hide: function() {
        ADF.utils.message("log", "OverlayGridRegion Hidden");
        var gridView = this.gridView;
        this.$el.find(".changed") > 0 && ADF.utils.message("warn", "found records that have been changed and not saved"), 
        this.$el.removeClass("open"), gridView.$el.html(gridView.template({})), adf.page.hideBackdrop();
    }
}), ADF.WidgetEditorRegion = ADF.GridRegion.extend({
    initialize: function(options) {
        ADF.utils.message("log", "WidgetGridRegion Initialized", options), this.inert = !0, 
        this._super(options);
    },
    show: function(triggerCellView) {
        ADF.utils.message("info", "WidgetGridRegion Shown", triggerCellView);
        var widgetEditorRegion = this;
        this.sourceRegion = triggerCellView.region;
        var dataArray = [], triggerBox = triggerCellView.el.getBoundingClientRect(), triggerData = triggerCellView.model._createDataAttrObj();
        if (!triggerData.dataFields) return void ADF.utils.message.call(this, "error", "This widget editor has no data fields setup and at least one is required for the widget lookup to know what data to retrieve.");
        var dataFields = triggerData.dataFields.toLowerCase().split(",");
        adf.page.showBackdrop("widget"), this.$el.addClass("open").css({
            top: triggerBox.top + triggerBox.height / 2,
            left: triggerBox.right + 90
        }), this.options.adfAjaxUrl = triggerData.ajaxUrl, widgetEditorRegion.options.dataFields = new ADF.FieldsCollection(this.sourceRegion.fieldsCollection.filter(function(field) {
            return _.indexOf(dataFields, field.get("name")) >= 0;
        }), {
            recordModelDefaults: triggerCellView._parent.model.toJSON()
        }), dataArray = ADF.utils.buildADFserializedArray(widgetEditorRegion.options.dataFields, null, triggerCellView._parent.model), 
        widgetEditorRegion.options.adfAjaxData = {
            adfSerializedData: JSON.stringify(dataArray)
        }, this._super();
    },
    hide: function() {
        ADF.utils.message("log", "WidgetGridRegion Hidden");
        var gridView = this.gridView;
        this.$el.find(".changed") > 0 && ADF.utils.message("warn", "found records that have been changed and not saved"), 
        adf.page.hideBackdrop("widget"), this.$el.removeClass("open"), gridView.$el.html(gridView.template({}));
    }
}), ADF.MessagesWindowRegion = ADF.Region.extend({
    initialize: function(options) {
        ADF.utils.message("log", "MessageWindow Initialized", options);
        var messagesWindow = this;
        messagesWindow.inert = !0, messagesWindow.messagesWindowView = new ADF.Messages.WindowView({
            el: messagesWindow.$el.find(".messages-wrapper")[0],
            collection: new ADF.MessagesCollection(),
            regionName: options.regionName
        }), messagesWindow._super(options);
    },
    show: function(messageHeader, messageBody, messageFooter) {
        ADF.utils.message("log", "MessageWindow Shown"), this.$el.addClass("show"), this.messagesWindowView.render();
    },
    hide: function() {
        ADF.utils.message("log", "MessageWindow Hidden"), this.$el.empty().removeClass("open"), 
        adf.page.hideBackdrop();
    }
}), ADF.FieldModel = Backbone.Model.extend({
    initialize: function(attrs, opts) {
        ADF.utils.message("log", "FieldModel Initialized", attrs, opts), this.options = $.extend({}, opts.collection ? opts.collection.options : "", opts);
        var fieldModel = this;
        fieldModel.get("data") && fieldModel.get("data").length > 0 && (this.dataCollection = new Backbone.Collection(fieldModel.get("data"))), 
        this.region = adf.page.getRegion(this.options.regionName), this.set("type", ADF.utils.string.camelize(this.get("type"))), 
        this._readonlyOverride(), this.dataAttributes = this._createDataAttrObj(), this._convertDataAttrsForHbsUsage(), 
        attrs.name.toLowerCase() !== attrs.name && fieldModel.set("name", attrs.name.toLowerCase()), 
        this._createDataAttrObj().validationChecks && this._addWrapClass("adf-validation-required"), 
        this._setInputType(), this._setInputTemplate();
    },
    _addWrapClass: function(wrapClassToAdd) {
        this.set("wrapClass", (this.get("wrapClass") || "") + " " + wrapClassToAdd);
    },
    _updateCrntValFromDataCollection: function() {
        var delimiterObj = _.findWhere(this.get("dataAttributes"), {
            name: "input-delimiter"
        }), delimiter = delimiterObj ? delimiterObj.value : "|", crntVal = this.dataCollection.where({
            selectedInd: "Y"
        }).map(function(dataItem) {
            return dataItem.get("value");
        });
        this.set("currentValue", crntVal.join(delimiter));
    },
    getDataAttrVal: function(dataAttr) {
        var dataAttrObj = _.findWhere(this.get("dataAttributes"), {
            name: dataAttr
        });
        return dataAttrObj ? dataAttrObj.value : !1;
    },
    _setInputType: function() {
        "select" === this.get("type") && this.dataAttributes && this.dataAttributes.selectFancy && this.set("type", "selectFancy"), 
        "text" !== this.get("type") && "number" !== this.get("type") || !(this.dataAttributes && this.dataAttributes.ajaxSuggest || this.dataCollection && this.dataCollection.length > 0) || this.set("type", "ajaxSuggest");
    },
    _setInputTemplate: function() {
        ADF.templates.inputTypes[this.get("type")] ? this.set("inputTemplate", ADF.templates.inputTypes[this.get("type")]) : ADF.utils.message("error", "unexpected template requested: " + this.get("type"), this);
    },
    _convertDataAttrsForHbsUsage: function() {
        _.each(this.get("dataAttributes"), function(element, index) {
            element.name = element.name.toLowerCase().replace(/[_-]/g, "-"), ("TRUE" === element.value || "true" === element.value) && (element.value = !0), 
            ("FALSE" === element.value || "false" === element.value) && (element.value = !1);
        }), "actions" === this.get("type") && _.each(this.get("actions"), function(action) {
            _.each(action.dataAttributes, function(element, index) {
                element.name = element.name.toLowerCase().replace(/[_-]/g, "-"), ("TRUE" === element.value || "true" === element.value) && (element.value = !0), 
                ("FALSE" === element.value || "false" === element.value) && (element.value = !1);
            });
        });
    },
    _readonlyOverride: function() {
        var fieldModel = this;
        if (fieldModel.region && fieldModel.region.$el.data("readonly-override")) switch (fieldModel.get("type")) {
          case "text":
          case "textarea":
          case "date":
          case "number":
          case "checkbox":
            fieldModel.set("type", "readonly");
            break;

          case "select":
          case "radio":
          case "checkboxes":
            fieldModel.set("currentValue", _.map(_.where(fieldModel.get("data"), {
                selectedInd: "Y"
            }), function(model) {
                return model.label;
            }).join(", ")), fieldModel.set("type", "readonly");
            break;

          case "hidden":
          case "readonly":
            break;

          case "actions":
            fieldModel.set("wrapClass", fieldModel.get("wrapClass") + " hide");
            break;

          default:
            ADF.utils.message("error", "Unxpected field type for readonly override: " + fieldModel.get("type"));
        }
    },
    _createDataAttrObj: function() {
        var returnObj = {};
        return _.each(this.get("dataAttributes"), function(dataAttr) {
            switch (dataAttr.value) {
              case "TRUE":
              case "true":
                returnObj[ADF.utils.string.camelize(dataAttr.name)] = !0;
                break;

              case "FALSE":
              case "false":
                returnObj[ADF.utils.string.camelize(dataAttr.name)] = !0;
                break;

              default:
                returnObj[ADF.utils.string.camelize(dataAttr.name)] = dataAttr.value;
            }
        }), returnObj;
    }
}), ADF.RecordModel = Backbone.Model.extend({
    initialize: function(attrs, opts) {
        ADF.utils.message("log", "RecordModel Initialized", attrs, opts);
        var recordModel = this;
        this._attrsToLower(attrs), this._createInitAttrs(), recordModel.isNew() ? (recordModel.set("id", "a" + ADF.utils.randomId()), 
        recordModel.status = "added", recordModel.set("recordClass", "added")) : (recordModel.status = "current", 
        recordModel.set("recordClass", "current"));
    },
    _attrsToLower: function(attrs) {
        var recordModel = this;
        _.each(attrs, function(element, index, array) {
            index.toLowerCase() !== index && (recordModel.set(index.toLowerCase(), element), 
            recordModel.unset(index)), _.isArray(element) && (_.each(element, function(childElement, childIndex, childArray) {
                ADF.utils.objPropToLower(childElement);
            }), recordModel.set(index.toLowerCase(), element));
        });
    },
    clone: function() {
        var newModel = this._super(), oldId = newModel.id;
        return delete newModel.id, _.each(newModel.attributes, function(value, attribute) {
            value === oldId && delete newModel.attributes[attribute];
        }), newModel;
    },
    _createInitAttrs: function() {
        var keys = [];
        _.each(this.toJSON(), function(val, key) {
            val && keys.push(key);
        }), this.initAttrs = keys;
    },
    parse: function(response, options) {
        return response.success ? ADF.utils.objPropToLower(response.data) : response;
    },
    save: function(attrs, options) {
        var attrs, xhr, attributes = this.attributes, recordModel = this, params = {}, dataArray = [];
        params.type = "POST", options.url || (params.url = _.result(recordModel, "url") || ADF.utils.message("error", "No URL specified"));
        var success = options.success;
        return options.success = function(resp) {
            recordModel.attributes = attributes;
            var serverAttrs = recordModel.parse(resp, options);
            return options.wait && (serverAttrs = _.extend(attrs || {}, serverAttrs)), _.isObject(serverAttrs) && !recordModel.set(serverAttrs, options) ? !1 : (success && success(recordModel, resp, options), 
            recordModel.set("recordClass", "current"), void recordModel.trigger("sync", recordModel, resp, options));
        }, dataArray = ADF.utils.buildADFserializedArray(options.fieldsCollection, null, recordModel), 
        params.data = {
            adfSerializedData: JSON.stringify(dataArray)
        }, xhr = options.xhr = Backbone.ajax(_.extend(params, options)), recordModel.trigger("request", recordModel, xhr, options), 
        xhr;
    }
}), ADF.DropdownMenuModel = Backbone.Model.extend({
    defaults: {
        footerOptions: []
    },
    initialize: function(data) {
        ADF.utils.message("log", "DropdownMenuModel Initialized", data);
    }
}), ADF.ActionModel = Backbone.Model.extend({
    idAttribute: "pageDetailId",
    initialize: function(attrs, opts) {
        ADF.utils.message("log", "ActionModel initialized", opts), this.set("id", this.id), 
        this.set("type", ADF.utils.string.camelize(this.get("type"))), this._setIconType(), 
        this.dataAttributes = this._createDataAttrObj(), this._convertDataAttrs();
    },
    _convertDataAttrs: function() {
        _.each(this.get("dataAttributes"), function(element, index) {
            element.name = element.name.toLowerCase().replace(/[_-]/g, "-");
        });
    },
    _createDataAttrObj: function() {
        var returnObj = {};
        return _.each(this.get("dataAttributes"), function(dataAttr) {
            returnObj[ADF.utils.string.camelize(dataAttr.name)] = dataAttr.value;
        }), returnObj;
    },
    _setIconType: function() {
        switch (this.get("type")) {
          case "saveUnsaved":
            this.set("iconType", "save");
            break;

          default:
            this.set("iconType", this.get("type"));
        }
    }
}), ADF.MessageModel = Backbone.Model.extend({
    initialize: function(attrs, opts) {
        this.set("id", ADF.utils.randomId()), ADF.utils.message("log", "MessageModel initialized", opts);
    }
}), ADF.ActionsCollection = Backbone.Collection.extend({
    model: ADF.ActionModel,
    initialize: function(models, opts) {
        ADF.utils.message("log", "ActionsCollection initialized", opts);
    }
}), ADF.FieldsCollection = Backbone.Collection.extend({
    model: ADF.FieldModel,
    initialize: function(models, options) {
        ADF.utils.message("log", "FieldsCollection Initialized", models, options), this.options = $.extend({}, options), 
        options && options.recordModelDefaults && (this.options.recordModelDefaults = {}, 
        _.each(models, function(model) {
            this.options.recordModelDefaults[model.get("name")] = options.recordModelDefaults[model.get("name")];
        }, this), ADF.utils.message("log", "fields collection recordModelDefaults", this.options.recordModelDefaults));
    },
    createRecordObject: function() {
        var dataObj = {};
        return _.each(this.models, function(model) {
            this.options && this.options.recordModelDefaults ? dataObj[model.get("name")] = this.options.recordModelDefaults[model.get("name")] : dataObj[model.get("name")] = model.get("currentValue");
        }, this), dataObj;
    }
}), ADF.MessagesCollection = Backbone.Collection.extend({
    model: ADF.MessageModel,
    initialize: function(models, opts) {
        ADF.utils.message("log", "MessagesCollection initialized", opts);
    }
}), ADF.RecordsCollection = Backbone.Collection.extend({
    model: ADF.RecordModel,
    sortDirection: 1,
    initialize: function(models, options) {
        ADF.utils.message("log", "RecordsCollection Initialized", models, options), this.sortAttribute = options.sortAttribute;
    },
    sortRecords: function(columnName) {
        return this.sortAttribute === columnName ? this.sortDirection *= -1 : (this.sortAttribute = columnName, 
        this.sortDirection = 1), this.sort(), 1 === this.sortDirection ? "asc" : "desc";
    },
    comparator: function(a, b) {
        var a = a.get(this.sortAttribute), b = b.get(this.sortAttribute);
        return a == b ? 0 : _.isUndefined(a) ? -1 : _.isUndefined(b) ? 1 : 1 === this.sortDirection ? a > b ? 1 : -1 : b > a ? 1 : -1;
    }
}), ADF.Core.DropdownView = Backbone.Marionette.CompositeView.extend({
    template: ADF.templates.dropdowns.menu,
    tagName: "li",
    childViewContainer: ".dropdown-menu .primary-options",
    childViewOptions: function() {
        return {
            regionName: this.regionName
        };
    },
    events: {
        "click    .dropdown-toggle": "dropdownToggle",
        "mouseout .dropdown-menu": "dropdownToggle"
    },
    initialize: function(options) {
        ADF.utils.message("log", "DropdownMenuView Initialized", options);
    },
    dropdownToggle: function(event) {
        var $target = {};
        if (event.target) {
            var to = event.relatedTarget || event.toElement, $relatedTarget = $(to);
            if (event.preventDefault(), $target = $(event.target), "mouseout" === event.type && $relatedTarget.closest(".dropdown-wrapper").size() > 0) return !1;
        } else $target = event;
        this.$el.find(".dropdown-menu").hasClass("hide") ? this.open() : this.close();
    },
    open: function() {
        this.$el.find(".dropdown-menu").removeClass("hide").addClass("show"), this.$el.trigger("dropdownToggle:open");
    },
    close: function() {
        this.$el.find(".dropdown-menu").addClass("hide").removeClass("show"), this.$el.trigger("dropdownToggle:close");
    }
}), ADF.Core.ActionView = Backbone.Marionette.ItemView.extend({
    template: ADF.templates.action,
    events: {
        click: "handleClick"
    },
    initialize: function(options) {
        ADF.utils.message("log", "Core.ActionView initialized", options), this.region = options && options.region;
    },
    onRender: function() {
        this.setElement(this.$el.children().unwrap());
    },
    handleClick: function(e) {
        switch (this.model.get("type")) {
          case "link":
            break;

          case "submit":
            e.preventDefault(), adf.page.getRegion(this.options.regionName).formView.submitForm(e, this);
            break;

          case "submitCustomUrl":
            e.preventDefault();
            var $triggerObj = $(e.target).closest(".btn");
            $triggerObj.closest("form").attr("action", $triggerObj.attr("href")).submit();
            break;

          default:
            ADF.utils.message("error", "Unexpected action type (" + this.model.get("type") + ")");
        }
    }
}), ADF.Core.ActionsView = Backbone.Marionette.CollectionView.extend({
    tagName: "a",
    childView: ADF.Core.ActionView,
    childViewOptions: function() {
        return {
            regionName: this.options.regionName
        };
    },
    initialize: function(options) {
        ADF.utils.message("log", "Core.ActionsView Initialized", options), $.extend(this.options, options), 
        this.listenTo(this.collection, "reset", this.render);
    }
}), ADF.Core.ColumnSelectItemView = Backbone.Marionette.ItemView.extend({
    template: ADF.templates.dropdowns.selectItem,
    tagName: "li",
    events: {
        "change :input": "columnSelect"
    },
    initialize: function(options) {
        ADF.utils.message("log", "ColumnSelectItemView Initialized", options), this.region = options.region, 
        this.model.set("idPrefix", "ColSelect"), this.model.set("regionName", this.region.name), 
        this.listenTo(this.model, "change:checkedInd", this.render);
    },
    onRender: function() {
        this.setElement(this.$el.find("li").unwrap());
    },
    columnSelect: function(e) {
        var $input = this.$el.find(":checkbox"), id = this.region.name + "--" + this.model.get("name"), $fields = this.region.$el.find("[data-field-name=" + this.model.get("name") + "]"), $cells = $("#" + id + ", .adf-grid td[data-header-id=" + id + "]");
        $input.is(":checked") ? ($cells.show(), $fields.removeClass("hide").addClass("show"), 
        this.model.set({
            checkedInd: "Y",
            colSelectDispOverride: "Y"
        })) : ($cells.hide(), $fields.removeClass("show").addClass("hide"), this.model.set({
            checkedInd: "N",
            colSelectDispOverride: "N"
        }));
    }
}), ADF.Core.ColumnSelectView = ADF.Core.DropdownView.extend({
    childView: ADF.Core.ColumnSelectItemView,
    childViewOptions: function() {
        return {
            region: this.region
        };
    },
    events: {
        "click  .adf-column-group": "columnGroupSelect"
    },
    initialize: function(options) {
        ADF.utils.message("log", "ColumnSelectView Initialized", options);
        var footerOptions = [];
        this.region = options.region, this.regionName = options.regionName, this.events = _.extend({}, ADF.Core.DropdownView.prototype.events, this.events), 
        this.model.set("buttonLabel", "Column Select"), this.model.set("wrapClass", "column-selector"), 
        footerOptions.push({
            href: "#",
            itemClass: "adf-column-group",
            label: "All Columns",
            dataAttributes: [ {
                name: "column-select-type",
                value: "all"
            } ]
        }), footerOptions.push({
            href: "#",
            itemClass: "adf-column-group",
            label: "Minimum Columns",
            dataAttributes: [ {
                name: "column-select-type",
                value: "min"
            } ]
        }), footerOptions.push({
            href: "#",
            itemClass: "adf-column-group",
            label: "Default Columns",
            dataAttributes: [ {
                name: "column-select-type",
                value: "dflt"
            } ]
        }), this.model.set("footerOptions", footerOptions);
    },
    filter: function(child, index, collection) {
        return 0 !== child.get("fieldPriority");
    },
    columnGroupSelect: function(e) {
        e.preventDefault();
        var colSelect = this, $target = $(e.target), groupType = $target.attr("data-column-select-type");
        switch (groupType) {
          case "all":
            $target.closest(".dropdown-wrapper").find(".dropdown-menu :input").not(":checked").trigger("click");
            break;

          case "min":
            $target.closest(".dropdown-wrapper").find(".dropdown-menu :input").each(function() {
                var inputObj = $(this), priority = parseInt($("#" + inputObj.val()).attr("data-column-select-priority"), 10);
                (inputObj.is(":checked") && priority > 1 || inputObj.is(":not(:checked)") && 1 >= priority) && inputObj.trigger("click");
            });
            break;

          case "dflt":
            var dropdownMenu = $target.closest(".dropdown-wrapper").find(".dropdown-menu");
            $(".adf-grid th, .adf-grid td").css("display", ""), $(".adf-grid th").each(function() {
                var inputObj = dropdownMenu.find(":input[value=" + $(this).attr("id") + "]");
                "table-cell" === $(this).css("display") && inputObj.is(":not(:checked)") ? inputObj.trigger("click") : "none" === $(this).css("display") && inputObj.is(":checked") && inputObj.trigger("click");
            });
        }
        colSelect.dropdownToggle($target.closest(".dropdown-wrapper").find(".dropdown-toggle"));
    }
}), ADF.Core.InputView = Backbone.Marionette.ItemView.extend({
    template: ADF.templates.forms.row,
    parentEvents: {
        change: "fieldChange"
    },
    events: function() {
        return this.parentEvents;
    },
    initialize: function(options) {
        ADF.utils.message("log", "Core.InputView Initialized", options), this.listenTo(this.model, "set", this.valueChange), 
        _.isUndefined(this.model.get("inputTemplate")) ? ADF.utils.message("error", "Attempting to assign inputField attribute to undefined template", this.model) : this.model.set("inputField", this.model.get("inputTemplate")(this.model.toJSON())), 
        this.region = options ? options.region : !1;
    },
    onRender: function() {
        this.setElement(this.$el.children().unwrap()), ADF.utils.inputHandlerRefresh(this.$el), 
        adf.debugEnabled && ADF.utils.prepareDebug(this.$el);
    },
    fieldChange: function(e) {
        if ("selectFancy" === this.model.get("type") && $(e.target).is("input:visible")) return !1;
        this.model.get("dataAttributes");
        this.valueChange(e), this._submitOnChange(e, this.model.dataAttributes.submitOnChange), 
        this._dependentFieldLkup(e, this.model.dataAttributes.dpndntFieldLkupOnChange), 
        this._customEvents(e, this.model.dataAttributes.onChangeEventTrigger);
    },
    _submitOnChange: function(event, dataAttrVal) {
        dataAttrVal && adf.page.getRegion(this.options.regionName).formView.submitForm(event, this);
    },
    _dependentFieldLkup: function(event, dataAttrVal) {
        dataAttrVal && adf.page.getRegion(this.options.regionName).formView.dependentFieldLkup(event, this);
    },
    _customEvents: function(event, dataAttrVal) {
        dataAttrVal && this.$el.trigger(ADF.utils.string.camelize(dataAttrVal), event);
    },
    valueChange: function(e) {
        var fieldView = this, $target = $(e.target);
        if (fieldView.model.dataCollection && ($target.is(":checkbox") || $target.is(":radio"))) {
            var crntVal, $crntInput, currentValue = [], $formRow = $target.closest(".form-row"), $delimiterEl = $formRow.find("*[data-input-delimiter]"), delimiter = $delimiterEl.size() > 0 ? $delimiterEl.attr("data-input-delimiter") : "|";
            $formRow.find(":input:checkbox, :input:radio").each(function() {
                $crntInput = $(this), crntVal = $crntInput.val(), $crntInput.is(":checked") ? (currentValue.push(crntVal), 
                fieldView.model.dataCollection.findWhere({
                    value: crntVal
                }).set("selectedInd", "Y")) : (currentValue.indexOf(crntVal) >= 0 && currentValue.splice(currentValue.indexOf(crntVal), 1), 
                fieldView.model.dataCollection.findWhere({
                    value: crntVal
                }).set("selectedInd", "N"));
            }), this.model.set("currentValue", currentValue.join(delimiter));
        } else this.model.set("currentValue", $(e.target).val());
    },
    getDelimiter: function() {
        var delimiterObj = _.findWhere(this.model.get("dataAttributes"), {
            name: "input-delimiter"
        });
        return delimiterObj ? delimiterObj.value : "|";
    },
    setInitValue: function() {
        var delimiter = this.getDelimiter(), selectedOptions = this.model.dataCollection.where({
            selectedInd: "Y"
        });
        selectedOptions = _.map(selectedOptions, function(optionModel) {
            return optionModel.get("value");
        }), this.model.set("currentValue", selectedOptions.join(delimiter));
    }
}), ADF.Core.RecordView = Marionette.CompositeView.extend({
    className: "adf-record",
    events: {
        "change :input": "inputChange",
        "click .btn": "handleAction"
    },
    initialize: function(options) {
        ADF.utils.message("log", "RecordView Initialized", options), this.region = adf.page.getRegion(options.regionName), 
        this.regionName = options.regionName, this.model.set("regionName", this.regionName), 
        this.collection = new ADF.FieldsCollection(this.region.fieldsCollection.toJSON()), 
        this.assignCollectionValuesFromModel(!0, !1), this.listenTo(this.model, "all", this.recordEvent), 
        this.modelHistory = [];
    },
    assignCollectionValuesFromModel: function(initialAssignment, force) {
        this.collection.each(function(model) {
            initialAssignment && model.set("regionName", this.regionName), this.model.get(model.get("name")) ? model.set("currentValue", this.model.get(model.get("name"))) : model.get("currentValue") && this.model.set(model.get("name"), model.get("currentValue"));
        }, this);
    },
    handleAction: function(e) {
        var $targetObj = $(e.target).closest("a"), actionType = $targetObj.attr("data-action-type");
        this.actions[ADF.utils.string.camelize(actionType)] ? this.actions[ADF.utils.string.camelize(actionType)](this, e) : ADF.utils.message("error", "Unexpected record action (" + actionType + ") triggered.", $targetObj);
    },
    actions: {
        link: function(recordView, e) {
            return !0;
        },
        clone: function(recordView, e) {
            e.preventDefault();
            var clonedModel = this.model.clone();
            recordView.region.gridView.bodyView.collection.add(clonedModel, {
                at: recordView.region.gridView.bodyView.collection.indexOf(this.model)
            });
        },
        revert: function(recordView, e) {
            e.preventDefault(), this._updateStatus("current"), this.model.set(this.model.previousAttributes()), 
            this.render();
        },
        save: function(recordView, e) {
            e ? (e.preventDefault(), recordView.model.url = $(e.target).closest("a").attr("href")) : recordView.model.url = recordView.$el.find("[data-action-type=save]").first().attr("href"), 
            recordView.model.save(null, {
                fieldsCollection: recordView.collection
            });
        },
        submitCustomUrl: function(recordView, e) {
            e.preventDefault();
            var $triggerObj = $(e.target).closest(".btn");
            recordView.model.url = $triggerObj.attr("href"), recordView.model.save(null, {
                fieldsCollection: recordView.collection
            });
        },
        submitRecordForm: function(recordView, e) {
            e.preventDefault();
            var action = $(e.target).closest("a").attr("href"), dataArray = ADF.utils.buildADFserializedArray(recordView.collection, null, null), childRegions = $(e.currentTarget).data("child-regions") ? $(e.currentTarget).data("child-regions").split(/[\s,]+/) : !1;
            "#" === action.substring(0, 1) ? $(action).size() > 0 ? (ADF.utils.message("log", "Found something to load into"), 
            $(action).each(function() {
                adf.page.getRegion(ADF.utils.string.camelize($(this).attr("id"))).ajax({
                    data: {
                        adfSerializedData: JSON.stringify(dataArray)
                    },
                    method: "POST"
                });
            }), childRegions && childRegions.length > 0 && _.each(childRegions, function(childRegion) {
                adf.page.getRegion(ADF.utils.string.camelize(childRegion)).hide();
            })) : ADF.utils.message("error", "Trying to load ajax but destination element could not be found on the page") : ADF.utils.message("error", "Other submission methods not supported currently");
        }
    },
    inputChange: function(e) {
        e.preventDefault(), e.stopPropagation();
        var changed = e.currentTarget, value = $(e.currentTarget).val();
        this.modelHistory.push(this.model.toJSON()), $(e.currentTarget).is(":checkbox") && !$(e.currentTarget).is(":checked") && (value = "Y" === value ? "N" : null);
        var obj = {};
        obj[changed.name] = value, this.model.set(obj), ADF.utils.message("log", "Record input change", obj, this.model), 
        this._updateStatus("updated"), this.region.autoSave && this.actions.save(this, !1);
    },
    _updateStatus: function(newStatus) {
        this.model.status = newStatus, this.$el.removeClass("updated added current error").addClass(newStatus);
    },
    _updateFieldCollectionValues: function(changes) {
        var fieldModel;
        this.collection.models.length > 0 && _.each(changes, function(fieldValue, fieldName) {
            fieldModel = this.collection.findWhere({
                name: fieldName
            }), fieldModel && fieldModel.set("currentValue", fieldValue);
        }, this);
    },
    _renderChildren: function() {
        this._super();
    },
    _showMessage: function() {
        var $msgDiv = this.$el.find(".adf-record-messages"), args = Array.prototype.slice.call(arguments), msgType = args.shift().toLowerCase();
        if (this._updateStatus(msgType), $msgDiv.size() > 0) {
            var width = $msgDiv.html(args.join("<br>")).outerWidth();
            $msgDiv.css("width", "0").show().animate({
                width: width
            }, 800, function() {
                setTimeout(function() {
                    $msgDiv.animate({
                        width: 0
                    }, 800, function() {
                        $msgDiv.hide().empty();
                    });
                }, 5e3);
            });
        } else ADF.utils.message.apply(arguments);
    },
    recordEvent: function(event, model, response, options) {
        switch (event.indexOf(":") >= 0 ? event.substr(0, event.indexOf(":")) : event) {
          case "change":
            this._updateStatus("updated"), this._updateFieldCollectionValues(model.changed);
            break;

          case "request":
            break;

          case "sync":
            200 === options.xhr.status ? (ADF.utils.message("log", "Record sync completed successfully", model, response, options), 
            response.success ? (this.assignCollectionValuesFromModel(!1, !1), this._updateStatus("current")) : (this._updateStatus("error"), 
            response.errors.length > 0 ? this._showMessage("error", "Something went wrong in saving the record", response.errors.join(","), model, response, options) : this._showMessage("error", "Something went wrong in saving the record", response.message, model, response, options))) : (this._updateStatus("error"), 
            ADF.utils.message("error", "Something unexpected went wrong in saving the record", model, response, options));
            break;

          case "add":
            ADF.utils.message("info", "Add event triggered for a record view");
            break;

          default:
            ADF.utils.message("error", "Unexpected event from the record view", event, model, response, options);
        }
    }
}), ADF.Actions.CustomView = ADF.Core.ActionView.extend({
    events: {
        click: "customAction"
    },
    initialize: function(options) {
        ADF.utils.message("log", "Actions.CustomView initialized", options), this._super(options);
    },
    customAction: function(e) {
        e.preventDefault(), this.region.$el.trigger(this.model.dataAttributes.customEventName);
    }
}), ADF.Actions.GridDefaultView = Backbone.Marionette.ItemView.extend({
    template: ADF.templates.action,
    tagName: "li",
    events: {
        click: "handleClick"
    },
    initialize: function(options) {
        ADF.utils.message("log", "GridActionView Initialized", options), this.region = adf.page.getRegion(options.regionName);
    },
    onRender: function() {
        this.setElement(this.$el.children().unwrap());
    },
    handleClick: function(e) {
        var actionView = this, $action = $(e.target);
        if (!$action.data("action-type")) return !0;
        e.preventDefault();
        var actionType = ADF.utils.string.camelize($action.data("action-type"));
        return actionView[actionType] ? void actionView[actionType]($action) : void ADF.utils.message("error", "action type not defined", actionType);
    }
}), ADF.Actions.LinkToAdfSubmissionView = ADF.Actions.GridDefaultView.extend({
    events: {
        "click  a": "submitAdf"
    },
    initialize: function(options) {
        ADF.utils.message("log", "Actions.LinkToAdfSubmission Initialized", options), this.gridView = options.gridView;
    },
    submitAdf: function(e) {
        var modelUrl = this.model.get("url"), ajaxUrl = modelUrl.substr(0, modelUrl.indexOf("?")), dataArray = ADF.utils.buildADFserializedArray(null, ADF.utils.string.querystringToObj(modelUrl.substr(modelUrl.indexOf("?") + 1)), !1);
        e.preventDefault(), $.ajax({
            url: ajaxUrl,
            type: "POST",
            data: {
                adfSerializedData: JSON.stringify(dataArray)
            },
            complete: function(jqXhr, textStatus) {
                200 === jqXhr.status ? jqXhr.responseJSON.success ? ADF.utils.message("info", "Submission worked, now what do we do?") : ADF.utils.message("error", "Problem submitting the job", jqXhr.responseJSON.errors.join(",")) : ADF.utils.message("error", "Problem posting to the submission process", jqXhr.responseJSON.errors.join(","));
            }
        });
    }
}), ADF.Actions.ModuleDefaultView = ADF.Core.ActionView.extend({
    events: {
        click: "handleAction"
    },
    initialize: function(options) {
        ADF.utils.message("log", "Actions.ModuleDefaultView initialized", options), this.region = options.region, 
        this._super();
    },
    handleAction: function(e) {
        var actionView = this, $targetObj = $(e.target).closest("a"), actionType = $targetObj.attr("data-action-type");
        switch (actionType) {
          case "save":
            e.preventDefault(), actionView.region.modulesView.moduleListView.collection.each(function(moduleModel) {
                moduleModel.url = $targetObj.attr("href"), moduleModel.save(null, {
                    fieldsCollection: actionView.region.modulesView.region.fieldsCollection
                });
            });
            break;

          default:
            ADF.utils.message("error", "Unexpected module action (" + actionType + ") triggered.", $targetObj);
        }
    }
}), ADF.Actions.RecordAddView = Backbone.Marionette.ItemView.extend({
    template: ADF.templates.grids.recordAddWidget,
    tagName: "span",
    events: {
        "click .btn": "addRecords",
        "click svg": "toggleInput",
        input: "changeRecCount"
    },
    initialize: function(options) {
        ADF.utils.message("log", "Actions.RecordAddView Initialized", options), this.gridView = options.gridView, 
        this.region = options.region, this.model.set("recCount", ADF.utils.userPrefs.get("recordAddCount"));
    },
    ui: {
        recCntDisp: ".record-add-control-display"
    },
    toggleInput: function(e) {
        e.preventDefault(), e.stopPropagation(), this.$el.toggleClass("open");
    },
    addRecords: function(e) {
        this.$el.removeClass("open");
        var defaultsObj = {};
        this.region.options && this.region.options.dataFields && (defaultsObj = this.region.options.dataFields.createRecordObject()), 
        e.preventDefault(), this._setRecCount();
        for (var i = 1; i <= this.model.get("recCount"); i++) this.gridView.bodyView.collection.add(defaultsObj, {
            at: 0
        });
    },
    _setRecCount: function() {
        ADF.utils.userPrefs.set("recordAddCount", this.model.get("recCount"));
    },
    changeRecCount: function(e) {
        this.model.set("recCount", e.target.value), this.ui.recCntDisp.text(e.target.value);
    }
}), ADF.Actions.SaveUnsavedView = ADF.Core.ActionView.extend({
    events: {
        click: "saveUnsaved"
    },
    initialize: function(options) {
        ADF.utils.message("log", "Actions.SaveUnsavedView Initialized", options), options.gridView ? (this.gridView = options.gridView, 
        this.recordTarget = this.gridView.bodyView, this.template = ADF.templates.action) : options.modulesView && (this.modulesView = options.modulesView, 
        this.recordTarget = this.modulesView.moduleListView);
    },
    saveUnsaved: function(e) {
        e.preventDefault();
        var url, recordParent;
        recordParent = this.gridView ? this.gridView.bodyView : this.modulesView.moduleListView, 
        recordParent.children.each(function(childView) {
            "current" !== childView.model.status && "added" !== childView.model.status && (url = _.findWhere(childView.collection.findWhere({
                type: "actions"
            }).get("actions"), {
                type: "save"
            }).url, childView.model.save(null, {
                fieldsCollection: childView.collection,
                url: url
            }));
        });
    }
}), ADF.Actions.SubmitLongPoll = ADF.Core.ActionView.extend({
    events: {
        click: "submitLongPoll",
        formSubmitted: "checkLongPoll"
    },
    initialize: function(options) {
        ADF.utils.message("log", "Actions.SubmitLongPoll initialized", options), this._super(), 
        this.model.set("dataAttributes", this.model.get("dataAttributes").concat([ {
            name: "submit-type",
            value: "ajax"
        } ]));
    },
    submitLongPoll: function(e) {
        e.preventDefault(), adf.page.getRegion(this.options.regionName).formView.submitForm(e, this);
    },
    checkLongPoll: function(e, jqXhr) {
        var responseJson = JSON.parse(jqXhr.responseText), checkUrl = this.model._createDataAttrObj().longPollCheckUrl, dataArray = ADF.utils.buildADFserializedArray(null, responseJson.data, !1);
        200 === jqXhr.status ? responseJson.success ? (ADF.utils.spin(adf.page.$el), function poll() {
            setTimeout(function() {
                $.ajax({
                    url: checkUrl,
                    type: "POST",
                    data: {
                        adfSerializedData: JSON.stringify(dataArray)
                    },
                    complete: function(jqXhr, textStatus) {
                        console.log(arguments), jqXhr.responseJSON.data ? ADF.utils.spin(adf.page.$el, {
                            stop: !0
                        }) : poll();
                    }
                });
            }, 800);
        }()) : ADF.utils.message("error", "Problem submitting the form for long polling", responseJson.errors.join(",")) : ADF.utils.message("error", "Problem posting the form for long polling to begin", responseJson.errors.join(","));
    }
}), ADF.Inputs.AjaxSuggestView = ADF.Core.InputView.extend({
    childEvents: {
        "input .ajax-suggest": "input",
        "keydown .ajax-suggest": "keydown",
        "click .option": "click",
        "click .clear": "clear",
        "click .toggle": "toggle"
    },
    events: function() {
        return _.extend({}, this.parentEvents, this.childEvents);
    },
    ui: {
        overlay: ".options",
        options: ".options tbody",
        dispInput: ".ajax-suggest",
        valInput: ".adf-form-input"
    },
    initialize: function(options) {
        ADF.utils.message("log", "Inputs.AjaxSuggestView Initialized", options), this.region = options.region, 
        this._super();
    },
    onRender: function() {
        this.region instanceof ADF.GridRegion && 0 !== this.model.get("fieldPriority") && "table-cell" === this.$el.css("display") && ADF.utils.message("log", this.model.get("fieldName"), "should be displayed as table cell"), 
        this._super();
    },
    input: function(e) {
        this.empty(), this.open(this.ui.dispInput.val());
    },
    toggle: function(e) {
        e.preventDefault(), this.opened ? this.close() : this.open();
    },
    empty: function() {
        this.ui.options.empty();
    },
    close: function() {
        this.empty(), this.opened = !1, this.$el.removeClass("open");
    },
    keydown: function(e) {
        var keyCode = e.keyCode;
        switch (keyCode) {
          case 38:
          case 40:
            e.preventDefault(), this.opened ? this.move(38 === keyCode ? "previous" : "next") : (this.open(), 
            this.move("next"));
            break;

          case 27:
            this.close();
            break;

          case 13:
            this.opened && (e.preventDefault(), this.model.get("highlightedOption").click());
        }
    },
    move: function(dir) {
        var newHighlight;
        this.model.get("highlightedOption") && (this.model.get("highlightedOption").removeClass("highlight"), 
        newHighlight = "next" === dir ? this.model.get("highlightedOption").next() : this.model.get("highlightedOption").prev()), 
        newHighlight && 0 !== newHighlight.size() || (newHighlight = "next" === dir ? this.ui.options.children().first() : this.ui.options.children().last()), 
        this.model.set("highlightedOption", newHighlight.addClass("highlight"));
    },
    open: function(filterText) {
        var sFView = this;
        if (this.opened = !0, this.$el.addClass("open"), sFView.model.dataAttributes.fieldNames && "" === this.ui.overlay.find("thead").text()) {
            var headerRow = "<tr>";
            _.each(sFView.model.dataAttributes.fieldNames.split("|"), function(fieldName) {
                fieldName.length > 0 && (headerRow += "<th>" + fieldName + "</th>");
            }), headerRow += "</tr>", sFView.ui.overlay.find("thead").append(headerRow);
        }
        var results = {};
        results = filterText ? new Backbone.Collection(this.model.dataCollection.filter(function(item) {
            return item.get("label") ? item.get("value").toLowerCase().indexOf(filterText.toLowerCase()) >= 0 || item.get("label").toLowerCase().indexOf(filterText.toLowerCase()) >= 0 : item.get("value").toLowerCase().indexOf(filterText.toLowerCase()) >= 0;
        })) : this.model.dataCollection, 0 === results.length ? sFView.ui.options.append("<tr><td>No results found</td></tr>") : results.each(function(result) {
            sFView.ui.options.append(ADF.templates.inputHelpers.selectFancyRecord($.extend({}, result.toJSON(), {
                fieldDelimiter: sFView.model.dataAttributes.fieldNames
            })));
        }), this.addOptionUrl && sFView.ui.options.append(ADF.templates.inputHelpers.selectFancyAddOption({
            addOptionUrl: this.addOptionUrl
        })), sFView.ui.dispInput.focus();
    },
    click: function(e) {
        e.preventDefault();
        var $selected = $(e.target).closest("tr");
        this.ui.dispInput.val($.trim($selected.text())), this.ui.valInput.val($selected.data("value")), 
        this.model.set("currentValue", $selected.data("value")), this.ui.valInput.trigger("change"), 
        this.close();
    },
    clear: function(e) {
        e.preventDefault(), this.model.set("currentValue", ""), this.ui.dispInput.val(""), 
        this.ui.valInput.val(""), this.ui.valInput.trigger("change"), this.close();
    }
}), ADF.Inputs.CheckboxesView = ADF.Core.InputView.extend({
    childEvents: {
        "click .adf-checkbox-select-all-toggle": "selectAllToggle"
    },
    events: function() {
        return _.extend({}, this.parentEvents, this.childEvents);
    },
    initialize: function(options) {
        ADF.utils.message("log", "Input.CheckboxesView Initialized", options), this.setInitValue(), 
        this._super();
    },
    selectAllToggle: function(e) {
        e.preventDefault();
        var $checkboxesWrapper, dataAttrs = this.model.get("dataAttributes"), $target = $(e.currentTarget);
        $checkboxesWrapper = $target.closest(".adf-checkbox-group-wrapper").size() > 0 ? $target.closest(".adf-checkbox-group-wrapper") : $target.closest(".form-row");
        var $chkBxs = $checkboxesWrapper.find(":checkbox"), chkBxIds = $chkBxs.map(function() {
            return this.value;
        }), chkBxCnt = $chkBxs.size(), chkBxSlctd = $chkBxs.filter(":checked").size(), actionType = chkBxSlctd > chkBxCnt / 2 ? "uncheck" : "check";
        "uncheck" === actionType ? ($chkBxs.prop("checked", !1), this.model.dataCollection.each(function(dataModel) {
            _.indexOf(chkBxIds, dataModel.get("value")) >= 0 && dataModel.set("selectedInd", "N");
        })) : ($chkBxs.prop("checked", !0), this.model.dataCollection.each(function(dataModel) {
            _.indexOf(chkBxIds, dataModel.get("value")) >= 0 && dataModel.set("selectedInd", "Y");
        })), this.model._updateCrntValFromDataCollection(), this._submitOnChange(e, _.findWhere(dataAttrs, {
            name: "submit-on-change"
        })), this._dependentFieldLkup(e, _.findWhere(dataAttrs, {
            name: "dpndnt-field-lkup-on-change"
        }));
    }
}), ADF.Inputs.FormDefaultView = ADF.Core.InputView.extend({
    template: ADF.templates.forms.row,
    events: function() {
        return _.extend({}, this.parentEvents, this.childEvents);
    },
    initialize: function(options) {
        ADF.utils.message("log", "Input.FormDefaultView Initialized", options), this._super();
    }
}), ADF.Inputs.GridActionsView = ADF.Core.InputView.extend({
    events: function() {
        return _.extend({}, this.parentEvents, this.childEvents);
    },
    initialize: function(options) {
        ADF.utils.message("log", "Inputs.GridActionsView Initialized", options), this.model.set("gridCell", !0), 
        this.rowView = options.rowView, this._setActionDisplayFilter(), this._super();
    },
    onRender: function() {
        this._applyActionDisplayFilter(), this._stringSubstitueHrefs(), 0 !== this.model.get("fieldPriority") && "table-cell" === this.$el.css("display") && ADF.utils.message("log", this.model.get("fieldName"), "should be displayed as table cell"), 
        this._super();
    },
    _setActionDisplayFilter: function() {
        _.each(this.model.get("actions"), function(action, index) {
            action.dataAttributes && (action.actionDisplayFilter = _.findWhere(action.dataAttributes, {
                name: "ACTION_DISPLAY_FILTER"
            }), action.actionDisplayFilter = action.actionDisplayFilter ? ADF.utils.string.querystringToObj(action.actionDisplayFilter.value) : !1), 
            action.type = action.type.toLowerCase();
        }, this);
    },
    _applyActionDisplayFilter: function() {
        _.each(this.model.get("actions"), function(action, index) {
            action.actionDisplayFilter && _.each(action.actionDisplayFilter, function(filterVal, filterField) {
                this.rowView.collection.findWhere({
                    name: filterField
                }).get("currentValue") !== filterVal && this.$el.find("[data-page-dtl-id=" + action.pageDetailId + "]").hide();
            }, this);
        }, this);
    },
    _stringSubstitueHrefs: function() {
        _.each(this.model.get("actions"), function(action) {
            this.$el.find("[data-page-dtl-id=" + action.pageDetailId + "]").attr("href", ADF.utils.string.substitute(action.url, this.rowView.model.toJSON()));
        }, this);
    }
}), ADF.Inputs.GridDefaultView = ADF.Core.InputView.extend({
    template: ADF.templates.grids.cell,
    tagName: "td",
    events: function() {
        return _.extend({}, this.parentEvents, this.childEvents);
    },
    initialize: function(options) {
        ADF.utils.message("log", "CellView Initialized", options), this.model.set("gridCell", !0), 
        this._super();
    },
    onRender: function() {
        0 !== this.model.get("fieldPriority") && "table-cell" === this.$el.css("display") && ADF.utils.message("info", this.model.get("fieldName"), "should be displayed as table cell"), 
        this._super();
    }
}), ADF.Inputs.GridOverlayView = ADF.Core.InputView.extend({
    childEvents: {
        "click .adf-grid-overlay-value": "showOverlayEditor"
    },
    events: function() {
        return _.extend({}, this.parentEvents, this.childEvents);
    },
    initialize: function(options) {
        ADF.utils.message("log", "GridOverlayView Initialized", options), this._super();
    },
    onRender: function() {
        this.region instanceof ADF.GridRegion && 0 !== this.model.get("fieldPriority") && "table-cell" === this.$el.css("display") && ADF.utils.message("log", this.model.get("fieldName"), "should be displayed as table cell"), 
        this._super();
    },
    showOverlayEditor: function(e) {
        e.preventDefault(), adf.page.getRegion("overlayEditor").show(this);
    }
}), ADF.Inputs.ModuleActionsView = ADF.Core.InputView.extend({
    events: function() {
        return _.extend({}, this.parentEvents, this.childEvents);
    },
    initialize: function(options) {
        ADF.utils.message("log", "Inputs.ModuleActionsView Initialized", options), this.moduleView = options.moduleView, 
        _.each(this.model.get("actions"), function(action, index) {
            action.dataAttributes && (action.actionDisplayFilter = _.findWhere(action.dataAttributes, {
                name: "ACTION_DISPLAY_FILTER"
            }), action.actionDisplayFilter = action.actionDisplayFilter ? ADF.utils.string.querystringToObj(action.actionDisplayFilter.value) : !1), 
            action.type = action.type.toLowerCase();
        }, this), this._super();
    },
    onRender: function() {
        this._applyActionDisplayFilter(), this._stringSubstitueHrefs(), this._super();
    },
    _applyActionDisplayFilter: function() {
        _.each(this.model.get("actions"), function(action, index) {
            action.actionDisplayFilter && _.each(action.actionDisplayFilter, function(filterVal, filterField) {
                this.moduleView.collection.findWhere({
                    name: filterField
                }).get("currentValue") !== filterVal && this.$el.find("[data-page-dtl-id=" + action.pageDetailId + "]").hide();
            }, this);
        }, this);
    },
    _stringSubstitueHrefs: function() {
        _.each(this.model.get("actions"), function(action) {
            this.$el.find("[data-page-dtl-id=" + action.pageDetailId + "]").attr("href", ADF.utils.string.substitute(action.url, this.moduleView.model.toJSON()));
        }, this);
    }
}), ADF.Inputs.ModuleDefaultView = ADF.Core.InputView.extend({
    template: ADF.templates.forms.row,
    events: function() {
        return _.extend({}, this.parentEvents, this.childEvents);
    },
    initialize: function(options) {
        ADF.utils.message("log", "Input.ModuleDefaultView Initialized", options), this._super();
    }
}), ADF.Inputs.SelectFancyView = ADF.Core.InputView.extend({
    childEvents: {
        "input .select-fancy": "input",
        "keydown .select-fancy": "keydown",
        "click .option": "click",
        "click .clear": "clear",
        "click .toggle": "toggle",
        "click .select-fancy-add-option a": "addOptionOpen",
        "click .btn-cancel": "addOptionClose",
        "click .btn-submit": "addOptionSubmit"
    },
    events: function() {
        return _.extend({}, this.parentEvents, this.childEvents);
    },
    ui: {
        overlay: ".options",
        options: ".options tbody",
        dispInput: ".select-fancy",
        valInput: ".adf-form-input"
    },
    initialize: function(options) {
        ADF.utils.message("log", "Inputs.SelectFancyView Initialized", options), this.addOptionUrl = this.model.getDataAttrVal("add-option-url"), 
        this.region = options.region, this._super();
    },
    onRender: function() {
        this.region instanceof ADF.GridRegion && 0 !== this.model.get("fieldPriority") && "table-cell" === this.$el.css("display") && ADF.utils.message("log", this.model.get("fieldName"), "should be displayed as table cell"), 
        this._super();
    },
    input: function(e) {
        this.empty(), this.open(this.ui.dispInput.val());
    },
    toggle: function(e) {
        e.preventDefault(), this.opened ? this.close() : this.open();
    },
    empty: function() {
        this.ui.options.empty();
    },
    close: function() {
        this.empty(), this.opened = !1, this.$el.removeClass("open");
    },
    keydown: function(e) {
        var keyCode = e.keyCode;
        switch (keyCode) {
          case 38:
          case 40:
            e.preventDefault(), this.opened ? this.move(38 === keyCode ? "previous" : "next") : (this.open(), 
            this.move("next"));
            break;

          case 27:
            this.close();
            break;

          case 13:
            this.opened && (e.preventDefault(), this.model.get("highlightedOption").click());
        }
    },
    move: function(dir) {
        var newHighlight;
        this.model.get("highlightedOption") && (this.model.get("highlightedOption").removeClass("highlight"), 
        newHighlight = "next" === dir ? this.model.get("highlightedOption").next() : this.model.get("highlightedOption").prev()), 
        newHighlight && 0 !== newHighlight.size() || (newHighlight = "next" === dir ? this.ui.options.children().first() : this.ui.options.children().last()), 
        this.model.set("highlightedOption", newHighlight.addClass("highlight"));
    },
    open: function(filterText) {
        var sFView = this;
        if (this.opened = !0, this.$el.addClass("open"), sFView.model.dataAttributes.fieldNames && "" === this.ui.overlay.find("thead").text()) {
            var headerRow = "<tr>";
            _.each(sFView.model.dataAttributes.fieldNames.split("|"), function(fieldName) {
                fieldName.length > 0 && (headerRow += "<th>" + fieldName + "</th>");
            }), headerRow += "</tr>", sFView.ui.overlay.find("thead").append(headerRow);
        }
        var results = {};
        results = filterText ? new Backbone.Collection(this.model.dataCollection.filter(function(item) {
            return item.get("label") ? item.get("value").toLowerCase().indexOf(filterText.toLowerCase()) >= 0 || item.get("label").toLowerCase().indexOf(filterText.toLowerCase()) >= 0 : item.get("value").toLowerCase().indexOf(filterText.toLowerCase()) >= 0;
        })) : this.model.dataCollection, 0 === results.length ? sFView.ui.options.append("<tr><td>No results found</td></tr>") : results.each(function(result) {
            sFView.ui.options.append(ADF.templates.inputHelpers.selectFancyRecord($.extend({}, result.toJSON(), {
                fieldDelimiter: sFView.model.dataAttributes.fieldNames
            })));
        }), this.addOptionUrl && sFView.ui.options.append(ADF.templates.inputHelpers.selectFancyAddOption({
            addOptionUrl: this.addOptionUrl
        })), sFView.ui.dispInput.focus();
    },
    click: function(e) {
        e.preventDefault();
        var $selected = $(e.target).closest("tr");
        $selected.text() === $selected.attr("data-value") ? this.ui.dispInput.val($.trim($selected.text())) : this.ui.dispInput.val($.trim($selected.attr("data-value") + ": " + $selected.attr("data-label"))), 
        this.ui.valInput.val($selected.data("value")), this.model.set("currentValue", $selected.data("value")), 
        this.ui.valInput.trigger("change"), this.close();
    },
    clear: function(e) {
        e.preventDefault(), this.model.set("currentValue", ""), this.ui.dispInput.val(""), 
        this.ui.valInput.val(""), this.ui.valInput.trigger("change"), this.close();
    },
    addOptionOpen: function(e) {
        e.preventDefault();
        var $addOption = $(e.target).closest("tr");
        $addOption.addClass("open");
    },
    addOptionClose: function(e) {
        e.preventDefault();
        var $addOption = $(e.target).closest("tr");
        $addOption.removeClass("open");
    },
    addOptionSubmit: function(e) {
        e.preventDefault();
        var $addOption = $(e.target).closest("tr"), sFView = this, dataObj = $addOption.find(":input").serializeObject(), dataArray = ADF.utils.buildADFserializedArray(null, dataObj, null);
        $.ajax({
            url: sFView.addOptionUrl,
            method: "post",
            data: {
                adfSerializedData: JSON.stringify(dataArray)
            },
            beforeSend: function() {
                ADF.utils.spin($addOption);
            },
            complete: function(jqXhr, textStatus) {
                ADF.utils.message("log", "Submitted add new option via ajax"), ADF.utils.spin($addOption, {
                    stop: !0
                }), sFView.ui.options.find(".select-fancy-add-option").before(ADF.templates.inputHelpers.selectFancyRecord(dataObj)), 
                $addOption.removeClass("open").find(":input").val("");
            }
        });
    }
}), ADF.Inputs.TextareaView = ADF.Core.InputView.extend({
    childEvents: {
        "click .size-toggle": "sizeToggle"
    },
    events: function() {
        return _.extend({}, this.parentEvents, this.childEvents);
    },
    initialize: function(options) {
        ADF.utils.message("log", "Inputs.TextareaView Initialized", options), this.template = options.template, 
        this.tagName = options.tagName, this.model.set("inputField", this.model.get("inputTemplate")(this.model.toJSON())), 
        this._super();
    },
    onRender: function() {
        0 !== this.model.get("fieldPriority") && "table-cell" === this.$el.css("display") && ADF.utils.message("log", this.model.get("fieldName"), "should be displayed as table cell"), 
        this.$wrap = this.$el.find(".textarea-wrap"), this._super();
    },
    sizeToggle: function(e) {
        e.preventDefault();
        var options = {
            mode: "text/html",
            theme: "3024-day",
            htmlMode: !0,
            matchBrackets: !0
        };
        this.$wrap.toggleClass("expanded"), this.$wrap.hasClass("expanded") ? this.codemirror = CodeMirror.fromTextArea(this.$el.find("textarea")[0], options) : (this.$el.find("textarea").val(this.codemirror.getValue()).trigger("change"), 
        this.codemirror.toTextArea());
    }
}), ADF.Inputs.WidgetView = ADF.Core.InputView.extend({
    childEvents: {
        click: "showWidgetEditor"
    },
    events: function() {
        return _.extend({}, this.parentEvents, this.childEvents);
    },
    initialize: function(options) {
        ADF.utils.message("log", "Inputs.WidgetView Initialized", options), this.model.set("gridCell", !0), 
        this._super(options);
    },
    onRender: function() {
        0 !== this.model.get("fieldPriority") && "table-cell" === this.$el.css("display") && ADF.utils.message("log", this.model.get("fieldName"), "should be displayed as table cell"), 
        this._super();
    },
    showWidgetEditor: function(e) {
        e.preventDefault(), adf.page.getRegion("widgetEditor").show(this);
    }
}), ADF.Forms.ActionView = ADF.Core.ActionView.extend({
    initialize: function(options) {
        ADF.utils.message("log", "Forms.ActionView initialized", options), this._super();
    }
}), ADF.Forms.ActionsView = ADF.Core.ActionsView.extend({
    getChildView: function(model) {
        var viewClass;
        switch (model.get("type")) {
          case "submitLongPoll":
            viewClass = ADF.Actions.SubmitLongPoll;
            break;

          default:
            viewClass = ADF.Forms.ActionView;
        }
        return viewClass;
    },
    initialize: function(options) {
        ADF.utils.message("log", "Forms.ActionsView Initialized", options), this._super();
    }
}), ADF.Forms.FieldsView = Marionette.CollectionView.extend({
    template: ADF.templates.forms.region,
    getChildView: function(model) {
        var viewClass;
        switch (model.get("type")) {
          case "ajaxSuggest":
            viewClass = ADF.Inputs.AjaxSuggestView;
            break;

          case "selectFancy":
            viewClass = ADF.Inputs.SelectFancyView;
            break;

          case "checkboxes":
            viewClass = ADF.Inputs.CheckboxesView;
            break;

          default:
            viewClass = ADF.Inputs.FormDefaultView;
        }
        return viewClass;
    },
    childViewOptions: function() {
        return {
            regionName: this.options.regionName,
            region: this.region,
            template: ADF.templates.forms.row
        };
    },
    initialize: function(options) {
        ADF.utils.message("log", "Forms.FieldsView Initialized", options), $.extend(this.options, options), 
        this.listenTo(this.collection, "reset", this.render);
    }
}), ADF.Forms.FormView = Marionette.ItemView.extend({
    template: ADF.templates.forms.form,
    initialize: function(options) {
        ADF.utils.message("log", "Form.FormView Initialized", options), $.extend(this.options, options);
        var formView = this;
        0 === formView.$el.find(".adf-form-fields").size() && (formView.$el.prepend(formView.template()), 
        formView.formFields = new ADF.Forms.FieldsView({
            el: formView.$el.find(".adf-form-fields")[0],
            collection: new ADF.FieldsCollection(null, {
                regionName: formView.options.regionName
            }),
            regionName: formView.options.regionName,
            parentView: formView
        }), formView.formActions = new ADF.Forms.ActionsView({
            el: formView.$el.find(".adf-form-actions")[0],
            collection: adf.page.getRegion(formView.options.regionName).actionsCollection,
            regionName: formView.options.regionName,
            parentView: formView
        }));
    },
    render: function() {
        var formView = this;
        formView.formFields.render(), formView.formActions.render();
    },
    submitForm: function(e, contextView) {
        ADF.utils.message("log", "submitForm called");
        var formView = this, contextModelDataAttrs = contextView && contextView.model && contextView.model._createDataAttrObj ? contextView.model._createDataAttrObj() : !1;
        if (!this.$el.formValidate(ADF.config.get("validationSettings"))) return !1;
        var action = this.$el.attr("action"), dataArray = ADF.utils.buildADFserializedArray(formView.formFields.collection, this.$el.find(":input").not(".form-input, .form-input *").serializeObject(), !1);
        "#" === action.substring(0, 1) ? $(action).size() > 0 ? (ADF.utils.message("log", "Found something to load into"), 
        adf.page.findRegion({
            attribute: "el",
            value: action
        }).ajax({
            data: {
                adfSerializedData: JSON.stringify(dataArray)
            },
            method: "POST"
        })) : ADF.utils.message.call(this, "error", "Trying to load ajax but destination element could not be found on the page") : contextModelDataAttrs && contextModelDataAttrs.submitType && "ajax" === contextModelDataAttrs.submitType.toLowerCase() ? $.ajax({
            url: this.el.action,
            data: {
                adfSerializedData: JSON.stringify(dataArray)
            },
            type: "POST",
            dataType: "html",
            complete: function(jqXhr, textStatus) {
                contextView.$el.trigger("formSubmitted", [ jqXhr ]), ADF.utils.message("log", "Submitted via ajax", contextView);
            }
        }) : (this.$el.append(ADF.templates.inputTypes.adfSerializedData({
            data: dataArray
        })), this.$el.submit());
    },
    dependentFieldLkup: function(e, contextView) {
        var newModelIdx, formView = this, contextModelDataAttrs = contextView.model._createDataAttrObj(), region = adf.page[formView.options.regionName];
        e.preventDefault(), ADF.utils.message("log", "dependentFieldLkup", e), contextModelDataAttrs.childFields && _.each(contextModelDataAttrs.childFields.split(","), function(fieldName) {
            var modelToRemove = formView.formFields.collection.filter(function(model) {
                return model.get("name") === fieldName.toLowerCase();
            });
            formView.formFields.collection.remove(modelToRemove);
        });
        var dataArray = ADF.utils.buildADFserializedArray(formView.formFields.collection, formView.$el.find(":input:hidden").not(".adf-form-fields :input").serializeObject(), !1);
        contextModelDataAttrs.dpndntFieldTarget ? "next" === contextModelDataAttrs.dpndntFieldTarget.toLowerCase() ? newModelIdx = this.formFields.collection.indexOf(contextView.model) + 1 : ADF.utils.message("error", "The option to load dependent fields into a particular location is not currently supported", contextModelDataAttrs.dpndntFieldLkupTarget.toLowerCase()) : newModelIdx = !1, 
        region.ajax({
            data: {
                adfSerializedData: JSON.stringify(dataArray)
            },
            url: contextModelDataAttrs.ajaxUrl,
            emptyCollections: !1,
            newModelIdx: newModelIdx
        });
    }
}), ADF.Grids.ActionsView = Marionette.CollectionView.extend({
    getChildView: function(model) {
        var viewClass;
        switch (model.get("type")) {
          case "custom":
            viewClass = ADF.Actions.CustomView;
            break;

          case "linkToAdfSubmission":
            viewClass = ADF.Actions.LinkToAdfSubmissionView;
            break;

          case "recordAdd":
            viewClass = ADF.Actions.RecordAddView;
            break;

          case "saveUnsaved":
            viewClass = ADF.Actions.SaveUnsavedView;
            break;

          default:
            viewClass = ADF.Actions.GridDefaultView;
        }
        return viewClass;
    },
    childViewOptions: function() {
        return {
            region: this.region,
            gridView: this.gridView
        };
    },
    initialize: function(options) {
        ADF.utils.message("log", "Grids.ActionsView Initialized", options), this.region = options.region, 
        this.gridView = options.gridView, this.model.set("buttonLabel", "Actions"), this.model.set("wrapClass", "grid-actions");
    }
}), ADF.Grids.FilterItemView = Marionette.ItemView.extend({
    template: ADF.templates.dropdowns.selectItem,
    tagName: "li",
    events: {
        "change :input": "filterSelect"
    },
    initialize: function(options) {
        ADF.utils.message("log", "GridFilterItemView Initialized", options), this.regionName = options.regionName, 
        this.model.set("label", this.model.get("fieldValue") + " (" + this.model.get("records").length + ")"), 
        this.model.set("id", ADF.utils.randomId()), this.model.set("name", this.regionName + "--" + this.model.get("fieldName") + "--" + this.model.get("fieldValue")), 
        this.gridView = adf.page.getRegion(this.regionName).gridView, this.gridFilterQueue = this.gridView.bodyView.filterQueue;
    },
    render: function() {},
    renderAsChild: function() {
        return this.template(this.model.toJSON());
    },
    filterSelect: function(e) {
        e.preventDefault(), $(e.target).is(":checked") ? this.gridFilterQueue.add(this.model) : this.gridFilterQueue.remove(this.gridFilterQueue.findWhere({
            fieldName: this.model.get("fieldName"),
            fieldValue: this.model.get("fieldValue")
        }));
    }
}), ADF.Grids.FilterView = ADF.Core.DropdownView.extend({
    childView: ADF.Grids.FilterItemView,
    model: new ADF.DropdownMenuModel(),
    events: {
        "dropdownToggle:open": "showFilters",
        "click *[data-filter-action-type=cancel]": "cancelFilters",
        "click *[data-filter-action-type=apply]": "applyFilters",
        "click *[data-filter-action-type=clear]": "clearFilters",
        "keyup .dropdown-text-filter": "textFilterRefresh"
    },
    initialize: function(options) {
        ADF.utils.message("log", "GridFilterView Initialized", options), this.regionName = options.regionName, 
        this.region = adf.page.getRegion(this.regionName), this.gridView = this.region.gridView, 
        this.headerView = options.headerView, this.gridFilterQueue = this.gridView.bodyView.filterQueue, 
        this.fieldName = this.headerView.model.get("name"), this.fieldType = this.headerView.model.get("type"), 
        this.filtersGenerated = !1;
        var footerOptions = [];
        footerOptions.push({
            href: "#",
            itemClass: "adf-grid-filter-action",
            label: "Clear Filters",
            dataAttributes: [ {
                name: "filter-action-type",
                value: "clear"
            } ]
        }), footerOptions.push({
            href: "#",
            itemClass: "adf-grid-filter-action",
            label: "Apply",
            dataAttributes: [ {
                name: "filter-action-type",
                value: "apply"
            } ]
        }), footerOptions.push({
            href: "#",
            itemClass: "adf-grid-filter-action",
            label: "Cancel",
            dataAttributes: [ {
                name: "filter-action-type",
                value: "cancel"
            } ]
        }), this.model.set("footerOptions", footerOptions), this.model.set("textFilterInput", !0), 
        this.model.set("wrapClass", "filter-control adf-header-control"), this.model.set("caretSvg", "filter"), 
        this.events = _.extend({}, ADF.Core.DropdownView.prototype.events, this.events);
    },
    ui: {
        menu: ".dropdown-menu",
        primaryOptions: ".dropdown-menu .primary-options"
    },
    render: function() {
        this.headerView.$el.addClass("has-filter").append(this.template(this.model.toJSON())), 
        this.setElement(this.headerView.$el.find(".dropdown-wrapper")[0]), this.bindUIElements();
    },
    generateFilters: function() {
        var distinctValues = _.groupBy(this.region.gridView.bodyView.collection.models, function(recordModel) {
            return recordModel.get(this.fieldName);
        }, this);
        _.each(distinctValues, function(fieldValue, index) {
            this.collection.add({
                fieldName: this.fieldName,
                fieldValue: index,
                records: fieldValue
            });
        }, this), this.filtersGenerated = !0;
    },
    showFilters: function(e) {
        var crntFilterModel, gridFilter = this, child = {}, existingFilter = {};
        ADF.utils.spin(this.ui.primaryOptions), this.filtersGenerated || this.generateFilters(), 
        this._positionListWindow(), this.children.length !== this.collection.length ? (0 !== this.children.length && console.error("this should never actually happen"), 
        this.gridView.bodyView.filters && (existingFilter = this.gridView.bodyView.filters.find(function(filterModel) {
            return filterModel.get("fieldName") === this.fieldName;
        }, this)), existingFilter && _.each(existingFilter.get("filterValues"), function(filterValue) {
            crntFilterModel = gridFilter.collection.findWhere({
                fieldValue: filterValue
            }), crntFilterModel && gridFilter.gridFilterQueue.add(gridFilter.collection.findWhere({
                fieldValue: filterValue
            }).toJSON());
        }, this), this.collection.each(function(model) {
            existingFilter && model.set("currentValue", existingFilter.get("filterValues")), 
            child = this.addChild(model, this.childView), this.ui.primaryOptions.append(child.renderAsChild()), 
            child.setElement(this.ui.primaryOptions.children().last()[0]);
        }, this)) : (this.ui.primaryOptions.empty(), this.children.each(function(filterItemView) {
            this.ui.primaryOptions.append(filterItemView.renderAsChild()), filterItemView.setElement(this.ui.primaryOptions.children().last()[0]);
        }, this)), ADF.utils.spin(this.ui.primaryOptions, {
            stop: !0
        }), this.$el.find(".dropdown-text-filter").focus(), this.textFilterRefresh();
    },
    cancelFilters: function(e) {
        this.dropdownToggle(e), ADF.utils.message("log", "cancelFilters called"), this.gridFilterQueue.reset();
    },
    applyFilters: function(e) {
        e.preventDefault(), this.dropdownToggle(e), this.gridView.bodyView.applyFilters(), 
        this.headerView.$el.addClass("is-filtered");
    },
    clearFilters: function(e) {
        e.preventDefault(), this.gridView.bodyView.clearFilters();
    },
    textFilterRefresh: function(e) {
        var matchIdx, $input = this.$el.find(".dropdown-text-filter"), crntString = $input.val().toLowerCase();
        crntString.length > 0 ? this.children.each(function(child) {
            matchIdx = child.model.get("fieldValue").toLowerCase().indexOf(crntString), matchIdx >= 0 ? child.$el.removeClass("hide") : child.$el.addClass("hide");
        }) : this.children.each(function(child) {
            child.$el.removeClass("hide");
        });
    },
    _positionListWindow: function() {
        var listWindowWidth = ADF.utils.emToPx(this.$el.parent()[0], this.$el.outerWidth());
        listWindowWidth > this.$el.parent().offset().left && this.ui.menu.css({
            left: 0,
            right: "auto"
        });
    }
}), ADF.Grids.HeaderView = Backbone.Marionette.CompositeView.extend({
    template: ADF.templates.grids.headerCell,
    tagName: "th",
    childView: ADF.Grids.FilterView,
    events: {
        "click     .sort-control": "sortGrid",
        "mousedown .adf-grid-resize-handle": "resizeStart",
        "mouseup   .adf-grid-resize-handle": "resizeStop",
        mousemove: "resiseMove"
    },
    initialize: function(options) {
        ADF.utils.message("log", "HeaderView Initialized", options), this.gridView = options.gridView;
        var headerView = this;
        headerView.regionName = options.regionName, this.model.set("colIndex", this.model.collection.indexOf(this.model)), 
        this.model.set("regionName", options.regionName), "actions" !== this.model.get("type") ? this.model.set("sortable", !0) : this.model.set("sortable", !1), 
        _.indexOf(ADF.config.get("grids").filters.fieldTypeInclude, this.model.get("type")) >= 0 && (headerView.gridFilter = new ADF.Grids.FilterView({
            headerView: headerView,
            regionName: headerView.regionName,
            collection: new Backbone.Collection(null, {
                comparator: "fieldValue"
            })
        }));
    },
    onRender: function() {
        this.setElement(this.$el.find("th").unwrap()), this.gridView.bodyView.filters.where({
            fieldName: this.model.get("name")
        }).length > 0 && this.$el.addClass("is-filtered"), this.gridFilter && this.gridFilter.render();
    },
    sortGrid: function(e) {
        ADF.utils.spin(this.gridView.$el);
        var sortDir = this.gridView.bodyView.collection.sortRecords(this.model.get("name"));
        this.gridView.headersView.clearSortClass(), this.$el.addClass("sorted-" + sortDir), 
        ADF.utils.spin(this.gridView.$el, {
            stop: !0
        });
    },
    resizeInit: function() {
        this.$el.width(this.$el.width());
    },
    resizeStart: function(e) {
        this.pressed = !0, this.startX = e.pageX, this.startWidth = this.$el.width(), this.$el.addClass("resizing");
    },
    resiseMove: function(e) {
        this.pressed && this.$el.width(this.startWidth + (e.pageX - this.startX));
    },
    resizeStop: function(e) {
        this.pressed && (this.$el.removeClass("resizing"), this.pressed = !1);
    }
}), ADF.Grids.HeadersView = Backbone.Marionette.CollectionView.extend({
    template: ADF.templates.grids.row,
    tagName: "tr",
    childView: ADF.Grids.HeaderView,
    childViewOptions: function() {
        return {
            regionName: this.regionName,
            gridView: this.gridView
        };
    },
    initialize: function(options) {
        ADF.utils.message("log", "HeadersView Initialized", options), this.gridView = options.gridView, 
        this.regionName = options.regionName, this.model = new Backbone.Model({
            initialRenderCompleted: !1
        });
    },
    onRender: function() {
        if (!this.model.get("initialRenderCompleted")) {
            var $cells = this.$el.children("th").detach();
            this.setElement(this.$el.find("tr").append($cells)), this._updateColSelect(), this.model.set("initialRenderCompleted", !0);
        }
    },
    clearSortClass: function(colName) {
        this.$el.find(".sort-indicator").removeClass(".sort-asc .sort-desc");
    },
    _updateColSelect: function() {
        var checkedInd, headersView = this;
        this.children.each(function(child) {
            checkedInd = "table-cell" === child.$el.css("display") ? "Y" : "N", headersView.gridView.columnSelect.collection.findWhere({
                name: child.model.get("name")
            }).set({
                checkedInd: checkedInd,
                colSelectDispOverride: checkedInd
            });
        });
    }
}), ADF.Grids.RowView = ADF.Core.RecordView.extend({
    template: ADF.templates.grids.row,
    tagName: "tr",
    getChildView: function(model) {
        var viewClass;
        switch (model.get("type")) {
          case "actions":
            viewClass = ADF.Inputs.GridActionsView;
            break;

          case "ajaxSuggest":
            viewClass = ADF.Inputs.AjaxSuggestView;
            break;

          case "selectFancy":
            viewClass = ADF.Inputs.SelectFancyView;
            break;

          case "textarea":
            viewClass = ADF.Inputs.TextareaView;
            break;

          case "widget":
            viewClass = ADF.Inputs.WidgetView;
            break;

          case "gridOverlay":
            viewClass = ADF.Inputs.GridOverlayView;
            break;

          default:
            viewClass = ADF.Inputs.GridDefaultView;
        }
        return viewClass;
    },
    childViewOptions: function() {
        return {
            regionName: this.regionName,
            region: this.region,
            rowView: this,
            template: ADF.templates.grids.cell,
            tagName: "td"
        };
    },
    initialize: function(options) {
        ADF.utils.message("log", "GridRowView Initialized", options), this.regionName = options.regionName, 
        this.region = adf.page.getRegion(this.regionName), this.gridView = options.gridView, 
        this.events = _.extend({}, ADF.Core.RecordView.prototype.events, this.events), this._super(options);
    },
    onRender: function() {
        var $cells = this.$el.children("td");
        this.setElement(this.$el.find("tr").unwrap().append($cells)), this.gridView.updateRecordCounter();
    }
}), ADF.Grids.BodyView = Marionette.CompositeView.extend({
    className: "adf-grid",
    tagName: "tbody",
    template: function() {
        return "";
    },
    childView: ADF.Grids.RowView,
    childViewOptions: function() {
        return {
            regionName: this.regionName,
            region: this.region,
            gridView: this.gridView
        };
    },
    initialize: function(options) {
        ADF.utils.message("log", "Grids.BodyView Initialized", options), this.regionName = options.regionName, 
        this.region = adf.page.getRegion(this.regionName), this.gridView = options.gridView, 
        this.filters = new Backbone.Collection(), this.filterQueue = new Backbone.Collection(), 
        this.stopListening(this.collection, "add"), this.stopListening(this.collection, "remove"), 
        this.stopListening(this.collection, "reset"), this.listenTo(this.collection, "reset", this.refreshFilteredRecords), 
        this.listenTo(this.region.fieldsCollection, "change:colSelectDispOverride", this._updateColSelectDispOverride), 
        this._super();
    },
    filter: function(childModel, index, collection) {
        if (this.filters.length > 0) {
            var filterMatch = !0;
            return this.filters.each(function(filterModel) {
                var currentValue = childModel.get(filterModel.get("fieldName"));
                return currentValue && _.indexOf(filterModel.get("filterValues"), currentValue.toString()) < 0 ? void (filterMatch = !1) : void 0;
            }, this), filterMatch;
        }
        return !0;
    },
    onRender: function() {
        ADF.utils.inputHandlerRefresh(), this.$el.find(":input:visible").last().on("blur", function() {
            ADF.utils.message("info", "last input blurred");
        });
    },
    refreshFilteredRecords: function() {
        ADF.utils.spin(this.$el), this.filteredRecords = this.collection, this.filters.length && this.filters.each(function(filterModel) {
            this.filteredRecords = new Backbone.Collection(this.filteredRecords.filter(function(recordModel) {
                return _.indexOf(filterModel.get("filterValues"), recordModel.get(filterModel.get("fieldName"))) >= 0;
            }));
        }, this), this.region.gridView.render();
    },
    applyFilters: function() {
        var filterValues = [], filterFieldName = this.filterQueue.models[0].get("fieldName");
        _.each(this.filterQueue.models, function(model) {
            filterValues.push(model.get("fieldValue"));
        });
        var existingFilter = this.filters.find(function(model) {
            return model.get("fieldName") === filterFieldName;
        });
        if (existingFilter) existingFilter.set("filterValues", filterValues); else {
            var filterModel = new Backbone.Model();
            filterModel.set("fieldName", filterFieldName), filterModel.set("filterValues", filterValues), 
            this.filters.add(filterModel);
        }
        this.render(), this.filterQueue.reset();
    },
    clearFilters: function() {
        this.filters.reset(), this.refreshFilteredRecords(), this.filterQueue.reset();
    },
    _updateColSelectDispOverride: function(model) {}
}), ADF.Grids.GridView = Marionette.View.extend({
    className: "adf-grid",
    tagName: "table",
    template: ADF.templates.grids.table,
    initialize: function(options) {
        ADF.utils.message("log", "GridView Initialized", options), this.regionName = options.regionName;
        var gridView = this;
        this.region = adf.page.getRegion(gridView.regionName), this.uploadFormEl = gridView.$el.siblings(".adf-grid-upload-form"), 
        this.dragTextEl = this.uploadFormEl.find(".adf-grid-upload-text"), this.setElement(this.$el.html(this.template())), 
        gridView.headersView = new ADF.Grids.HeadersView({
            el: gridView.$el.find("thead")[0],
            collection: this.region.fieldsCollection,
            regionName: gridView.regionName,
            gridView: gridView
        }), gridView.bodyView = new ADF.Grids.BodyView({
            el: gridView.$el.find("tbody")[0],
            collection: new ADF.RecordsCollection(null, {
                regionName: gridView.regionName,
                region: gridView.region,
                sortAttribute: gridView.region.$el.attr("data-record-sort-attribute")
            }),
            regionName: gridView.regionName,
            gridView: gridView
        }), gridView.columnSelect = new ADF.Core.ColumnSelectView({
            el: gridView.$el.find(".adf-grid-column-select")[0],
            model: new ADF.DropdownMenuModel({
                footerOptions: []
            }),
            collection: this.region.fieldsCollection,
            region: gridView.region
        }), gridView.gridActions = new ADF.Grids.ActionsView({
            el: gridView.$el.find(".adf-grid-actions")[0],
            model: new ADF.DropdownMenuModel({
                footerOptions: []
            }),
            collection: this.region.actionsCollection,
            gridView: gridView,
            region: gridView.region
        }), gridView.uploadFormEl.filedrop({
            fallback_id: "adf-grid-upload-input",
            url: "../service/excel-conversion/upload-file.action",
            paramname: "adf_file",
            withCredentials: !1,
            error: function(err, file) {
                switch (err) {
                  case "BrowserNotSupported":
                    alert("browser does not support HTML5 drag and drop");
                    break;

                  case "TooManyFiles":
                    alert("TooManyFiles");
                    break;

                  case "FileTooLarge":
                    alert("FileTooLarge");
                    break;

                  case "FileTypeNotAllowed":
                    alert("FileTypeNotAllowed");
                    break;

                  case "FileExtensionNotAllowed":
                    alert("FileExtensionNotAllowed");
                }
            },
            allowedfiletypes: [],
            allowedfileextensions: [ ".xls", ".xlsx", ".csv" ],
            maxfiles: 25,
            maxfilesize: 20,
            docOver: function() {
                gridView.region.$el.addClass("drag-target"), gridView.dragTextEl.text(gridView.dragTextEl.data("drag-target-text"));
            },
            docLeave: function() {
                gridView.region.$el.removeClass("drag-target"), gridView.dragTextEl.text("");
            },
            dragOver: function() {
                gridView.$el.addClass("drag-on"), gridView.dragTextEl.text(gridView.dragTextEl.data("drag-on-text"));
            },
            dragLeave: function() {
                gridView.region.$el.removeClass("drag-on"), gridView.dragTextEl.text("");
            },
            uploadStarted: function(i, file, len) {
                gridView.region.$el.removeClass("drag-target drag-on"), gridView.dragTextEl.text("");
            },
            uploadFinished: function(i, file, response, time) {
                var responseFieldGroups = [];
                response.success ? (responseFieldGroups = _.partition(response.data.headers, function(header) {
                    return gridView.headersView.collection.findWhere({
                        name: header.toLowerCase()
                    });
                }), _.each(responseFieldGroups[1], function(mismatchedField) {
                    ADF.utils.message("warn", "Upload contained " + mismatchedField + " as a header which does not match a field in this grid");
                }), gridView.bodyView.collection.add(response.data.records, {
                    at: 0
                })) : response.errors ? _.each(response.errors, function(element, index, array) {
                    ADF.utils.message("error", element);
                }) : ADF.utils.message("error", "Looks like the ajax response wasn't quite what was expected.  Probably need to get a TA involved to help figure it out.");
            }
        }), this._super();
    },
    ui: {
        recordCounter: ".record-counter"
    },
    render: function() {
        var gridView = this;
        gridView.bindUIElements(), this.updateRecordCounter(!0), gridView.headersView.render(), 
        gridView.columnSelect.render(), gridView.gridActions.render(), gridView.bodyView.render(), 
        gridView.$el.trigger("adfGridLoaded");
    },
    updateRecordCounter: function(reset) {
        reset ? this.recordsRendered = 0 : this.recordsRendered++, this.ui.recordCounter.text("Rendered " + this.recordsRendered + " of " + this.bodyView.collection.length);
    }
}), ADF.Messages.MessageView = Backbone.Marionette.ItemView.extend({
    template: ADF.templates.messages.message,
    events: {
        "click .message-remove": "messageRemove",
        "click .message-details": "showMessageInConsole"
    },
    initialize: function(options) {
        ADF.utils.message("log", "MessageView Initialized", options), this.messageFormat();
    },
    onRender: function() {
        this.$el.find(".message").removeClass("init-size");
    },
    messageRemove: function(e) {
        e.preventDefault(), adf.page.getRegion("messagesWindow").messagesWindowView.collection.remove(this.model);
    },
    messageFormat: function() {
        this.model.get("originalArguments") && !this.model.get("content") && this.model.set("content", ADF.utils.arrayToHTML(this.model.get("originalArguments"), "div", "div"));
    },
    showMessageInConsole: function(e) {
        e.preventDefault(), console[this.model.get("level")](this.model.get("originalArguments"));
    }
}), ADF.Messages.WindowView = Marionette.CollectionView.extend({
    childView: ADF.Messages.MessageView,
    initialize: function(options) {
        ADF.utils.message("log", "MessagesWindowView Initialized", options);
    }
}), ADF.Modules.ActionsView = ADF.Core.ActionsView.extend({
    getChildView: function(model) {
        var viewClass;
        switch (model.get("type")) {
          case "saveUnsaved":
            viewClass = ADF.Actions.SaveUnsavedView;
            break;

          default:
            viewClass = ADF.Actions.ModuleDefaultView;
        }
        return viewClass;
    },
    childViewOptions: function() {
        return {
            region: this.region,
            modulesView: this.modulesView
        };
    },
    initialize: function(options) {
        ADF.utils.message("log", "Modules.ActionsView Initialized", options), this.region = options.region, 
        this.modulesView = options.modulesView, this._super();
    }
}), ADF.Modules.ModuleView = ADF.Core.RecordView.extend({
    template: ADF.templates.modules.module,
    getChildView: function(model) {
        var viewClass;
        switch (model.get("type")) {
          case "actions":
            viewClass = ADF.Inputs.ModuleActionsView;
            break;

          case "selectFancy":
            viewClass = ADF.Inputs.SelectFancyView;
            break;

          case "textarea":
            viewClass = ADF.Inputs.TextareaView;
            break;

          case "widget":
            viewClass = ADF.Inputs.WidgetView;
            break;

          case "gridOverlay":
            viewClass = ADF.Inputs.GridOverlayView;
            break;

          default:
            viewClass = ADF.Inputs.ModuleDefaultView;
        }
        return viewClass;
    },
    childViewOptions: function() {
        return {
            regionName: this.regionName,
            region: this.region,
            moduleView: this,
            template: ADF.templates.forms.row,
            tagName: "td"
        };
    },
    childViewContainer: ".module-details",
    events: {
        "adf-module-drop": "drop",
        "adf-module-remove": "remove",
        "click .module-details-toggle": "toggleDetails"
    },
    initialize: function(options) {
        ADF.utils.message("log", "ModuleView Initialized", options), this.events = _.extend({}, ADF.Core.RecordView.prototype.events, this.events), 
        this.listenTo(this.model, "change:read_order", function() {
            console.log("probably should change some status or some shit");
        }), this._super(options);
    },
    onRender: function() {
        var moduleModel = this.model, partAttrs = _.partition(moduleModel.changedAttributes(), function(attr) {
            return _.indexOf(moduleModel.initAttrs, attr) >= 0;
        });
        partAttrs[0].length > 0 && this.$el.addClass("updated");
    },
    toggleDetails: function(e) {
        e.preventDefault(), this.$el.find(".icon-expand, .icon-contract, .module-details").toggleClass("hide");
    },
    drop: function(e, i) {
        ADF.utils.message("log", "moduled dropped", e, i), this.$el.trigger("adf-module-received", [ this.model, i ]);
    },
    remove: function(e, i) {
        e && "adf-module-remove" === e.type && (ADF.utils.message("log", "module remove", e, i), 
        this.$el.trigger("adf-module-sent", [ this.model, i ]));
    }
}), ADF.Modules.ModuleListView = Marionette.CompositeView.extend({
    childView: ADF.Modules.ModuleView,
    childViewOptions: function() {
        return {
            regionName: this.regionName,
            region: this.region
        };
    },
    template: function() {
        return "";
    },
    events: {
        "adf-module-received": "moduleReceived",
        "adf-module-sent": "moduleSent",
        "adf-module-removed": "moduleRemoved"
    },
    initialize: function(options) {
        ADF.utils.message("log", "ModuleListView Initialized", options), this.regionName = options.regionName, 
        this.region = adf.page.getRegion(this.regionName), this.fieldsCollection = this.region.fieldsCollection, 
        this.dndSource = options.dndSource, this.dndTarget = options.dndTarget, this.dndSource && adf.page.dndSources.push(this), 
        this.dndTarget && adf.page.dndTargets.push(this), this.listenTo(this.collection, "move", this.resetReadOrder), 
        this.listenTo(this.collection, "add", this.resetReadOrder), this.listenTo(this.collection, "remove", this.resetReadOrder);
    },
    onRender: function() {
        var modulesView = this;
        modulesView.dndSource && modulesView.$el.sortable({
            handle: ".dnd-handle",
            connectWith: ".dnd-wrapper[data-adf-dnd-target=true]",
            placeholder: "module-placeholder",
            stop: function(event, ui) {
                console.log("drop", modulesView.regionName, event, ui), ui.item.trigger("adf-module-drop", ui.item.index());
            },
            remove: function(event, ui) {
                console.log("remove", modulesView.regionName, event, ui), $(event.target).trigger("adf-module-removed", ui.item.index());
            },
            activate: function(event, ui) {
                modulesView.$el.addClass("dnd-active");
            },
            deactivate: function(event, ui) {
                modulesView.$el.removeClass("dnd-active");
            }
        });
    },
    resetReadOrder: function() {
        this.collection.each(function(model, index) {
            model.set("read_order", 10 * index);
        });
    },
    moduleRemoved: function(e, index) {
        this.render();
    },
    moduleReceived: function(e, model, position) {
        e.stopPropagation(), ADF.utils.message("debug", "moduleReceived", e, model, position, this.regionName);
        var modulesView = this, crntIdx = modulesView.collection.indexOf(model);
        crntIdx >= 0 ? (modulesView.collection.models.splice(position, 0, modulesView.collection.models.splice(crntIdx, 1)[0]), 
        modulesView.collection.trigger("move", modulesView.collection)) : modulesView.collection.add(model, {
            at: position
        }), this.render();
    },
    moduleSent: function(e, model, position) {
        ADF.utils.message("debug", "moduleSent", e, model, position, this.regionName), this.collection.remove(model);
    }
}), ADF.Modules.ModulesView = Marionette.View.extend({
    initialize: function(options) {
        var modulesView = this;
        ADF.utils.message("log", "ModulesView Initialized", options), modulesView.regionName = options.regionName, 
        modulesView.region = adf.page.getRegion(modulesView.regionName), modulesView.moduleListView = new ADF.Modules.ModuleListView({
            el: modulesView.$el.find(".module-list-wrapper")[0],
            collection: new ADF.RecordsCollection(null, {
                regionName: modulesView.regionName,
                region: modulesView.region,
                sortAttribute: "read_order"
            }),
            regionName: modulesView.regionName,
            modulesView: modulesView,
            dndSource: options.dndSource,
            dndTarget: options.dndTarget
        }), modulesView.moduleActionsView = new ADF.Modules.ActionsView({
            el: modulesView.$el.find(".module-actions-wrapper")[0],
            collection: modulesView.region.actionsCollection,
            modulesView: modulesView,
            region: modulesView.region
        }), modulesView.columnSelect = new ADF.Core.ColumnSelectView({
            el: modulesView.$el.find(".adf-column-select")[0],
            model: new ADF.DropdownMenuModel({
                footerOptions: []
            }),
            collection: this.region.fieldsCollection,
            region: modulesView.region
        });
    },
    render: function() {
        var modulesView = this;
        modulesView.moduleListView.render(), modulesView.moduleActionsView.render(), modulesView.columnSelect.render();
    }
}), $(function() {
    adf.start({});
});
//# sourceMappingURL=adf.min.js.map