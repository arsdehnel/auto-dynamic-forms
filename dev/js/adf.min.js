/*global
ADF,
_
*/
ADF.config = {
    messages : {
        levels : {
            'log' : {
                'displayMethod' : 'none',
                'label' : 'Log Entry'
            },
            'info' : {
                'displayMethod' : 'console',
                'label' : 'Info'
            },
            'debug' : {
                'displayMethod' : 'console',
                'label' : 'Debug Info'
            },
            'warn' : {
                'displayMethod' : 'console',
                'label' : 'Warning'
            },
            'error' : {
                'displayMethod' : 'messagesWindow',
                'label' : 'Error'
            }
        }
    },
    set: function( itemName, value ){
        if( Object.prototype.toString.call( value ) === '[object Object]' ) {
            localStorage.setItem(itemName, JSON.stringify(value));
        }else{
            localStorage.setItem(itemName, value);
        }
    },
    get: function( itemName ){

        var configItem;

        if(!localStorage.getItem(itemName)) {
            configItem = ADF.config[itemName];
        }else{
            configItem = localStorage.getItem(itemName);
            if( _.isObject( configItem ) === '[object Object]') {
                configItem = JSON.parse( configItem );
            }
        }

        return configItem;

    }
};
/*global
ADF,
_,
$,
adf
*/
ADF.utils = {
    randomId: function() {
        return Math.floor( Math.random() * 3789.4);
    },
    capitalize: function( string ) {
        return string.charAt(0).toUpperCase() + string.slice(1);
    },
    camelize: function( string ) {
        return string.toLowerCase().replace(/[_.-](\w|$)/g, function (_,x) {
            return x.toUpperCase();
        });
    },
    isObject: function( obj ) {
        return Object.prototype.toString.call( obj ) === '[object Object]';
    },
    arrayToHTML: function( array, parentElement, childElement ) {
        var retElement = document.createElement(parentElement);
        _.each( array, function(item) {
            var child = document.createElement(childElement);
            if( ADF.utils.isObject( item ) ){
                // TODO: handle an item of the array being an object
                child.appendChild(document.createTextNode(item));
            }else{
                child.appendChild(document.createTextNode(item));
            }
            retElement.appendChild(child);
        });
        return retElement.innerHTML;
    },
    objPropToLower: function( object ) {

        _.each(object,function(element, index, array){
            // console.log(element);
            if( index.toLowerCase() !== index ){
                object[index.toLowerCase()] = element;
                delete object[index];
            }
        });

        return object;

    },
    select2: {
        render: function() {

            // TODO: dynamically determine if user can clear selection
            // TODO: dynamically determine if user can add new option
            // TODO: handle the readonly assignment in the constructor rather than calling the select2() function again
            // TODO: allow for ajax lookup to be dictated through some data- attributes

            var settings = {
                dropdownAutoWidth : true,
                allowClear : true,
                formatResult : ADF.utils.select2.template,
                matcher: ADF.utils.select2.matcher
            };

            $.extend( settings, arguments[0] );

            var select2Obj = settings.select2Obj;

            delete settings.select2Obj;

            // TODO: remove this IF condition (maybe) if we figure out why sometimes this isn't available
            if( select2Obj.select2 ){
                select2Obj.select2(settings);
                if( select2Obj.attr('readonly') === 'readonly' ){
                    select2Obj.select2('readonly',true);
                }
            }

        },
        matcher: function(term, text, option) {
            return text.toUpperCase().indexOf(term.toUpperCase())>=0 || option.val().toUpperCase().indexOf(term.toUpperCase())>=0;
        },
        template: function( object, container, query ){

            //make this into a jQ object so we can retrieve the data- attribute data
            var optObj = $(object.element);
            var entryObj = {
                value: object.id,
                tooltip: optObj.data('tooltip')
            };

            //have to do some manual stuff to "convert" this object that we get
            //into a normal js object that can be used in hour handlebars template
            //rather than just a plain old js-built template
            if( object.id === object.text || object.text.length === 0 ){
                entryObj.label = object.id;
            }else{
                entryObj.label = '<span class="select2-option-value">'+object.id+'</span><span class="select2-option-label">'+object.text+'</span>';
            }
            return ADF.templates.inputHelperSelect2Record( entryObj );

        },
        refresh: function() {

            $('body .select2:input').not('.select2-offscreen').each(function(){
                ADF.utils.select2.render({
                    select2Obj : $(this)
                });
            });

        }
    },
    spin: function( targetObj, opts ) {

        var settings = {};
        var defaults = {
            emptyTarget : false
        };

        $.extend(settings, defaults, opts);

        if( settings.stop ){

            targetObj.removeClass('loading').find('.spinner').remove();

        }else{

            targetObj.removeClass('hide');

            if( settings.emptyTarget ){
                targetObj.empty();
            }

            targetObj.addClass('loading').spin();

        }

    },
    message: function() {

        // TODO: log all messages into "level" specific arrays
        // TODO: somehow know when there is a line number and file reference so the message in the messagesWindow could be a link

        // var args = Array.slice(arguments);
        var args = Array.prototype.slice.call(arguments);

        // remove first argument
        var level = args.shift().toLowerCase();

        if( ADF.config.get('messages').levels[level] ){

            var levelObj = ADF.config.get('messages').levels[level];

            // TODO: extend this to present errors as modals
            switch( levelObj.displayMethod ){
                case 'messagesWindow':
                    // TODO: handle errors somehow before the adf and adf.page are defined
                    // since we might have an error before the page loads up we'll do this for a bit to see if we can get into the messages window
                    if( adf.page && adf.page.getRegion('messagesWindow') ){
                        adf.page.getRegion('messagesWindow').messagesWindowView.collection.add([
                            {
                                level: level,
                                label: levelObj.label,
                                originalArguments: args
                            }
                        ]);
                        adf.page.getRegion('messagesWindow').show();
                    }else{
                        args.unshift('[ADF]');
                        console[level](args);
                    }
                    break;
                case 'console':
                    // since we are just logging it we add a prefix item to the logs just to try and be clear where it came from
                    args.unshift('[ADF]');
                    console[level](args);
                    break;

            }

        }else{
            alert('unexpected level'+ADF.utils.printObject(args));
        }

    },

    printObject: function(obj){
        return JSON.stringify(obj,null,'\t').replace(/\n/g,'<br>').replace(/\t/g,'&nbsp;&nbsp;&nbsp;');
    },

    dataSerialize: function( fieldCollection, dataModel ){

        var dataArray = [];
        var crntVal;

        fieldCollection.each(function( model ) {
            // console.log(model,dataModel);
            if( _.isUndefined( dataModel ) ){
                crntVal = model.get('currentValue');
            }else{
                crntVal = dataModel.get(model.get('name'));
            }

            dataArray.push({
                dyn_frm_fld_mstr_id : model.get('fldMstrId'),
                field_code : model.get('name'),
                data_value : crntVal
            });
        });

        return dataArray;

    }

};
/*global
Backbone,
Marionette,
$
*/
// TODO: svg rendering
Backbone.emulateHTTP = true;
$.event.props.push('dataTransfer');
var ADF = ADF||{};
ADF.App = Marionette.Application.extend({
  initialize: function(options) {
     ADF.utils.message('log','App Initialized', options);
  }
});

var adf = new ADF.App({container: 'body'});
adf.on('start', function(options){
    $.ajaxSetup({
        dataType: 'json',
        // contentType: 'application/json'
    });
    adf.page = new ADF.PageLayoutView({el:'.adf-page'});
});

window.onerror = function( message, file, lineNumber ) {
    ADF.utils.message('error',message,file,lineNumber);
    return true;
};
/*global
ADF,
Backbone,
$,
_
*/
// TODO: add unload check to make sure there aren't any changes pending before navigating away
ADF.PageLayoutView = Backbone.Marionette.LayoutView.extend({
    events: {
        'click .overlay-close'          : 'closeOverlayEditor'
    },
    initialize: function( options ) {
        ADF.utils.message('log','PageLayoutView Initialized', options);
        var pageView = this;
        pageView.dndSources = [];
        pageView.dndTargets = [];

        pageView.initRegions();

        this._super( options );
    },
    _buildRegion: function( regionData, id ) {
        var regionObj = {};
        regionData.regionClass = ADF[ADF.utils.capitalize(ADF.utils.camelize(regionData.adfRegionType))+'Region'];
        regionData.selector = '#'+id;
        regionData.regionName = ADF.utils.camelize(id);

        regionObj[regionData.regionName] = regionData;

        return regionObj;
    },
    initRegions: function(){
        var pageView = this;
        // var regions = {};
        // make sure there is a messages window on the page
        this._initMessagesWindow();
        pageView.$el.find('.adf-region').each(function(){
            var $region = $(this);
            var regionData = $region.data();

            // skip regions that maybe are malformed or missing the region type
            if( regionData.adfRegionType ){

                pageView.addRegions(pageView._buildRegion( regionData, $region.attr('id') ));

            }
        });
        // TODO: remove this bullshit
        setTimeout(function(){
            pageView.showRegions();
        },1);

    },
    showRegions: function() {
        _.each(this.getRegions(),function(region){
            if( !region.inert ){
                region.show();
            }
        });
    },
    findRegion: function( filter ) {
        var regions = this.getRegions();
        return _.find(regions,function(region){
            return region[filter.attribute] === filter.value || region.options[filter.attribute] === filter.value;
        });
    },
    showBackdrop: function() {
        $('.backdrop').removeClass('hide');
    },
    hideBackdrop: function() {
        $('.backdrop').addClass('hide');
    },
    closeOverlayEditor: function(e) {
        e.preventDefault();
        this.getRegion('overlayEditor').hide();
    },
    _initMessagesWindow: function() {
        var pageView = this;
        if( pageView.$el.find('.adf-messages-window').size() === 0 ){
            pageView.$el.append(ADF.templates.messagesWindow());
        }
    }

});
/*global
ADF,
Marionette,
$
*/
ADF.Region = Marionette.Region.extend({
    // TODO: overlay region optionally can get data from caller region

    initialize: function(options){
        ADF.utils.message('log','Region Initialized',options);
        this.adfAjaxOnshow = ( options.adfAjaxOnshow ? options.adfAjaxOnshow : false );
    },
    show: function() {
        // TODO: this really shouldn't be in the region object, probably part of the view that we've associated with it...
        this.$el.removeClass('hide');

        if( this.options.adfRegionLabel ) {
            if( this.$el.find('[data-adf-region-label]').size() > 0 ) {
                this.$el.find('[data-adf-region-label]').html( this.options.adfRegionLabel );
            }else{
                // TODO: (99) make this have options as to what this should render like
                this.$el.prepend('<legend>'+this.options.adfRegionLabel+'</legend>');
            }
        }

        // this onShowData is meant to be used just for java passing data into the ADF request
        // and should NOT be used for calls within the ADF application code
        var onShowData = this.$el.find(':input[data-adf-onshow-data=true]').serializeObject();

        if( this.adfAjaxOnshow ){
            this.ajax({data:onShowData});
        }
    },
    ajax: function( options ){

        /*
            options.data    this should be a js object literal as it will be stringified once in the below call
        */
        var region = this;

        // handle the data separately so we can extend it at an attribute level
        var data = $.extend({},region.options.adfAjaxData, options.data);

        // remove this so we can get all the other bits from options but don't overwrite the data we just created
        delete options.data;

        // use the combination of the above stuff
        var settings = $.extend({data:data}, options);

        ADF.utils.message('log','Ajax Call',options,settings);

        $.ajax({
            url: ( settings.url ? settings.url : region.options.adfAjaxUrl ),
            type: ( settings.method ? settings.method : 'POST' ),
            // data: JSON.stringify(settings.data),
            data: settings.data,
            beforeSend: function(){
                ADF.utils.spin(region.$el);
            },
            complete: function( jqXHR, textStatus ){

                ADF.utils.spin(region.$el, { stop: true } );

                if( jqXHR.status === 200 ){

                    if( jqXHR.responseJSON ){

                        ADF.utils.message('log','AJAX message: '+jqXHR.responseJSON.message);

                        // this is custom depending on the calling region's type so we send it back
                        region.ajaxSuccessHandler(jqXHR.responseJSON, settings);

                    }else{

                        ADF.utils.message('error','Malformed response received that does not have the expected JSON object',jqXHR,settings);

                    }

                }else if( jqXHR.status === 404 ){

                    ADF.utils.message('error','<h1>Page Not Found.</h1><p>The ajax calls is being made to a page ('+settings.url+') that could not be found. Probably going to need to get a TA involved to see what is going on here.');

                }else{

                    alert(textStatus+'! Probably going to need to get a TA involved.');
                    console.log('settings',settings);
                    console.log(jqXHR);
                    region.$el.html(jqXHR.responseText);

                }

            }
        });
    }
});

/*global
ADF,
_
*/
ADF.FormRegion = ADF.Region.extend({
    // TODO: handle being in a dialog
    template: ADF.templates.formRegion,
    initialize: function( options ) {
        ADF.utils.message('log','FormRegion Initialized', options);
        if( this.$el.find('form').size() === 0 ){
            this.$el.html(this.template());
        }
        this._super( options );
    },

    show: function() {

        var formRegion = this;

        formRegion.formView = new ADF.FormView({
            el:formRegion.$el.find('form')[0],
            collection: new ADF.FieldsCollection(),
            regionName: formRegion.options.regionName
        });

        formRegion.actionsCollection = new ADF.ActionsCollection(null,{regionName: formRegion.options.regionName});

        this._super();

    },

    ajaxSuccessHandler: function( xhrJson, settings ) {

        var formRegion = this;
        var formView = formRegion.formView;

        if( xhrJson.success === true ){

            if( xhrJson.data.hasOwnProperty('actions') ){

                if( settings.emptyCollections === false ){
                    formRegion.actionsCollection.add(xhrJson.data.actions);
                }else{
                    formRegion.actionsCollection.reset(xhrJson.data.actions);
                }

            }

            if( xhrJson.data.hasOwnProperty('fields') ){

                if( settings.emptyCollections === false ){
                    formView.collection.add(xhrJson.data.fields);
                }else{
                    formView.collection.reset(xhrJson.data.fields);
                }


                // TODO: add select2 renderer as part of the auto-rendering of the Marionette view

                // manually call render for some reason
                // thought that Marionette handled this for us but it wasn't firing so this had to be added
                formView.render();

            }

        }else{

            if( xhrJson.hasOwnProperty('errors') ){
                _.each(xhrJson.errors,function( element, index, array ){
                    alert(element);
                });
            }else{
                alert('Looks like the ajax response wasn\'t quite what was expected.  Probably need to get a TA involved to help figure it out.');
            }

        }

    }

});
/*global
ADF,
_
*/
ADF.GridRegion = ADF.Region.extend({
    template: ADF.templates.gridRegion,
    initialize: function( options ) {

        ADF.utils.message('log','GridRegion Initialized', options);

        var gridRegion = this;

        if( gridRegion.$el.hasClass('adf-grid-overlay-editor') ){
            gridRegion.inOverlay = true;
        }else{
            gridRegion.inOverlay = false;
        }

        gridRegion.$el.html(gridRegion.template({inOverlay:gridRegion.inOverlay}));
        gridRegion.fieldsCollection = new ADF.FieldsCollection(null,{regionName:gridRegion.options.regionName});
        gridRegion.actionsCollection = new ADF.ActionsCollection(null,{regionName: gridRegion.options.regionName});

        this._super( options );


    },

    show: function() {

        ADF.utils.message('log','gridRegion Shown');

        var gridRegion = this;
        gridRegion.gridView = new ADF.GridView({
            el:gridRegion.$el.find('.adf-grid-wrapper')[0],
            collection: new ADF.RecordsCollection(null,{regionName:gridRegion.options.regionName}),
            regionName: gridRegion.options.regionName
        });

        this._super();

    },

    ajaxSuccessHandler: function( xhrJson, settings ) {

        var gridRegion = this;

        if( xhrJson.success === true ){

            if( xhrJson.data.hasOwnProperty('fields') ){

                gridRegion.fieldsCollection.reset(xhrJson.data.fields);

            }

            if( xhrJson.data.hasOwnProperty('actions') ){

                if( settings.emptyCollections === false ){
                    gridRegion.actionsCollection.add(xhrJson.data.actions);
                }else{
                    gridRegion.actionsCollection.reset(xhrJson.data.actions);
                }

            }

            if( xhrJson.data.hasOwnProperty('records') ){

                gridRegion.gridView.collection.reset(xhrJson.data.records);

                // manually call render for some reason
                // thought that Marionette handled this for us but it wasn't firing so this had to be added
                gridRegion.gridView.render();

            }


        }else{

            if( xhrJson.hasOwnProperty('errors') ){
                _.each(xhrJson.errors,function( element, index, array ){
                    alert(element);
                });
            }else{
                alert('Looks like the ajax response wasn\'t quite what was expected.  Probably need to get a TA involved to help figure it out.');
            }

        }

    }

});
/*global
ADF,
_,
$
*/
ADF.ModulesRegion = ADF.Region.extend({
    template: ADF.templates.moduleListWrapper,
    initialize: function( options ) {
        ADF.utils.message('log','ModulesRegion Initialized', options);
        var modulesRegion = this;
        modulesRegion.options = $.extend({},options,modulesRegion.$el.data());
        this._super( options );
    },

    show: function() {

        var modulesRegion = this;

        modulesRegion.$el.html(modulesRegion.template({
            dndSource:modulesRegion.options.adfDndSource,
            dndTarget:modulesRegion.options.adfDndTarget
        }));

        modulesRegion.fieldsCollection = new ADF.FieldsCollection(null,{regionName:modulesRegion.options.regionName});
        modulesRegion.actionsCollection = new ADF.ActionsCollection(null,{regionName: modulesRegion.options.regionName});

        modulesRegion.modulesView = new ADF.ModulesView({
            el:modulesRegion.$el.find('.module-list-wrapper')[0],
            collection: new ADF.RecordsCollection(),
            regionName: modulesRegion.options.regionName,
            dndSource: modulesRegion.options.adfDndSource,
            dndTarget: modulesRegion.options.adfDndTarget
        });

        this._super();

    },

    // TODO: commonize more of the ajax success handler code
    ajaxSuccessHandler: function( xhrJson, settings ) {

        var modulesRegion = this;
        var modulesView = modulesRegion.modulesView;

        if( xhrJson.success === true ){

            if( xhrJson.data.hasOwnProperty('actions') ){

                if( settings.emptyCollections === false ){
                    modulesRegion.actionsCollection.add(xhrJson.data.actions);
                }else{
                    modulesRegion.actionsCollection.reset(xhrJson.data.actions);
                }

            }

            if( xhrJson.data.hasOwnProperty('fields') ){

                if( settings.emptyCollections === false ){
                    modulesRegion.fieldsCollection.add(xhrJson.data.fields);
                }else{
                    modulesRegion.fieldsCollection.reset(xhrJson.data.fields);
                }

            }

            if( xhrJson.data.hasOwnProperty('records') ){

                if( settings.emptyCollections === false ){
                    modulesView.collection.add(xhrJson.data.records);
                }else{
                    modulesView.collection.reset(xhrJson.data.records);
                }

            }

            // manually call render for some reason
            // thought that Marionette handled this for us but it wasn't firing so this had to be added
            modulesView.render();

        }else{

            if( xhrJson.hasOwnProperty('errors') ){
                _.each(xhrJson.errors,function( element, index, array ){
                    alert(element);
                });
            }else{
                alert('Looks like the ajax response wasn\'t quite what was expected.  Probably need to get a TA involved to help figure it out.');
            }

        }

    }

});
/*global
ADF,
adf,
_
*/
ADF.OverlayGridRegion = ADF.GridRegion.extend({
    initialize: function( options ) {
        ADF.utils.message('log','OverlayGridRegion Initialized', options);

        // this just means that we don't trigger the show() method on page load
        this.inert = true;

        this._super( options );
    },

    show: function( triggerRecordView, $triggerObj ) {
        ADF.utils.message('log','OverlayGridRegion Shown');

        var overlayRegion = this;
        var sourceRegion = adf.page.getRegion(triggerRecordView.regionName);
        var dataArray = [];
        var triggerBox = $triggerObj[0].getBoundingClientRect();
        var triggerData = $triggerObj.data();
        var triggerOffset = $triggerObj.offset();
        var dataFields = triggerData.adfAjaxDataFields.split(',');

        // TODO: check location of trigger field and possibly open up

        adf.page.showBackdrop();
        this.$el.addClass('open').css({top:( triggerOffset.top + triggerBox.height ) });
        this.options.adfAjaxUrl = triggerData.adfAjaxUrl;

        overlayRegion.options.dataFields = new ADF.FieldsCollection( sourceRegion.fieldsCollection.filter( function( field ){
            // console.log(field,_.indexOf( dataFields, field.get('name') ));
            return _.indexOf( dataFields, field.get('name') ) >= 0;
        }),{recordModelDefaults: triggerRecordView.model.toJSON()});

        // console.log(dataFieldsCollection);

        // dataArray = ADF.utils.dataSerialize( new Backbone.Collection( overlayRegion.options.dataFields ), triggerRecordView.model );
        dataArray = ADF.utils.dataSerialize( overlayRegion.options.dataFields, triggerRecordView.model );

        console.log(dataArray);

        overlayRegion.options.adfAjaxData = {adfSerializedData:JSON.stringify(dataArray)};

        this._super();
    },

    hide: function() {
        ADF.utils.message('log','OverlayGridRegion Hidden');
        var gridView = this.gridView;
        // TODO: empty the region
        // TODO: remove the ajax url

        if( this.$el.find('.changed') > 0 ){
            // TODO: make this a bit prettier
            alert('found records that have been changed and not saved');
        }

        this.$el.removeClass('open');

        gridView.$el.html(gridView.template({}));
        adf.page.hideBackdrop();

    }

});
/*global
ADF,
adf
*/
ADF.MessagesWindowRegion = ADF.Region.extend({
    initialize: function( options ) {
        ADF.utils.message('log','MessageWindow Initialized', options);

        var messagesWindow = this;

        // this just means that we don't trigger the show() method on page load
        messagesWindow.inert = true;

        messagesWindow.messagesWindowView = new ADF.MessagesWindowView({
            el: messagesWindow.$el.find('.messages-wrapper')[0],
            collection: new ADF.MessagesCollection(),
            regionName: options.regionName
        });
        messagesWindow._super( options );

    },

    show: function( messageHeader, messageBody, messageFooter ) {
        ADF.utils.message('log','MessageWindow Shown');
        this.$el.addClass('show');
        this.messagesWindowView.render();
    },

    hide: function() {
        ADF.utils.message('log','MessageWindow Hidden');
        this.$el.empty().removeClass('open');
        adf.page.hideBackdrop();
    }

});
/*global
ADF,
Backbone
*/
ADF.FieldModel = Backbone.Model.extend({

    initialize: function( attrs, opts  ){
        ADF.utils.message('log','FieldModel Initialized', attrs, opts);
        var fieldModel = this;

        if( attrs.name.toLowerCase() !== attrs.name ){
            fieldModel.set('name',attrs.name.toLowerCase());
        }

        // do this step-by-step for clarity and maintainability (not to mention debuggability)
        var inputType = fieldModel.get('type');
        inputType = ADF.utils.camelize(inputType);
        inputType = ADF.utils.capitalize(inputType);
        inputType = 'inputType'+inputType;

        // this.set('inputField',ADF.templates[inputType](this.toJSON()));
        if( ADF.templates[inputType] ){
            fieldModel.set('inputTemplate',ADF.templates[inputType]);
        }else{
            ADF.utils.message('error','unexpected template requested: '+inputType,fieldModel);
        }


    }

});
/*global
ADF,
Backbone,
_
*/
ADF.RecordModel = Backbone.Model.extend({

    initialize: function( attrs, opts ){
        ADF.utils.message('log','RecordModel Initialized', attrs, opts);
        var recordModel = this;

        // give the record an ID even if it is new (ie not from the database)
        if( recordModel.isNew() ){
            recordModel.set('id','a'+ADF.utils.randomId());
            recordModel.set('rowClass','added');
        }else{
            recordModel.set('rowClass','current');
        }

        // make sure all attributes are lowercase
        _.each(attrs,function(element, index, array){
            if( index.toLowerCase() !== index ){
                recordModel.set(index.toLowerCase(),element);
                recordModel.unset(index);
            }
            if( _.isArray(element) ){
                _.each(element, function( childElement, childIndex, childArray ){
                    ADF.utils.objPropToLower( childElement );
                });
                recordModel.set(index.toLowerCase(), element );
            }
        });

        // this.listenTo(this,'sync',recordModel.recordSave);

    },

    save: function( attrs, options ) {

        var attrs, xhr, attributes = this.attributes;
        var recordModel = this;
        var params = {};
        var dataArray = [];

        /* ----------------------------------------------
                 BEGIN FROM ORIGINAL BACKBONE.SYNC (v1.1.2)
           ---------------------------------------------- */
            // Default JSON-request options.
            // var params = {type: type, dataType: 'json'};

            // // Ensure that we have a URL.
            params.type = 'POST';
            if (!options.url) {
              params.url = _.result(recordModel, 'url') || ADF.utils.message('error','No URL specified');
            }
            var success = options.success;
            options.success = function(resp) {
                // Ensure attributes are restored during synchronous saves.
                recordModel.attributes = attributes;
                var serverAttrs = recordModel.parse(resp, options);
                if (options.wait) serverAttrs = _.extend(attrs || {}, serverAttrs);
                if (_.isObject(serverAttrs) && !recordModel.set(serverAttrs, options)) {
                    return false;
                }
                if (success) success(recordModel, resp, options);
                recordModel.trigger('sync', recordModel, resp, options);
            };

        /* ----------------------------------------------
                 END FROM ORIGINAL BACKBONE.SYNC (v1.1.2)
           ---------------------------------------------- */

            // now that we're in our own custom code we'll have to do our slightly odd JSON creation
            // where we create a three attribute object for each attribute
            // and put them into an array and then submit that
            console.log( options.fieldsCollection, this, ADF.utils.dataSerialize( options.fieldsCollection, this ) );
            dataArray = ADF.utils.dataSerialize( options.fieldsCollection, recordModel );
            params.data = {adfSerializedData:JSON.stringify(dataArray)};


            // and then back to the original backbone sync
        /* ----------------------------------------------
                 BEGIN FROM ORIGINAL BACKBONE.SYNC (v1.1.2)
           ---------------------------------------------- */
            // Make the request, allowing the user to override any Ajax options.
            xhr = options.xhr = Backbone.ajax(_.extend(params, options));
            recordModel.trigger('request', recordModel, xhr, options);
            return xhr;
        /* ----------------------------------------------
                 END FROM ORIGINAL BACKBONE.SYNC (v1.1.2)
           ---------------------------------------------- */


    }

});

//     createTplObject: function( args ){

//         var record = this;
//         var fieldsArray = args.fields;
//         var $target = args.target;
//         var createRow = ( args.hasOwnProperty('createRow') && args.createRow );
//         var cellObj = {};
//         var recordObj = {}
//         recordObj.cells = new Array();

//         for ( var i = 0; i < fieldsArray.length; i++ ) {

//             cellObj = fieldsArray[i];
//             cellObj.set('currentValue',record.get(fieldsArray[i].get('name')));
//             cellObj.set('inputField',cellObj.render());

//             recordObj.cells.push({'html': autoAdmin.templates.gridCell( cellObj.toJSON() )});

//         }

//         //make sure we have an ID value, even for new rows
//         if( record.get('id') ){
//             recordObj.id = record.get('id');
//             recordObj.rowClass = 'current';
//         }else{
//             recordObj.id = 'a' + Math.round( Math.random() * 10000000 );
//             rowClass = 'added';
//         }

//         return recordObj;

//     },

//     render: function( args ){

//         var tplObject = this.createTplObject( args );

//         alert('not done');

//         // TODO handle create row argument, etc.

//         // if( createRow ){

//     //         if( !args.hasOwnProperty('adjSibObj') || args.adjSibObj === false ){
//     //             $target.append( autoAdmin.render.hbsTemplate( 'autoAdminGridRow', rowObj ) );
//     //         }else{
//     //             adjSibObj.after( autoAdmin.render.hbsTemplate( 'autoAdminGridRow', rowObj ) );
//     //         }

//         // }else{

//         //      $target.find('tbody tr#'+recordObj.id).replaceWith(autoAdmin.templates.gridRow( rowObj ) );

//         // }

//     //     $('#'+dataObj.id).find('.select2').each(function(){
//     //         autoAdmin.render.renderSelect2({
//     //             select2Obj : $(this)
//     //         })
//     //     });

//     },

//     save: function( e ){

//         e.preventDefault();

//         console.log('some event');

//     }
/*global
ADF,
Backbone
*/
ADF.DropdownMenuModel = Backbone.Model.extend({
    defaults: {
        buttonLabel: 'Menu Name',
        footerOptions: []
    },
    initialize: function( data ){
        ADF.utils.message('log','DropdownMenuModel Initialized', data);
    }
});
/*global
ADF,
Backbone
*/
ADF.ActionModel = Backbone.Model.extend({

    initialize: function( attrs, opts ){

        this.set('id',ADF.utils.randomId());

        ADF.utils.message('log','ActionModel initialized', opts);

    }

});
/*global
ADF,
Backbone
*/
ADF.MessageModel = Backbone.Model.extend({

    initialize: function( attrs, opts ){

        this.set('id',ADF.utils.randomId());

        ADF.utils.message('log','MessageModel initialized', opts);

    }

});
/*global
ADF,
Backbone
*/
ADF.ActionsCollection = Backbone.Collection.extend({

    model: ADF.ActionModel,

    initialize: function( models, opts ){

        ADF.utils.message('log','ActionsCollection initialized', opts);

    }

});
/*global
ADF,
Backbone,
_
*/
ADF.FieldsCollection = Backbone.Collection.extend({

    model: ADF.FieldModel,

    initialize: function( models, options ){
        ADF.utils.message('log','FieldsCollection Initialized', models, options);

        this.options = {};

        // iterate through the options.recordModelDefaults and create a new record model defaults object
        // with the values from that incoming object
        if( options && options.recordModelDefaults ){
            this.options.recordModelDefaults = {};
            _.each(models,function( model ){
                this.options.recordModelDefaults[model.get('name')] = options.recordModelDefaults[model.get('name')];
            },this);
            ADF.utils.message('log','fields collection recordModelDefaults',this.options.recordModelDefaults);
        }

    },

    createRecordObject: function() {

        // this is used to take a field collection and using the model attributes 'name' and 'currentValue' create an object of "defaults"
        var dataObj = {};
        _.each(this.models, function( model ){
            if( this.options && this.options.recordModelDefaults ){
                dataObj[model.get('name')] = this.options.recordModelDefaults[model.get('name')];
            }else{
                dataObj[model.get('name')] = model.get('currentValue');
            }
        },this);

        return dataObj;

    }

});
/*global
ADF,
Backbone
*/
ADF.MessagesCollection = Backbone.Collection.extend({

    model: ADF.MessageModel,

    initialize: function( models, opts ){

        ADF.utils.message('log','MessagesCollection initialized', opts);

    }

});
ADF.RecordsCollection = Backbone.Collection.extend({

    model: ADF.RecordModel,

    initialize: function( models, options ){
        ADF.utils.message('log','RecordsCollection Initialized', models, options);

        var recordsCollection = this;

        // recordsCollection.regionName = options.regionName;

    }

});
/*global
ADF,
Backbone,
$
*/
ADF.DropdownMenuView = Backbone.Marionette.CompositeView.extend({
    template: ADF.templates.dropdownMenu,
    tagName: 'li',
    childViewContainer: '.dropdown-menu',
    childViewOptions: function() {
        return { regionName: this.regionName };
    },
    events: {
        'click .dropdown-toggle'     : 'dropdownToggle',
    },
    // TODO: seems like this model shouldn't be created in the view since that's a bit backwards
    // TODO: hide this when the user clicks off of it
    model: new ADF.DropdownMenuModel({
        buttonLabel: 'Menu Name',
        wrapClass: 'column-selector',
        footerOptions: []
    }),
    initialize: function( options ) {
        ADF.utils.message('debug','DropdownMenuView Initialized', options );
    },
    dropdownToggle: function( event ) {

        var $target = {};

        if( event.target ){

            event.preventDefault();
            $target = $(event.target);

        }else{      // we're just going to assume it's a jQuery object then

            $target = event;

        }

        $target.closest('.dropdown-wrapper').find('.dropdown-menu').toggleClass('hide');

    }

});
/*global
ADF,
Backbone
*/
ADF.CellView = Backbone.Marionette.ItemView.extend({
    template: ADF.templates.gridCell,
    tagName: 'td',
    initialize: function( options ){
        ADF.utils.message('log','CellView Initialized', options);
        this.model.set('inputField',this.model.get('inputTemplate')(this.model.toJSON()));
        // this.setElement(this.template(this.model.toJSON()));
        // <td data-column-select-priority='{{fieldPriority}}' data-header-id='{{name}}' class='{{wrapClass}}'>
    },
    render: function() {
        // this.$el
        //     .attr('data-column-select-priority',this.model.get('fieldPriority'))
        //     .attr('data-header-id',this.model.get('name'))
        //     .addClass(this.model.get('wrapClass'));
        return this.template(this.model.toJSON());
    }
});
/*global
ADF,
Backbone
*/
ADF.ColumnSelectItemView = Backbone.Marionette.ItemView.extend({
    template: ADF.templates.dropdownSelectItem,
    tagName: 'li',
    initialize: function( options ){
        ADF.utils.message('log','ColumnSelectItemView Initialized', options);
        // this.model.set('regionName',options.regionName);
    }
});
/*global
ADF,
<<<<<<< Updated upstream
=======
Backbone,
>>>>>>> Stashed changes
$,
_
*/
ADF.ColumnSelectView = ADF.DropdownMenuView.extend({
    childView: ADF.ColumnSelectItemView,
    events: {
        'click  .adf-grid-column-group'                : 'columnSelect',
        'change .column-selector .dropdown-menu input' : 'columnSelect'
    },
    initialize: function( options ) {
        ADF.utils.message('log','ColumnSelectView Initialized', options );

        var footerOptions = [];

        this.regionName = options.regionName;

        // inherit events from the prototype but allow for custom events as well
        this.events = _.extend({},ADF.DropdownMenuView.prototype.events,this.events);

        this.model.set('buttonLabel','Column Select');
        this.model.set('wrapClass','column-selector');

        footerOptions.push({
            href : '#',
            itemClass : 'adf-grid-column-group',
            label : 'All Columns',
            dataAttributes : [
                {
                    'name' : 'column-select-type',
                    'value' : 'all'
                }
            ]
        });

        footerOptions.push({
            href : '#',
            itemClass : 'adf-grid-column-group',
            label : 'Minimum Columns',
            dataAttributes : [
                {
                    'name' : 'column-select-type',
                    'value' : 'min'
                }
            ]
        });

        footerOptions.push({
            href : '#',
            itemClass : 'adf-grid-column-group',
            label : 'Default Columns',
            dataAttributes : [
                {
                    'name' : 'column-select-type',
                    'value' : 'dflt'
                }
            ]
        });

        this.model.set('footerOptions',footerOptions);

    },
    render: function() {

        // render the main bits
        this.$el.html(this.template(this.model.toJSON()));

        var columnSelect = this;

        // normally would do variables up top but this requires the html() to be created already
        var childContainer = this.$el.find(this.childViewContainer).find('.divider');

        // put the children (the fields) into the drop down but above the divider
        this.collection.each(function(model){

            // TODO: move this to the model initializer
            model.set('regionName',columnSelect.regionName);

            if( model.get('fieldPriority') !== 0 ){
                var childView = new columnSelect.childView();
                var headerCell = $('#'+columnSelect.regionName+'--'+model.get('name'));
                if( headerCell.css('display') === 'table-cell' ){
                    model.set('checked',true);
                }
                childContainer.before(childView.template(model.toJSON()));
            }

        });

        return this;
    },
    columnSelect: function(e) {

        e.preventDefault();

        var colSelect = this;
        var $target = $(e.target);
        var groupType = $target.attr('data-column-select-type');

        console.log('columnselect triggered',$target,groupType);

        if( _.isUndefined( groupType ) ){

            var id = $target.val();
            var cells = $('#'+id+', .adf-grid td[data-header-id='+id+']');

            console.log('columnselect details',id,cells);

            if( $target.is(':checked') ){
                cells.show();
            }else{
                cells.hide();
            }

        }else{

            switch( groupType ){

                case 'all':
                    $target.closest('.dropdown-wrapper').find('.dropdown-menu :input').not(':checked').trigger('click');
                    break;

                case 'min':
                    $target.closest('.dropdown-wrapper').find('.dropdown-menu :input').each(function(){
                        var inputObj = $(this);
                        var priority = parseInt( $('#'+inputObj.val()).attr('data-column-select-priority'), 10 );
                        if( ( inputObj.is(':checked') && priority > 1 ) || ( inputObj.is(':not(:checked)') && priority <= 1 ) ){
                            inputObj.trigger('click');
                        }
                    });
                    break;

                case 'dflt':
                    var dropdownMenu = $target.closest('.dropdown-wrapper').find('.dropdown-menu');
                    $('.adf-grid th, .adf-grid td').css('display', '');
                    $('.adf-grid th').each(function(){

                        var inputObj = dropdownMenu.find(':input[value='+$(this).attr('id')+']');

                        //check the visibility of this header which is now based on the media queries
                        if( $(this).css('display') === 'table-cell' && inputObj.is(':not(:checked)') ){

                            inputObj.trigger('click');

                        }else if( $(this).css('display') === 'none' && inputObj.is(':checked') ){

                            inputObj.trigger('click');

                        }

                    });
                    break;

            }

            colSelect.dropdownToggle( $target.closest('.dropdown-wrapper').find('.dropdown-toggle') );

        }

    }

});
/*global
ADF,
Backbone,
$,
adf
*/
ADF.GridActionView = Backbone.Marionette.ItemView.extend({
    template: ADF.templates.dropdownLink,
    tagName: 'li',
    events: {
        'click' : 'handleClick'
    },
    initialize: function( options ){
        ADF.utils.message('log','GridActionView Initialized', options);
        this.region = adf.page.getRegion(options.regionName);
    },
    handleClick: function(e){

        e.preventDefault();

        var actionView = this;
        var $action = $(e.target);

        if( $action.data('action-type') ){

            var actionType = ADF.utils.camelize( $action.data('action-type') );

            if( !actionView[actionType] ){
                ADF.utils.message('error','action type not setup',actionType);
                return;
            }
            actionView[actionType]( $action );

        }else{
            ADF.utils.message('error','Better have a TA check into this.  The action you clicked on has no type indicated so not sure what to do with it.');
        }

    },

    gridRecordAdd: function( actionObj ) {

        var gridView = this.region.gridView;
        var actionData = actionObj.data();
        var defaultsObj = {};

        if( this.region.options && this.region.options.dataFields ){
            defaultsObj = this.region.options.dataFields.createRecordObject();
        }
        // console.log('grid data fields',this.region.options.dataFields, defaultsObj );

        ADF.utils.spin(this.region.$el);
        actionObj.closest('.dropdown-menu').addClass('hide');

        for( var i = 1; i <= actionData.recordCount; i++ ){
            gridView.collection.add(defaultsObj,{ at: 0 });
        }

        gridView.render();
        ADF.utils.spin(this.region.$el, { stop: true } );

    }

});
/*global
ADF,
Backbone,
$
*/
// TODO: get a prototype setup for all dropdowns to work
ADF.GridActionsView = Backbone.Marionette.CompositeView.extend({
    template: ADF.templates.dropdownMenu,
    tagName: 'li',
    childView: ADF.GridActionView,
    childViewContainer: '.dropdown-menu',
    childViewOptions : function () {
        return { regionName: this.regionName };
    },
    events: {
        // TODO: this should go to the parent prototype
        'click .dropdown-wrapper .dropdown-toggle'     : 'dropdownToggle',
        // TODO: create hierarchy of events somehow
        'click .adf-grid-column-group'          : 'columnSelect',
        'change .column-selector .dropdown-menu input' : 'columnSelect'
    },
    initialize: function( options ) {
        ADF.utils.message('log','GridActionsView Initialized', options );
        this.regionName = options.regionName;

        // TODO: this model should go to the parent prototype but something wasn't working with that so it's on the list for later
        // TODO: seems like this model shouldn't be created in the view since that's a bit backwards
        // TODO: hide this when the user clicks off of it
        this.model = new ADF.DropdownMenuModel({
            buttonLabel : 'Actions',
            wrapClass : 'grid-actions'
        });

    },
    render: function() {

        // render the main bits
        this.$el.html(this.template(this.model.toJSON()));

        var gridActions = this;

        // normally would do variables up top but this requires the html() to be created already
        var childContainer = this.$el.find(this.childViewContainer).find('.divider');

        // put the children (the fields) into the drop down but above the divider
        this.collection.each(function(model){

            // TODO: move this to the model initializer
            model.set('regionName',gridActions.regionName);

            var childView = new gridActions.childView({regionName:gridActions.regionName,model:model});
            childContainer.before(childView.template(model.toJSON()));
            // console.log('#'+gridActions.regionName+'Action--'+model.get('id'));
            childView.setElement('#'+gridActions.regionName+'Action--'+model.get('id'));

        });

        return this;
    },
    // TODO: move this to the prototype
    dropdownToggle: function( event ) {

        var $target = {};

        if( event.target ){

            event.preventDefault();
            $target = $(event.target);

        }else{      // we're just going to assume it's a jQuery object then

            $target = event;

        }

        $target.closest('.dropdown-wrapper').find('.dropdown-menu').toggleClass('hide');

    },
    columnSelect: function(e) {

        e.preventDefault();

        var colSelect = this;
        var $target = $(e.target);
        var groupType = $target.attr('data-column-select-type');

        console.log('columnselect triggered',$target,groupType,id);

        if( typeof groupType == 'undefined' ){

            var id = $target.val();
            var cells = $('#'+id+', .adf-grid td[data-header-id='+id+']');

            console.log('columnselect details',id,cells);

            if( $target.is(':checked') ){
                cells.show();
            }else{
                cells.hide();
            }

        }else{

            switch( groupType ){

                case 'all':
                    $target.closest('.dropdown-wrapper').find('.dropdown-menu :input').not(':checked').trigger('click');
                    break;

                case 'min':
                    $target.closest('.dropdown-wrapper').find('.dropdown-menu :input').each(function(){
                        var inputObj = $(this);
                        var priority = parseInt( $('#'+inputObj.val()).attr('data-column-select-priority'), 10 );
                        if( ( inputObj.is(':checked') && priority > 1 ) || ( inputObj.is(':not(:checked)') && priority <= 1 ) ){
                            inputObj.trigger('click');
                        }
                    });
                    break;

                case 'dflt':
                    var dropdownMenu = $target.closest('.dropdown-wrapper').find('.dropdown-menu');
                    $('.adf-grid th, .adf-grid td').css('display', '');
                    $('.adf-grid th').each(function(){

                        var inputObj = dropdownMenu.find(':input[value='+$(this).attr('id')+']');

                        //check the visibility of this header which is now based on the media queries
                        if( $(this).css('display') === 'table-cell' && inputObj.is(':not(:checked)') ){

                            inputObj.trigger('click');

                        }else if( $(this).css('display') === 'none' && inputObj.is(':checked') ){

                            inputObj.trigger('click');

                        }

                    });
                    break;

            }

            colSelect.dropdownToggle( $target.closest('.dropdown-wrapper').find('.dropdown-toggle') );

        }

    }

});
/*global
ADF,
Marionette,
adf,
$
*/
ADF.GridFilterItemView = Marionette.ItemView.extend({
    template: ADF.templates.dropdownSelectItem,
    tagName: 'li',
    events: {
        'change :input'  : 'filterSelect'
    },
    initialize: function( options ){
        ADF.utils.message('debug','GridFilterItemView Initialized', options);
        this.regionName = options.regionName;
        // this.setElement(this.$el.replaceWith(this.template({})));
        this.model.set('label',this.model.get('fieldValue') + ' (' + this.model.get('records').length + ' )');
        this.model.set('id',ADF.utils.randomId());
        this.model.set('name',this.regionName+'--'+this.model.get('fieldName')+'--'+this.model.get('fieldValue'));
    },
    render: function() {
        // have this so the default marionette renderer doesn't render anything
    },
    renderAsChild: function() {
        return this.template(this.model.toJSON());
    },
    filterSelect: function( e ) {
        e.preventDefault();
        var gridFilters = adf.page.getRegion(this.regionName).gridView.filters;
        if( $(e.target).is(':checked') ){
            // console.log('this one is checked',this.model.id);
            gridFilters.add(this.model.toJSON());
        }else{
            // console.log('this one is not checked',this.model.id);
            gridFilters.remove(this.model.id);
        }
        // console.log(gridFilters);
        // adf.page.getRegion(this.regionName).gridView.filters.push()
    }
});
/*global
ADF,
Backbone,
adf,
_
*/
ADF.GridFilterView = ADF.DropdownMenuView.extend({
    childView: ADF.GridFilterItemView,
    childViewContainer: '.dropdown-menu',
    collection: new Backbone.Collection(),
    initialize: function( options ){
        ADF.utils.message('log','GridFilterView Initialized', options);

        this.region = adf.page.getRegion(options.regionName);
        this.regionName = options.regionName;
        this.fieldName = options.fieldName;
        this.fieldType = options.fieldType;

        var footerOptions = [];

        footerOptions.push({
            href : '#',
            itemClass : 'adf-grid-filter-action',
            label : 'Clear Actions',
            dataAttributes : [
                {
                    'name' : 'filter-action-type',
                    'value' : 'clear'
                }
            ]
        });

        this.model.set('footerOptions',footerOptions);
        this.model.set('wrapClass','grid-header-filter');

        if( this.fieldType === 'TEXT' ){
            this.includeInRender = true;
            this.headerEl = options.headerEl;
        }else{
            this.includeInRender = false;
        }

        // inherit events from the prototype but allow for custom events as well
        this.events = _.extend({},ADF.DropdownMenuView.prototype.events,this.events);

    },
    render: function() {
        // var gridFilterView = this;

        if( this.includeInRender ) {
            this.headerEl.addClass('has-filter').append(this.template(this.model.toJSON()));
            this.setElement(this.headerEl.find('.dropdown-wrapper')[0]);
            // TODO: review if this should be here or just in the dropdownToggle function
            // this.listenTo(this.collection,'add',function(model){
            //     gridFilterView.addChild(model,gridFilterView.childView);
            // });
        }
    },
    dropdownToggle: function( event ) {

        // this basically just opens the dropdown
        this._super( event );

        var child = {};

        // TODO: add type-ahead-style search (or something)
        // TODO: make this spinner work with the parent code that removes the hide class
        // ADF.utils.spin(this.$el.find('.dropdown-menu'));

        // create an array based on all the values existing in the column
        var distinctValues = _.groupBy(this.region.gridView.collection.models, function( recordModel ){
            return recordModel.get(this.fieldName);
        },this);

        _.each(distinctValues,function(fieldValue, index){
            this.collection.add({fieldName:this.fieldName,fieldValue:index,records:fieldValue});
        },this);

        this.collection.each(function( model ){
            child = this.addChild(model,this.childView);
            // TODO: override the stupid rendering of ItemViews within composites and collections to not replicate their parent element
            this.$el.find('.dropdown-menu .divider').before(child.renderAsChild());
            child.setElement(this.$el.find('.dropdown-menu .divider').prev()[0]);
        },this);

        // console.log(this.collection,this.children);

    }

});
/*global
ADF,
Backbone
*/
ADF.MessageView = Backbone.Marionette.ItemView.extend({
    template: ADF.templates.message,
    events: {
        'click .message-remove'                        : 'messageRemove',
        'click .message-details'                       : 'showMessageInConsole'
    },
    initialize: function( options ) {
        // TODO: figure out a way for this view to use the message function without causing an infinite loop
        ADF.utils.message('log','MessageView Initialized', options);
        this.messageFormat();
    },
    messageRemove: function(e) {
        e.preventDefault();
        // TODO: this should really be just this.$el but the silly Marionette default render wraps the tpl in extra div
        this.$el.find('.message').addClass('removed');
    },
    messageFormat: function() {
        if( this.model.get('originalArguments') && !this.model.get('content') ){
            // TODO: handle the originalArguments a bit differently to make URLs into links
            // TODO: handle the originalArguments maybe having line number for a file
            this.model.set('content',ADF.utils.arrayToHTML( this.model.get('originalArguments'), 'div', 'div' ) );
        }else{
            // console.log('do not parse the array',this.model.get('originalArguments'),this.model.get('content') );
        }
    },
    showMessageInConsole: function(e) {
        e.preventDefault();
        // console[this.model.get('level')](this.model.toJSON());
        console[this.model.get('level')](this.model.get('originalArguments'));

    }
});
/*global
ADF,
Marionette
*/
// TODO: add clear all option to remove all messages
ADF.MessagesWindowView = Marionette.CollectionView.extend({

    childView: ADF.MessageView,

    initialize: function( options ) {
        ADF.utils.message('log','MessagesWindowView Initialized', options );
    }

});
/*global
ADF,
Backbone
*/
ADF.FormActionView = Backbone.Marionette.ItemView.extend({

    el: '.adf-action',
    template: ADF.templates.action,
    initialize: function( options ){
        ADF.utils.message('log','FormActionView initialized', options );
    },

    events: {
        'click a' : 'handleClick'
    },

    render: function( args ) {

        // args.target.append( ADF.templates.action( this.model.toJSON() ) );
        // this.setElement('#'+this.model.get('id'));

        return this.template( this.model.toJSON() );

    },

    // renderAsDropdownItem: function( target ) {

    //     target.before( ADF.templates.dropdownLink( this.model.toJSON() ) );

    //     this.setElement('#'+this.model.get('id'));

    // },

    // handleClick: function(e){

    //     e.preventDefault();

    //     var actionView = this;
    //     var $action = $(e.target);

    //     if( $action.data('action-type') ){

    //         var actionType = ADF.utils.camelize( $action.data('action-type') );
    //         actionView[actionType]( $action );

    //     }else{
    //         alert('Better have a TA check into this.  The action you clicked on has no type indicated so not sure what to do with it.');
    //     }

    // },

    // gridRecordAdd: function( actionObj ) {

    //     // var $target = actionObj.closest('.adf-grid-wrapper').find('tbody');
    //     var gridView = this.parentGridView;
    //     // var fieldsArray = gridView.fieldsColl.models;
    //     // var recordView;

    //     actionObj.closest('.grid-dropdown').find('.dropdown-menu').addClass('hide');

    //     for( var i = 1; i <= parseInt( actionObj.data('record-count'), 10 ); i++ ){
    //         gridView.recordsColl.add({},{ saveUrl : gridView.recordsColl.saveUrl });
    //     }

    // }

});
/*global
ADF,
Backbone,
$,
adf,
_
*/
ADF.FieldView = Backbone.Marionette.ItemView.extend({
    template: ADF.templates.formRow,
    events: {
        'change'                        : 'valueChange'
    },
    initialize: function( options ) {
        ADF.utils.message('log','FieldView Initialized', options);
        if( !_.isUndefined( this.model.get('inputTemplate') ) ){
            this.model.set('inputField',this.model.get('inputTemplate')(this.model.toJSON()));
        }else{
            ADF.utils.message('error','Attempting to assign inputField attribute to undefined template',this.model);
        }
    },
    render: function() {
        this.$el.html(this.template(this.model.toJSON()));
        return this;
    },
    renderAsChild: function(){
        return this.template(this.model.toJSON());
    },
    valueChange: function(e) {
        // console.log('input change',e,$(e.target).val(),$(e.currentTarget).val());
        this.model.set('currentValue',$(e.target).val());
    },
    showOverlayEditor: function(e) {
        e.preventDefault();
        adf.page.getRegion('overlayEditor').show( $(e.target) );
    }
});
/*global
ADF,
Marionette,
$,
adf,
_
*/
ADF.FormView = Marionette.CollectionView.extend({

    childView: ADF.FieldView,

    initialize: function( options ) {
        ADF.utils.message('log','FormView Initialized', options );
        $.extend(this.options,options);
        // this.options
    },

    events: {
        // select handlers
        'change select[data-adf-submit-on-change=true]'                     : 'submitParentForm',
        'change select[data-adf-dependent-field-lkup-on-change=true]'       : 'dependentFieldLkup',

        // same handlers as above but now in the event that the UI has the data- attributes on a parent "wrapper" element rather than right on the select
        'change [data-adf-submit-on-change=true] select'                    : 'submitParentForm',
        'change [data-adf-dependent-field-lkup-on-change=true] select'      : 'dependentFieldLkup',
        'change [data-adf-dependent-field-lkup-on-change=true] :checkbox'   : 'dependentFieldLkup',

        // button handlers
        'click .btn-submit'                                                 : 'submitParentForm',
        'click .btn-query'                                                  : 'submitParentForm',
        'click .btn-submit-custom-url'                                      : 'submitCustomUrl',

        // form submission
        'submit'                                                            : 'submitForm'
    },

    render: function() {

        // the normal render
        var formView = this;
        formView._super();

        // rendering the 'actions' for a given form
        // start by getting the region since that is where the actions are kept
        var region = adf.page[formView.options.regionName];

        // see if we have any actions because if we don't we can stop right away
        if( region.actionsCollection.length > 0 ){
            formView.$el.append(ADF.templates.formRow({
                name: 'ACTIONS',
                fldMstrId: 0
            }));

            var childContainer = formView.$el.find('#ACTIONS-field-wrap .form-input');

            region.actionsCollection.each( function( action ) {
                var childView = new ADF.FormActionView({model:action});
                childContainer.append(childView.render());
            });

        }

        ADF.utils.select2.refresh();

    },

    submitParentForm: function( e ) {

        e.preventDefault();
        $(e.target).closest('form').submit();

    },

    submitCustomUrl: function( e ) {

        e.preventDefault();
        var $triggerObj = $(e.target).closest('.btn');
        $triggerObj.closest('form').attr('action',$triggerObj.attr('href')).submit();

    },

    submitForm: function( e ) {

        var formView = this;
        var $form = $(e.target);
        var action = $form.attr('action');
        var region = adf.page.findRegion({
            attribute : 'el',
            value : action
        });
        var dataArray = ADF.utils.dataSerialize( formView.collection );

        if( action.substring(0,1) === '#' ){

            if( $(action).size() > 0 ){

                ADF.utils.message('log','Found something to load into');
                e.preventDefault();

                console.log();

                region.ajax({
                    data: {adfSerializedData:JSON.stringify(dataArray)},
                    method: 'POST'
                });

            }else{
                ADF.utils.message('error','Trying to load ajax but destination element could not be found on the page');
            }
        }else{
            // do our little fancy bit to get the form data into our custom field
            $form.append(ADF.templates.inputTypeAdfSerializedData({data:dataArray}));

            // and then let the form submit
            return true;
        }

    },

    dependentFieldLkup: function(e) {

        var formView = this;
        // var dataObj = {};
        var dataArray = [];
        var $triggerObj = $(e.target);
        var $inputWrapper = $triggerObj.closest('.adf-input-wrapper');
        var $parentRow = $triggerObj.closest('.form-row');
        // var $form = $parentRow.closest('form');
        var triggerData = $.extend({},$parentRow.data(),$inputWrapper.data(),$triggerObj.data());
        var $target = $('#'+triggerData.fieldLkupTarget+'-field-wrap');
        var childFields = triggerData.adfDependentFieldLkupChildFields ? triggerData.adfDependentFieldLkupChildFields.split(',') : null;
        var region = adf.page[formView.options.regionName];

        e.preventDefault();
        ADF.utils.message('log','dependentFieldLkup',e);

        _.each(childFields,function( fieldName ){
            var modelToRemove = formView.collection.filter(function( model ){
                return model.get('name') === fieldName;
            });
            formView.collection.remove(modelToRemove);
            $('#'+fieldName+'-field-wrap').remove();
        });

        dataArray = ADF.utils.dataSerialize( formView.collection );

        if( $target.size() === 0 ){
            // TODO:somehow also remove any prefix/suffix for this field upon load of the new stuff
            // TODO:allow field to be dropped into the middle of a form rather than append to the form

            $target = $parentRow;
        }else{
            $target.remove();
            $target = $parentRow;
        }

        region.ajax({
            data: {adfSerializedData:JSON.stringify(dataArray)},
            url: triggerData.adfDependentFieldLkupUrl,
            emptyCollections:false
        });

    }
});
/*global
ADF,
Backbone,
adf,
$
*/
// TODO: have module and record views share a common prototype
ADF.ModuleView = Backbone.Marionette.CompositeView.extend({
    template: ADF.templates.module,
    childView: ADF.FieldView,
    childContainer: '.module-details',
    events: {
        'adf-module-drop'                       : 'drop',
        'adf-module-remove'                     : 'remove',
        'click .module-details-toggle'          : 'toggleDetails',
        'change :input'                         : 'inputChange',
        'click .btn'                            : 'handleAction'
    },
    initialize: function( options ) {
        ADF.utils.message('log','ModuleView Initialized', options);
        this.region = adf.page.getRegion(options.regionName);
        this.collection = this.region.fieldsCollection;
        // this.listenTo(this.model,'sync', this.moduleAction);
        // this.listenTo(this.model,'error',this.moduleAction);
        this.listenTo(this.model,'all',this.moduleAction);
    },
    render: function() {

        // TODO: this is getting an extra DIV wrapper when rendering
        var fieldsString = '';

        var moduleView = this;

        this.collection.each(function(model){

            model.set('currentValue',moduleView.model.get(model.get('name')));
            var childView = new moduleView.childView({model:model});
            fieldsString += childView.renderAsChild();

        },this);

        this.$el.html(this.template($.extend({},this.model.toJSON(),{fields:fieldsString})));
        return this;
    },
    toggleDetails: function(e) {
        e.preventDefault();
        this.$el.find('.module-details').toggleClass('hide');
    },
    handleAction: function(e) {
        e.preventDefault();
        e.stopPropagation();        //since the parent ModulesView will likely have this same event listener
        var $targetObj = $(e.target).closest('a');
        var actionType = $targetObj.attr('data-action-type');
        // TODO: experiment with making this dynamic
        switch( actionType ){
            case 'save':
                this.model.url = $targetObj.attr('href');
                this.model.save(null,{});
                break;
            default:
                ADF.utils.message('error','Unexpected record action ('+actionType+') triggered.',$targetObj);
        }
    },
    inputChange: function( e ){

        // stopping the propagation for overlay changes so they don't change the master
        e.preventDefault();
        e.stopPropagation();

        var changed = e.currentTarget;
        var value = $(e.currentTarget).val();
        var obj = {};
        obj[changed.name] = value;

        this.model.set(obj);

        this.$el.removeClass('current').addClass('updated');

    },
    moduleAction: function( event, model, response, options ) {

        if( model.get('id') === 11115 ){
            // console.log(event,model.get('id'));
            // console.log(event,response,options);
        }

        console.log(event,response,options);

        switch( event ){
            case 'sync':
                if( options.xhr.status === 200 ){

                    ADF.utils.message('debug','Module action completed successfully',model,options.xhr.responseJSON,options);

                    if( options.xhr.responseJSON.success ){
                        this.$el.removeClass('updated new error').addClass('current');
                    }else{
                        this.$el.removeClass('updated new current').addClass('error');
                        ADF.utils.message('warn','Something went wrong in saving the module',model,options.xhr.responseJSON,options);
                    }

                }else{

                    this.$el.removeClass('updated new current').addClass('error');
                    ADF.utils.message('error','Something unexpected went wrong in saving the module',model,options.xhr.responseJSON,options);

                }
                break;

            default:
                ADF.utils.message('debug','Unhandled module event type',event,model,response,options);

        }

    },
    drop: function(e, i){
        // console.log('moduled dropped',e,i);
        this.$el.trigger('adf-module-received',[this.model, i]);
    },
    remove: function(e, i){
        if( e && e.type === 'adf-module-remove' ){
            console.log('module remove',e,i);
            this.$el.trigger('adf-module-sent',[this.model, i]);
        }
    }

});
/*global
ADF,
Marionette,
adf,
$
*/
ADF.ModulesView = Marionette.CollectionView.extend({

    template: ADF.templates.moduleListWrapper,
    childView: ADF.ModuleView,
    childViewContainer: '.module-list-wrapper',
    childViewOptions: function() {
        return { regionName: this.regionName };
    },
    events: {
        'adf-module-received'           : 'moduleReceived',
        'adf-module-sent'               : 'moduleSent',
        'click .btn'                    : 'handleAction'
    },
    initialize: function( options ) {
        ADF.utils.message('log','ModulesView Initialized', options );
        this.regionName = options.regionName;
        this.fieldsCollection = adf.page.getRegion(this.regionName).fieldsCollection;
        this.dndSource = options.dndSource;
        this.dndTarget = options.dndTarget;

        if( this.dndSource ){
            adf.page.dndSources.push(this);
        }
        if( this.dndTarget ){
            adf.page.dndTargets.push(this);
        }
    },
    render: function() {

        // the normal render
        var modulesView = this;
        // modulesView.$el.find('#ACTIONS-field-wrap').remove();
        modulesView.$el.empty();
        modulesView._super();

        // console.log('within render',modulesView.collection);

        // rendering the 'actions' for a given form
        // start by getting the region since that is where the actions are kept
        var region = adf.page.getRegion(modulesView.options.regionName);

        // TODO: commonize this "action collection" handling since it's here and in the form view
        // see if we have any actions because if we don't we can stop right away
        if( region.actionsCollection.length > 0 ){
            modulesView.$el.append(ADF.templates.formRow({
                name: 'ACTIONS',
                fldMstrId: 0
            }));

            var childContainer = modulesView.$el.find('#ACTIONS-field-wrap .form-input');

            region.actionsCollection.each( function( action ) {
                var childView = new ADF.FormActionView({model:action});
                childContainer.append(childView.render());
            });

        }

        // drag and drop setup
        if( modulesView.dndSource ){

            modulesView.$el.sortable({
                handle: '.dnd-handle',
                connectWith: '.dnd-wrapper[data-adf-dnd-target=true]',
                placeholder: 'module-placeholder',
                stop: function(event, ui) {
                    ui.item.trigger('adf-module-drop', ui.item.index());
                },
                remove: function(event, ui) {
                    console.log('remove');
                    ui.item.trigger('adf-module-remove', ui.item.index());
                },
                activate: function( event, ui ) {
                    modulesView.$el.addClass('dnd-active');
                },
                deactivate: function( event, ui ) {
                    modulesView.$el.removeClass('dnd-active');
                }
            });

        }

        //     dndSourceInit: function( opts ) {

//         var modulesView = this;

//         if( opts.destroy ){
//             // modulesView.$el.sortable('destroy');
//         }

//         modulesView.$el.sortable({
//             connectWith: '.dnd-wrapper.dnd-target'
//         }).bind('dragstart.h5s', function(e, ui) {
//             console.log(e);
//         });

//     },

    },
    handleAction: function(e) {
        e.preventDefault();
        var modulesView = this;
        var $targetObj = $(e.target).closest('a');
        var actionType = $targetObj.attr('data-action-type');
        // TODO: experiment with making this dynamic
        switch( actionType ){
            case 'save':
                modulesView.collection.each(function( moduleModel ){
                    moduleModel.url = $targetObj.attr('href');
                    moduleModel.save(null,{fieldsCollection: modulesView.fieldsCollection});
                });
                break;
            default:
                ADF.utils.message('error','Unexpected record action ('+actionType+') triggered.',$targetObj);
        }
    },
    moduleReceived: function( e, model, position ) {

        var modulesView = this;

        // TODO: fetch the new page detail object
        // console.log('modulesView moduleDrop',this.regionName,e,model,position);
        // console.log('record to be added at position',position);
        // this.collection.remove(model);
        // this.collection.each(function(model, index){
        //   var ordinal = index;
        //   if(index >= position){
        //     ordinal+=1;
        //   }
        //   // model.set('ordinal', ordinal);
        // });

        // model.set('ordinal', position);
        modulesView.collection.add(model, {at: position});
        // modulesView.collection.add(new ADF.RecordModel({}));
        // console.log(modulesView.collection);
        modulesView.render();
    },
    moduleSent: function( e, model, position ) {
        var modulesView = this;
        // console.log('moduleSent');
        modulesView.collection.remove(model);
    }


});


//     saveModules: function( e ){

//         e.preventDefault();

//         var modulesView = this;

//         _.each(modulesView.recordsColl.models, function( element, index, array ){

//             element.save(null,{});

//         });

//     },

//     dndSourceInit: function( opts ) {

//         var modulesView = this;

//         if( opts.destroy ){
//             // modulesView.$el.sortable('destroy');
//         }

//         modulesView.$el.sortable({
//             connectWith: '.dnd-wrapper.dnd-target'
//         }).bind('dragstart.h5s', function(e, ui) {
//             console.log(e);
//         });

//     },

//     dndTargetInit: function( opts ) {

//         var modulesView = this;
//         var $target;

//         if( opts.destroy ){
//             // modulesView.$el.sortable('destroy');
//         }

//         modulesView.$el.sortable({
//             connectWith: '.dnd-wrapper.dnd-source'
//         }).bind('dragstart.h5s', function(e, ui) {
//             console.log(e);
//         }).bind('sortupdate', function(e,ui) {

//             $target = $(e.target);

//             var nextRecordId = parseInt( ui.item.next().attr('id'), 10 );
//             var nextModel = modulesView.recordsColl.findWhere({id:nextRecordId});
//             var nextIdx = modulesView.recordsColl.indexOf(nextModel);

//             console.log( nextRecordId, nextModel, nextIdx );

//             // is the drag from an outside parent
//             if( ui.startparent.attr('id') !== ui.endparent.attr('id') ){

//                 console.log(ui.item.find(':input').serializeObject());

//                 $.ajax({
//                     url: modulesView.recordsColl.newUrl,
//                     type: 'POST',
//                     contentType: 'application/json',
//                     data: JSON.stringify(ui.item.find(':input').serializeObject()),
//                     dataType: 'json',
//                     beforeSend: function(){
//                         ADF.utils.spin(modulesView.$el);
//                     },
//                     complete: function( jqXHR, textStatus ){

//                         if( jqXHR.status === 200 ){

//                             if( !jqXHR.hasOwnProperty('responseJSON') ){
//                                 jqXHR.responseJSON = JSON.parse(jqXHR.responseText);
//                             }

//                             ADF.utils.log('AJAX message: '+jqXHR.responseJSON.message);

//                             if( jqXHR.responseJSON.success === true ){

//                                 if( jqXHR.responseJSON.data.hasOwnProperty('records') ){
//                                     modulesView.recordsColl.add( jqXHR.responseJSON.data.records, { at: nextIdx } );
//                                 }

//                                 modulesView.$el.empty();
//                                 modulesView.renderModules();

//                             }else{

//                                 if( jqXHR.responseJSON.hasOwnProperty('errors') ){
//                                     _.each(jqXHR.responseJSON.errors,function( element, index, array ){
//                                         alert(element);
//                                     });
//                                 }else{
//                                     alert('Looks like the ajax response wasn\'t quite what was expected from '+opts.url+'.  Probably need to get a TA involved.');
//                                 }

//                             }

//                         }else if( jqXHR.status === 404 ){

//                             alert('Page Not Found\n\nThe ajax calls is being made to a page ('+opts.url+') that could not be found. Probably going to need to get a TA involved to see what is going on here.');

//                         }else{

//                             alert(textStatus+'! Probably going to need to get a TA involved.');
//                             console.log('opts',opts);
//                             console.log(jqXHR);
//                             // target.html(jqXHR.responseText);

//                         }

//                     }
//                 });

//             // drag is happening within a list, just need to resort
//             }else{

//                 var thisId = parseInt( ui.item.attr('id'), 10 );
//                 var thisModel = modulesView.recordsColl.findWhere({id:thisId});
//                 var thisIdx = modulesView.recordsColl.indexOf(thisModel);
//                 modulesView.recordsColl.remove(thisModel);

//                 // TODO: HANDLE DRAG WITHIN TARGET
//                         // reorder: function(new_index, original_index) {
//                         //         // If nothing is being changed, don't bother
//                         //         if (new_index is original_index) return this
//                         //         // Get the model being moved
//                         //         temp = collection.at(original_index)
//                         //         // Remove it
//                         //         collection.remove(temp)
//                         //         // Add it back in at the new index
//                         //         collection.add(temp, {at: new_index))
//                         //         return this
//                         // }
//                 if( thisIdx > nextIdx ){
//                     modulesView.recordsColl.add( thisModel, { at: nextIdx } );
//                 }else{
//                     modulesView.recordsColl.add( thisModel, { at: ( nextIdx - 1 ) } );
//                 }
//                 modulesView.$el.empty();
//                 _.each( modulesView.recordsColl, function( element, index, array ){
//                     modulesView.recordsColl.models[index].set('read_order',( index * 10 ) + 10);
//                 });
//                 modulesView.renderModules();

//             }

//         }).bind('dragenter.h5s', function(e) {
//             if( $(e.target).parent().hasClass('dnd-target') ){
//                 $(e.target).css({
//                     background: 'orange'
//                 });
//             }
//         });


//     }

// });
/*global
ADF,
Marionette,
adf,
$,
_
*/
ADF.RecordView = Marionette.CompositeView.extend({
    template: ADF.templates.gridRow,
    tagName: 'tr',
    className: 'adf-record',
    childView: ADF.CellView,
    childViewClass: ADF.CellView,
    events: {
        'change :input'                 : 'inputChange',
        'click .btn'                    : 'handleAction',
        'click .adf-grid-overlay-value' : 'showOverlayEditor'
    },
    initialize: function( options ) {
        ADF.utils.message('log','RecordView Initialized', options );
        this.region = adf.page.getRegion(options.regionName);
        this.regionName = this.region.options.regionName;
        this.model.set('regionName',this.regionName);
        this.collection = this.region.fieldsCollection;
        this.listenTo(this.model,'all', this.recordEvent);
    },
    renderSelf: function() {
        // this would be called when the record has changed and needs to be rerendered
        // TODO: make this actually work for both rendering on initial load (as child) and as standalone record (on change)
        this.render();
    },
    render: function() {

        var cellsString = '';

        var recordView = this;

        // put the children (the fields) into the drop down but above the divider
        this.collection.each(function(model){

            // TODO: move this to the model initializer
            model.set('regionName',recordView.regionName);
            model.set('currentValue',recordView.model.get(model.get('name')));
            var childView = new recordView.childView({model:model});
            // this.addChild(childView);
            // console.debug(childView.render());
            cellsString += childView.render();
            // this.addChild(childView);

        },this);

        return this.template($.extend({},this.model.toJSON(),{cells:cellsString}));
    },
    renderAsChild: function() {

        var cellsString = '';

        var recordView = this;

        // put the children (the fields) into the drop down but above the divider
        this.collection.each(function(model){

            // TODO: move this to the model initializer
            model.set('regionName',recordView.regionName);
            model.set('currentValue',recordView.model.get(model.get('name')));
            var childView = new recordView.childView({model:model});
            // this.addChild(childView);
            // console.debug(childView.render());
            cellsString += childView.render();
            // this.addChild(childView);

        },this);

        return this.template($.extend({},this.model.toJSON(),{cells:cellsString}));
    },
    handleAction: function(e) {
        e.preventDefault();
        var recordView = this;
        var $targetObj = $(e.target).closest('a');
        var targetData = $targetObj.data();
        var actionType = $targetObj.attr('data-action-type');
        var regionObj = {};
        // TODO: experiment with making this dynamic
        switch( actionType ){
            case 'save':
                this.model.url = $targetObj.attr('href');
                this.model.save(null,{fieldsCollection: recordView.collection});
                break;
            case 'load-adf-region':
                $.extend(regionObj,targetData,{adfAjaxOnshow:true,adfAjaxUrl:$targetObj.attr('href')});
                if( !_.isUndefined( adf.page.getRegion(regionObj.regionName) ) ) {
                    adf.page.removeRegion(regionObj.regionName);
                }
                adf.page.addRegions( adf.page._buildRegion(regionObj,targetData.adfRegionId) );
                adf.page.getRegion(regionObj.regionName).show();
                break;
            default:
                ADF.utils.message('error','Unexpected record action ('+actionType+') triggered.',$targetObj);
        }
    },
    showOverlayEditor: function(e) {
        // TODO: find the actual cell that had this event and then trigger with that as the trigger object
        e.preventDefault();
        adf.page.getRegion('overlayEditor').show( this, $(e.target) );
    },
    inputChange: function( e ){

        // console.log('input change',model,options);

        // stopping the propagation for overlay changes so they don't change the master
        e.preventDefault();
        e.stopPropagation();

        var changed = e.currentTarget;
        var value = $(e.currentTarget).val();
        var obj = {};
        obj[changed.name] = value;

        this.model.set(obj);

        ADF.utils.message('debug','Record input change',obj,this.model);

        this.$el.removeClass('current').addClass('updated');

    },

    recordEvent: function( event, model, response, options ) {

        switch( event.indexOf(':') >= 0 ? event.substr(0,event.indexOf(':')) : event ){
            case 'change':
                break;
            case 'request':
                break;
            case 'sync':
                if( options.xhr.status === 200 ){

                    ADF.utils.message('debug','Record action completed successfully',model,response,options);

                    if( response.success ){
                        this.$el.removeClass('updated added error').addClass('current');
                    }else{
                        this.$el.removeClass('updated added current').addClass('error');
                        ADF.utils.message('error','Something went wrong in saving the record',model,response,options);
                    }

                }else{

                    this.$el.removeClass('updated added current').addClass('error');
                    ADF.utils.message('error','Something unexpected went wrong in saving the record',model,response,options);

                }
                break;

            default:
                ADF.utils.message('debug','Unexpected event from the record view',event, model, response, options);
                break;
        }


    }

});

//     events: {
//         // ACTIONS
//         'click .btn-save'                     : 'save'
//     },

//     createTplObject: function( args ){

//         var record = this;
//         var fieldsArray = args.fields;
//         var $target = args.target;
//         var createRow = ( args.hasOwnProperty('createRow') && args.createRow );
//         var cellObj = {};
//         var recordObj = {}
//         recordObj.cells = new Array();

//         for ( var i = 0; i < fieldsArray.length; i++ ) {

//             cellObj = fieldsArray[i];
//             cellObj.set('currentValue',record.get(fieldsArray[i].get('name')));
//             cellObj.set('inputField',cellObj.render());

//             recordObj.cells.push({'html': autoAdmin.templates.gridCell( cellObj.toJSON() )});

//         }

//         //make sure we have an ID value, even for new rows
//         if( record.get('id') ){
//             recordObj.id = record.get('id');
//             recordObj.rowClass = 'current';
//         }else{
//             recordObj.id = 'a' + Math.round( Math.random() * 10000000 );
//             rowClass = 'added';
//         }

//         return recordObj;

//     },

//     render: function( args ){

//         var tplObject = this.createTplObject( args );

//         alert('not done');

//         // TODO handle create row argument, etc.

//         // if( createRow ){

//     //         if( !args.hasOwnProperty('adjSibObj') || args.adjSibObj === false ){
//     //             $target.append( autoAdmin.render.hbsTemplate( 'autoAdminGridRow', rowObj ) );
//     //         }else{
//     //             adjSibObj.after( autoAdmin.render.hbsTemplate( 'autoAdminGridRow', rowObj ) );
//     //         }

//         // }else{

//         //      $target.find('tbody tr#'+recordObj.id).replaceWith(autoAdmin.templates.gridRow( rowObj ) );

//         // }

//     //     $('#'+dataObj.id).find('.select2').each(function(){
//     //         autoAdmin.render.renderSelect2({
//     //             select2Obj : $(this)
//     //         })
//     //     });

//     },

// });
/*global
ADF,
Backbone,
Marionette,
adf,
$
*/
ADF.GridView = Marionette.CompositeView.extend({
    // TODO: grid-row messaging
    // TODO: overlay template adjusted to handle array of data with format/delimiter from data-supl-info attribute
    // TODO: grid-level action for saving all records

    className: 'adf-grid',
    tagName: 'table',
    childView: ADF.RecordView,
    childViewClass: ADF.RecordView,
    childViewContainer: 'tbody',
    childViewOptions : function () {
        return { regionName: this.regionName };
    },
    events : {
        'dragover'                        : 'uploadDragHandle',
        'dragleave'                       : 'uploadDragHandle',
        'drop'                            : 'uploadStart'
    },
    template: ADF.templates.gridTable,
    initialize: function( options ) {
        ADF.utils.message('log','GridView Initialized', options );
        this.regionName = options.regionName;
        this.filters = new Backbone.Collection();
        var gridView = this;
        var region = adf.page.getRegion(gridView.regionName);
        gridView.$el.html(gridView.template({}));
        this.uploadUrl = region.$el.attr('data-grid-upload-url');

        gridView.headersView = new ADF.HeadersView({
            el: gridView.$el.find('thead')[0],
            collection: region.fieldsCollection,
            regionName: gridView.regionName
        });

        gridView.columnSelect = new ADF.ColumnSelectView({
            el: gridView.$el.find('.adf-grid-column-select')[0],
            collection: region.fieldsCollection,
            regionName: gridView.regionName
        });

        gridView.gridActions = new ADF.GridActionsView({
            el: gridView.$el.find('.adf-grid-actions')[0],
            collection: region.actionsCollection,
            regionName: gridView.regionName
        });

        this.listenTo(this.filters,'add',this.filtersQueue);
        this.listenTo(this.filters,'remove',this.filtersQueue);

        this._super();

    },
    render: function() {
        // console.log(this.filters);
        var gridView = this;
        gridView.headersView.render();
        gridView.columnSelect.render();
        gridView.gridActions.render();
        var childContainer = this.$el.find(this.childViewContainer);
        childContainer.empty();
        gridView.collection.each(function(recordModel) {

            // this works but we end up with the wrong rendering
            // something about the record render() not returning 'this' is causing a problem
            // TODO: make this work so we can take more advantage of Marionette
            // gridView.addChild(recordModel, this.childView );

            // and this works but then we are doing a bunch of stuff that it seems like Marionette should be doing for us
            var childView = new gridView.childView($.extend({},gridView.childViewOptions(),{model:recordModel}));
            childContainer.append(childView.renderAsChild());
            childView.setElement('#'+recordModel.get('regionName') + '--' + recordModel.get('id'));

        },this);

        ADF.utils.select2.refresh();

        // console.log(gridView.children);
    },
    filtersQueue: function(model) {

        // the first time we add to the queue we just start with whatever we have already applied
        if( !this.filtersQueued ){
            this.filtersQueued = this.filters;
        }

        // this.filtersQueued

    },
    uploadDragHandle: function( e ) {

        e.stopPropagation();
        e.preventDefault();
        console.log('dragover happening');

        if( e.type == 'dragover' ){
            clearTimeout(this.dndTimer);
            $('body').addClass('droppable');
            if( $(e.target).hasClass('upload-drop-zone') ){
                $(e.target).addClass('hover');
            }else{
                $('.upload-drop-zone').removeClass('hover');
            }
        }else{
            this.dndTimer = setTimeout(function() {
                $('body').removeClass('droppable');
                $('.upload-drop-zone').removeClass('hover');
            }, 200);
        }

    },
    uploadStart: function( e ){

        var gridView = this;
        var file;

        // TODO: do this a bit more elegantly but for some reason the XHR upload was getting the uploadStart to fire on it so this just stop that
        if( $(e.target).closest('.adf-grid').size() === 0 ){
            return false;
        }

        // Or else the browser will open the file
        e.preventDefault();
        e.stopPropagation();

        this.dndTimer = setTimeout(function() {
            $('body').removeClass('droppable');
            $('.upload-drop-zone').removeClass('hover');
        }, 200);

        // gridView.uploadDragHandle(e);

        // autoAdmin.ui.dialog({
        //     id : "upload-progress",
        //     header : "File Upload Progress",
        //     footer : "<a href='#' class='btn icon icon-cancel upload-cancel'>Cancel</a>",
        //     action : "showModal"
        // })

        var files = e.target.files || e.dataTransfer.files;

        for( var i = 0; file = files[i]; i++ ) {

            var xhr = new XMLHttpRequest();

            if (xhr.upload && file.size <= 30000000) {
                // start upload
                xhr.upload.filename = file.name;
                // generate a random number to be used for this file's progress
                xhr.progressId = 'progress-' + Math.floor((Math.random() * 100000));
                xhr.upload.progressId = xhr.progressId;
                xhr.upload.addEventListener('loadstart', gridView.uploadLoadStart, false);
                xhr.upload.addEventListener('progress', gridView.uploadProgress, false);
                xhr.upload.addEventListener('load', gridView.uploadComplete, false);
                xhr.upload.addEventListener('error', gridView.uploadError, false);
                xhr.upload.addEventListener('abort', gridView.uploadAbort, false);
                xhr.addEventListener('load',function(e){
                    gridView.uploadResponse( this.status, this.progressId, e.currentTarget.responseText );
                });
                xhr.open('POST', this.uploadUrl, true);
                xhr.setRequestHeader('Content-Type', 'application/octet-stream');
                xhr.setRequestHeader('X-File-Name', file.name);
                xhr.send(file);
            }else{
                console.log('file not uploaded',file);
            }

        }
    },
    uploadLoadStart: function( event ){

        // append to the dialog body
        $('#upload-progress .dialog-body').append('<div class="upload-progress" id="'+this.progressId+'"><label for="'+this.progressId+'-meter">'+this.filename+'</label><progress id="'+this.progressId+'-meter" max="100" value="0" /></div>');

    },

    uploadProgress: function( event ){
        if (event.lengthComputable) {
            var progress = Math.ceil( ( event.loaded / event.total ) * 100 );
            $('#'+this.progressId+'-meter').attr('value',progress);
        }
    },

    uploadComplete: function( event ){
        $('#upload-progress .dialog-footer .upload-cancel').replaceWith('<a href="#" class="btn close icon icon-close">done</a>');
    },

    uploadResponse: function( status, progressId, responseText ){

        if( status == 200 ){

            var data = JSON.parse(responseText);
            var records = data.records;

            records.forEach(function( element, index, array ){
                ADF.utils.message('warn','create new record');
                // autoAdmin.render.renderGridRecord({
                //     "target" : $('.auto-admin-grid tbody'),
                //     "columns" : data.columns,
                //     "dataObj" : element,
                //     "createRow" : true
                // })
            });

            $('#'+progressId).after('<p>'+records.length+' records added successfully.</p>');


        }else{

            ADF.utils.message('error','Error processing upload of file',responseText);

        }

    },
    uploadError: function(e) {
        e.preventDefault();
        ADF.utils.message('error','Error processing upload of file');
    },
    uploadAbort: function(e) {
        e.preventDefault();
        ADF.utils.message('error','File upload aborted');
    }


});

// autoAdmin.GridView = autoAdmin.PageView.extend({

//     render: function( opts ){

//         var gridView = this;
//         var $target = opts.target;
//         var fieldsArray = opts.ajaxView.fieldsColl.models;
//         var recordsArray = opts.ajaxView.recordsColl.models;
//         var gridObj = {};

//         gridObj.headers = new Array();
//         gridObj.colSelectCols = new Array();
//         gridObj.records = new Array();

//         // COLUMNS
//         for ( var i = 0; i < fieldsArray.length; i++ ) {

//             fieldsArray[i].set('colIndex',i);
//             fieldsArray[i].set('gridRow',true);

//             gridObj.headers[i] = { 'html' : autoAdmin.templates.gridHeaderCell( fieldsArray[i].toJSON() ) };

//             if( fieldsArray[i].get('columnSelectPriority') != 0 ){

//                 // TODO: set the checked attribute if this is going to be visible

//                 gridObj.colSelectCols.push({'html' : autoAdmin.templates.dropdownSelectItem( $.extend( fieldsArray[i].toJSON(), {parent:'column-selector'} ) ) });

//             }

//         }

//         // put those fields into records
//         for ( var j = 0; j < recordsArray.length; j++ ) {

//             gridObj.records.push({
//                 'html' : autoAdmin.templates.gridRow( recordsArray[j].createTplObject({fields : fieldsArray}))
//             });

//         }

//         gridObj.colSelect = gridView.renderColumnSelector( gridObj.colSelectCols );

//         // TODO grid actions

//         $target.html( autoAdmin.templates.gridWrapper( gridObj ) );

//         gridView.refreshFilters( $target, fieldsArray );

//         $target.find('.select2').each(function(){
//             autoAdmin.utils.renderSelect2({
//                 select2Obj : $(this)
//             })
//         })

//     },

//     refreshFilters: function( $target, fieldsArray ){

//         var gridView = this;
//         var rows = $target.find('tbody tr');
//         var val;
//         var fieldName;
//         var field;
//         var values = new Array();

//         // go through each column
//         for ( var i = 0; i < fieldsArray.length; i++ ) {

//             field = fieldsArray[i];

//             fieldName = field.get('name');

//             if( fieldName === 'actions' ){
//                 continue;
//             }

//             // reset for each column
//             values = {}

//             rows.each(function(){

//                 // cache it
//                 var inputElement = $(this).find('td').eq(i).find(':input[name='+fieldName+']');

//                 // BUG select2 values being accumulated into filters not working properly
//                 val = ( inputElement.val() ? inputElement.val() : inputElement.select2('val') );

//                 if( val && val.length > 0 ){
//                     values[val] = val;
//                 }

//             })

//             //add these to the main columns array
//             if( _.size(values) > 0 ){
//                 field.set('currentValues',values);
//             }

//             // refresh the filter
//             gridView.refreshFilterOptions( $target, field );

//         }

//     },

//     refreshFilterOptions: function( $target, field ){

//         var th = $target.find('thead tr th').eq(field.get('colIndex'));
//         var tmpltObj = {};
//         var dropdownObj = {
//             wrapClass : 'grid-header-filter',
//             footerOptions : [
//                 {
//                     href : '#',
//                     itemClass : 'grid-header-filter-clear',
//                     label : 'Clear Filters'
//                 }
//             ]
//         }

//         //remove all filter data
//         th.find('.dropdown-wrapper').remove();
//         th.append( autoAdmin.templates.dropdownMenu( dropdownObj ) );

//         //only attempt to do something if there are values in there
//         if( _.size(field.get('currentValues')) > 0 ){

//             th.addClass('has-filter').find('.icon-filter').removeClass('hide')

//             for( var value in field.get('currentValues') ){

//                 tmpltObj.name = value;
//                 tmpltObj.parent = field.get('name');
//                 if( field.get('data') && field.get('data').length > 0 ){

//                     for( var rec in field.get('data').data ){

//                         if( field.get('data')[rec].value == value ){

//                             tmpltObj.label = ( field.get('data')[rec].hasOwnProperty('label') ? field.get('data')[rec].label : field.get('data')[rec].value );
//                             break;

//                         }

//                     }

//                 }else{

//                     tmpltObj.label = value;

//                 }

//                 th.find('.dropdown-menu .divider').before( autoAdmin.templates.dropdownSelectItem( tmpltObj ) );

//             }

//         }else{

//             th.find('.icon-filter').addClass('hide');

//         }

//     },

// });
/*global
ADF,
Backbone
*/
ADF.HeaderView = Backbone.Marionette.CompositeView.extend({
    template: ADF.templates.gridHeaderCell,
    tagName: 'th',
    childView: ADF.GridFilterView,
    // childViewOptions : function () {
    //     return { regionName: this.regionName };
    // },
    initialize: function( options ){
        ADF.utils.message('log','HeaderView Initialized', options);
        var headerView = this;
        headerView.regionName = options.regionName;
        this.model.set('colIndex',this.model.collection.indexOf(this.model));
        this.model.set('regionName',options.regionName);

        headerView.gridFilter = new ADF.GridFilterView({
            headerEl: headerView.$el,
            regionName: headerView.regionName,
            fieldType: headerView.model.get('type'),
            fieldName: headerView.model.get('name')
        });

    },
    render: function() {
        // TODO: use hbs template rather than all this silly JS
        this.$el
            .attr('data-column-select-priority',this.model.get('fieldPriority'))
            .attr('id',this.model.get('regionName') + '--' + this.model.get('name'))
            .attr('data-column-index',this.model.get('colIndex'))
            .addClass(this.model.get('wrapClass'));
        if( this.model.get('tooltip') ){
            this.$el.addClass('has-tooltip');
        }

        // this.$el.append(this.childView.render());
        // this.childView.render();

        // return this.template(this.model.toJSON());
        this._super();

        this.gridFilter.render();

    }
});
/*global
ADF,
Backbone
*/
ADF.HeadersView = Backbone.Marionette.CollectionView.extend({
    template: ADF.templates.gridRow,
    tagName: 'tr',
    childView: ADF.HeaderView,
    childViewOptions : function () {
        return { regionName: this.regionName };
    },
    initialize: function( options ) {
        // TODO: get the children to render inside this <tr>
        ADF.utils.message('log','HeadersView Initialized', options );
        this.regionName = options.regionName;
    }

});
/*global
$,
adf
*/
$(function(){

    adf.start({});

});